{"version":3,"sources":["components/pages/CollectionDetail/Tabs/ActivityTab/index.tsx"],"names":["CustomTable","Loadable","lazy","ActivityTab","theme","useTheme","listCollectionActivity","useSelector","selectListCollectionActivity","userAddress","selectAddress","chainId","selectChainId","thData","Object","values","tdData","list","length","map","item","Event","type","TYPE_TRANSACTION","Price","formatPriceHistory","tokenPrice","priceType","From","formatAddressHistory","from","To","to","TransactionHash","txHash","href","id","ETHERSCAN","url","sx","color","palette","text","primary","transition","target","formatTxHashHistory","Time","formatTimeHistory","createdAt","renderListData","React","memo"],"mappings":"sJAAA,gHAuBMA,EAAcC,YAASC,gBAAK,kBAAM,oCAExC,SAASC,IACR,IAAMC,EAAQC,cAGRC,EAA+CC,YAAYC,KAC3DC,EAAcF,YAAYG,KAC1BC,EAAUJ,YAAYK,KAgD5B,OAAO,cAACZ,EAAD,CAAaa,OAxCZC,OAAOC,OADE,CAAC,QAAS,SAAU,OAAQ,KAAM,mBAAoB,SAyC3BC,OAjCrB,SAACC,GACvB,GAAIA,GAAQA,EAAKC,OAAS,EACzB,OAAOD,EAAKE,KAAI,SAACC,GAChB,MAAO,CACNC,MAAO,cAAC,WAAD,WAjBiBC,EAiBaF,EAAKE,KAhBtCC,IAAiBD,MAiBrBE,MACC,cAAC,WAAD,UAAWC,YAAmBL,EAAKM,WAAYN,EAAKO,aAErDC,KAAM,cAAC,WAAD,UAAWC,YAAqBT,EAAKU,KAAMrB,KACjDsB,GAAI,cAAC,WAAD,UAAWF,YAAqBT,EAAKY,GAAIvB,KAC7CwB,gBAAiBb,EAAKc,OACrB,cAAC,IAAD,CACCC,KAAI,WAhByBC,EAgBMzB,EAfjC0B,IAAUD,IAegCE,IAAxC,cAAiDlB,EAAKc,QAC1DK,GAAI,CACHC,MAAOpC,EAAMqC,QAAQC,KAAKC,QAC1B,UAAW,CACVH,MAAO,UACPI,WAAY,aAGdC,OAAO,SATR,SAWEC,YAAoB1B,EAAKc,UAG3B,cAAC,WAAD,oBAEDa,KAAM,cAAC,WAAD,UAAWC,YAAkB5B,EAAK6B,cA/BV,IAACb,EATPd,KA8CwB4B,CAAe5C,KAGrD6C,cAAMC,KAAKjD","file":"static/js/83.30f2ca1d.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { Fragment, lazy } from 'react';\n//component\nimport Loadable from 'components/CustomUI/LoadableComponent';\n//redux\nimport { useSelector } from 'react-redux';\nimport { selectAddress, selectChainId } from 'redux/slices/web3InfoSlice';\nimport { selectListCollectionActivity } from 'redux/slices/tradingSlice';\n//models\nimport { CollectionActivity } from 'models';\n//constant\nimport { TYPE_TRANSACTION } from '../../../../../constants';\nimport { ETHERSCAN } from 'constants/etherscan.constant';\n//mui\nimport { Link, useTheme } from '@mui/material';\n// utils\nimport {\n\tformatAddressHistory,\n\tformatPriceHistory,\n\tformatTimeHistory,\n\tformatTxHashHistory,\n} from 'utils';\n\nconst CustomTable = Loadable(lazy(() => import('components/CustomUI/CustomTable')));\n\nfunction ActivityTab() {\n\tconst theme = useTheme();\n\n\t// useSelector\n\tconst listCollectionActivity: CollectionActivity[] = useSelector(selectListCollectionActivity);\n\tconst userAddress = useSelector(selectAddress);\n\tconst chainId = useSelector(selectChainId);\n\n\tconst getTransactionType = (type: number) => {\n\t\treturn TYPE_TRANSACTION[type];\n\t};\n\n\tconst renderHeader = () => {\n\t\tlet listTitle = ['Event', 'Amount', 'From', 'To', 'Transaction hash', 'Time'];\n\t\treturn Object.values(listTitle);\n\t};\n\n\tconst getEtherscanInfoByChainId = (id: number) => {\n\t\treturn ETHERSCAN[id];\n\t};\n\n\tconst renderListData = (list: CollectionActivity[]) => {\n\t\tif (list && list.length > 0) {\n\t\t\treturn list.map((item: CollectionActivity) => {\n\t\t\t\treturn {\n\t\t\t\t\tEvent: <Fragment>{getTransactionType(item.type)}</Fragment>,\n\t\t\t\t\tPrice: (\n\t\t\t\t\t\t<Fragment>{formatPriceHistory(item.tokenPrice, item.priceType)}</Fragment>\n\t\t\t\t\t),\n\t\t\t\t\tFrom: <Fragment>{formatAddressHistory(item.from, userAddress)}</Fragment>,\n\t\t\t\t\tTo: <Fragment>{formatAddressHistory(item.to, userAddress)}</Fragment>,\n\t\t\t\t\tTransactionHash: item.txHash ? (\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\thref={`${getEtherscanInfoByChainId(chainId).url}tx/${item.txHash}`}\n\t\t\t\t\t\t\tsx={{\n\t\t\t\t\t\t\t\tcolor: theme.palette.text.primary,\n\t\t\t\t\t\t\t\t'&:hover': {\n\t\t\t\t\t\t\t\t\tcolor: '#3366FF',\n\t\t\t\t\t\t\t\t\ttransition: 'all 0.2s',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{formatTxHashHistory(item.txHash)}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>-----</Fragment>\n\t\t\t\t\t),\n\t\t\t\t\tTime: <Fragment>{formatTimeHistory(item.createdAt)}</Fragment>,\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t};\n\n\treturn <CustomTable thData={renderHeader()} tdData={renderListData(listCollectionActivity)} />;\n}\n\nexport default React.memo(ActivityTab);\n"],"sourceRoot":""}