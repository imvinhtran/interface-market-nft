{"version":3,"sources":["assets/icons/graph-white.webp","assets/icons/graph-black.webp","components/pages/ItemDetail/TradingHistory/index.tsx"],"names":["ExpandCard","Loadable","lazy","CustomTable","TradingHistory","props","theme","useTheme","isLightTheme","palette","mode","chainId","useSelector","selectChainId","userAddress","selectAddress","listItemActivity","selectListItemActivity","title","icon","IconGraphBlack","IconGraphWhite","alt","thData","Object","values","tdData","length","map","item","Event","type","TYPE_TRANSACTION","Amount","formatPriceHistory","tokenPrice","priceType","From","formatAddressHistory","from","To","to","TransactionHash","txHash","href","id","ETHERSCAN","url","sx","color","text","primary","transition","target","formatTxHashHistory","Time","formatTimeHistory","createdAt","renderListData"],"mappings":"sJAAe,QAA0B,0C,kCCA1B,QAA0B,0C,kCCAzC,2HA6BMA,EAAaC,YAASC,gBAAK,kBAAM,oCACjCC,EAAcF,YAASC,gBAAK,kBAAM,oCAsEzBE,UA9Df,SAAwBC,GACvB,IAAMC,EAAQC,cACRC,EAAsC,UAAvBF,EAAMG,QAAQC,KAG7BC,EAAUC,YAAYC,KACtBC,EAAcF,YAAYG,KAC1BC,EAAmCJ,YAAYK,KA4CrD,OACC,cAACjB,EAAD,CACCkB,MAAM,gBACNC,KAAMX,EAAeY,IAAiBC,IACtCC,IAAI,eAHL,SAKC,cAACnB,EAAD,CAAaoB,OA9CPC,OAAOC,OADE,CAAC,QAAS,SAAU,OAAQ,KAAM,mBAAoB,SA+CjCC,OAvCf,WACtB,GAAIV,GAAoBA,EAAiBW,OAAS,EACjD,OAAOX,EAAiBY,KAAI,SAACC,GAC5B,MAAO,CACNC,MAAO,cAAC,WAAD,WA1BgBC,EA0BcF,EAAKE,KAzBvCC,IAAiBD,MA0BpBE,OACC,cAAC,WAAD,UAAWC,YAAmBL,EAAKM,WAAYN,EAAKO,aAErDC,KAAM,cAAC,WAAD,UAAWC,YAAqBT,EAAKU,KAAMzB,KACjD0B,GAAI,cAAC,WAAD,UAAWF,YAAqBT,EAAKY,GAAI3B,KAC7C4B,gBAAiBb,EAAKc,OACrB,cAAC,IAAD,CACCC,KAAI,WAhByBC,EAgBMlC,EAfjCmC,IAAUD,IAegCE,IAAxC,cAAiDlB,EAAKc,QAC1DK,GAAI,CACHC,MAAO3C,EAAMG,QAAQyC,KAAKC,QAC1B,UAAW,CACVF,MAAO,UACPG,WAAY,aAGdC,OAAO,SATR,SAWEC,YAAoBzB,EAAKc,UAG3B,cAAC,WAAD,oBAEDY,KAAM,cAAC,WAAD,UAAWC,YAAkB3B,EAAK4B,cA/BV,IAACZ,EAlBRd,KA6DmB2B","file":"static/js/63.e5cecce3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/graph-white.963fc5b6.webp\";","export default __webpack_public_path__ + \"static/media/graph-black.6d732e4f.webp\";","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, Fragment, useState, lazy } from 'react';\n//components\nimport Loadable from 'components/CustomUI/LoadableComponent';\n//redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectChainId, selectAddress } from 'redux/slices/web3InfoSlice';\nimport { selectListItemActivity } from 'redux/slices/tradingSlice';\nimport { selectNftItem } from 'redux/slices/nftItemByItemIdSlice';\n//actions\nimport { fetchTradingHistoryByNFTsId } from 'redux/actions/tradingAction';\n//constant\nimport { ETHERSCAN } from 'constants/etherscan.constant';\nimport { TYPE_TRANSACTION } from '../../../../constants';\n//modals\nimport { ItemActivity } from 'models/histories';\n//image\nimport IconGraphWhite from 'assets/icons/graph-white.webp';\nimport IconGraphBlack from 'assets/icons/graph-black.webp';\n//mui\nimport { Link, useTheme } from '@mui/material';\n// utils\nimport {\n\tformatAddressHistory,\n\tformatPriceHistory,\n\tformatTimeHistory,\n\tformatTxHashHistory,\n} from 'utils';\n\nconst ExpandCard = Loadable(lazy(() => import('../ExpandCard')));\nconst CustomTable = Loadable(lazy(() => import('components/CustomUI/CustomTable')));\n\nexport interface TradingHistoryProps {}\n\nconst getTransactionType = (type: number) => {\n\treturn TYPE_TRANSACTION[type];\n};\n\nfunction TradingHistory(props: TradingHistoryProps) {\n\tconst theme = useTheme();\n\tconst isLightTheme = theme.palette.mode === 'light';\n\n\t//selector\n\tconst chainId = useSelector(selectChainId);\n\tconst userAddress = useSelector(selectAddress);\n\tconst listItemActivity: ItemActivity[] = useSelector(selectListItemActivity);\n\n\tconst renderTitle = () => {\n\t\tlet listTitle = ['Event', 'Amount', 'From', 'To', 'Transaction hash', 'Time'];\n\t\treturn Object.values(listTitle);\n\t};\n\n\tconst getEtherscanInfoByChainId = (id: number) => {\n\t\treturn ETHERSCAN[id];\n\t};\n\n\tconst renderListData = () => {\n\t\tif (listItemActivity && listItemActivity.length > 0) {\n\t\t\treturn listItemActivity.map((item: ItemActivity) => {\n\t\t\t\treturn {\n\t\t\t\t\tEvent: <Fragment>{getTransactionType(item.type)}</Fragment>,\n\t\t\t\t\tAmount: (\n\t\t\t\t\t\t<Fragment>{formatPriceHistory(item.tokenPrice, item.priceType)}</Fragment>\n\t\t\t\t\t),\n\t\t\t\t\tFrom: <Fragment>{formatAddressHistory(item.from, userAddress)}</Fragment>,\n\t\t\t\t\tTo: <Fragment>{formatAddressHistory(item.to, userAddress)}</Fragment>,\n\t\t\t\t\tTransactionHash: item.txHash ? (\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\thref={`${getEtherscanInfoByChainId(chainId).url}tx/${item.txHash}`}\n\t\t\t\t\t\t\tsx={{\n\t\t\t\t\t\t\t\tcolor: theme.palette.text.primary,\n\t\t\t\t\t\t\t\t'&:hover': {\n\t\t\t\t\t\t\t\t\tcolor: '#3366FF',\n\t\t\t\t\t\t\t\t\ttransition: 'all 0.2s',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{formatTxHashHistory(item.txHash)}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>-----</Fragment>\n\t\t\t\t\t),\n\t\t\t\t\tTime: <Fragment>{formatTimeHistory(item.createdAt)}</Fragment>,\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<ExpandCard\n\t\t\ttitle=\"Item Activity\"\n\t\t\ticon={isLightTheme ? IconGraphBlack : IconGraphWhite}\n\t\t\talt=\"trading-icon\"\n\t\t>\n\t\t\t<CustomTable thData={renderTitle()} tdData={renderListData()} />\n\t\t</ExpandCard>\n\t);\n}\n\nexport default TradingHistory;\n"],"sourceRoot":""}