{"version":3,"sources":["constants/rpcUrl.constant.ts","assets/images/network/switch-network.webp","components/Layouts/SwitchNetwork/styled.ts","components/Layouts/SwitchNetwork/index.tsx"],"names":["mainnetEthereum","chainId","mainnetPolygon","chainName","rpcUrls","mainnetBinance","nativeCurrency","name","symbol","decimals","mainnetAvalanche","NetworkSwitchStyle","styled","display","alignItems","justifyContent","position","padding","NetworkSwitchBackground","backgroundImage","backgroundSize","width","height","animation","from","transform","to","NetworkSwitchContent","transition","cursor","ColumnStyle","top","flexDirection","CollumnOne","left","CollumnTwo","NetworkSwitchIcon","borderRadius","backgroundColor","getInfoNetWorkByChainId","id","NETWORKINFO","SwitchNetWork","theme","useTheme","dispatch","useDispatch","useState","netWork","setNetWork","chainIdState","useSelector","selectChainId","isLightTheme","palette","mode","useEffect","document","body","classList","add","remove","changeNetwork","mainnet","newChainId","a","window","ethereum","request","method","params","Web3","utils","toHex","setChainId","toast","success","console","log","code","error","ButtonGradient","sx","onClick","Stack","direction","src","image","alt","className","Typography","variant","ml","Modal","mainHeader","onOpen","onClose","style","maxWidth","background","primaryLight","main","gradients","secondary","Tooltip","title","placement","PolygonIcon","EthIcon","BinanceIcon","AvaxIcon","React","memo"],"mappings":"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","file":"static/js/81.28c9db44.chunk.js","sourcesContent":["export const mainnetEthereum = [\n\t{\n\t\tchainId: '0x1',\n\t},\n];\n\nexport const mainnetPolygon = [\n\t{\n\t\tchainId: '0x89',\n\t\tchainName: 'Matic Mainnet RPC',\n\t\trpcUrls: ['https://polygon-rpc.com'],\n\t},\n];\n\nexport const mainnetBinance = [\n\t{\n\t\tchainId: '0x38',\n\t\tchainName: 'Binance Smart Chain Mainnet RPC',\n\t\trpcUrls: ['https://bsc-dataseed.binance.org/'],\n\t\tnativeCurrency: {\n\t\t\tname: 'BNB',\n\t\t\tsymbol: 'BNB', // 2-6 characters long\n\t\t\tdecimals: 18,\n\t\t},\n\t\t// Currently ignored.\n\t},\n];\n\nexport const mainnetAvalanche = [\n\t{\n\t\tchainId: '0xa86a',\n\t\tchainName: 'Avalanche Mainnet',\n\t\trpcUrls: ['https://api.avax.network/ext/bc/C/rpc'],\n\t},\n];\n","export default __webpack_public_path__ + \"static/media/switch-network.eb6160c7.webp\";","import { styled } from '@mui/material';\nimport backgroundImage from 'assets/images/network/switch-network.webp';\n\nexport const NetworkSwitchStyle = styled('div')({\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tjustifyContent: 'space-evenly',\n\tposition: 'relative',\n\tpadding: '1rem 0 2rem 0',\n});\n\nexport const NetworkSwitchBackground = styled('div')({\n\tbackgroundImage: `url(${backgroundImage})`,\n\tposition: 'relative',\n\tbackgroundSize: 'cover',\n\twidth: '250px',\n\theight: '250px',\n\tanimation: 'rotateAnimate 2s',\n\t'@keyframes rotateAnimate': {\n\t\tfrom: { transform: 'rotate(120deg)' },\n\t\tto: { transform: 'rotate(0deg)' },\n\t},\n});\n\nexport const NetworkSwitchContent = styled('div')({\n\twidth: '100px',\n\theight: '100px',\n\ttransition: '0.5s all',\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tjustifyContent: 'center',\n\tcursor: 'pointer',\n\tposition: 'absolute',\n});\n\nexport const ColumnStyle = styled('div')({\n\tposition: 'absolute',\n\ttop: '22px',\n\twidth: '50px',\n\theight: '205px',\n\tdisplay: 'flex',\n\tflexDirection: 'column',\n\tjustifyContent: 'space-between',\n});\n\nexport const CollumnOne = styled(ColumnStyle)({\n\tleft: '41px',\n});\n\nexport const CollumnTwo = styled(ColumnStyle)({\n\tleft: '161px',\n});\n\nexport const NetworkSwitchIcon = styled('div')({\n\t'.icon-small': {\n\t\tpadding: '5px',\n\t\twidth: '50px !important',\n\t\theight: '50px !important',\n\t\tcursor: 'pointer',\n\t},\n\t'&:hover': {\n\t\tborderRadius: '50px',\n\t\tbackgroundColor: 'rgba(12, 179, 201, 0.5)',\n\t\ttransition: '0.5s all',\n\t},\n});\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport Web3 from 'web3';\n//redux\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectChainId, setChainId } from 'redux/slices/web3InfoSlice';\n//constants\nimport { NETWORKINFO } from 'constants/etherscan.constant';\nimport {\n\tmainnetAvalanche,\n\tmainnetBinance,\n\tmainnetEthereum,\n\tmainnetPolygon,\n} from 'constants/rpcUrl.constant';\n//components\nimport Modal from 'components/CustomUI/Modal';\nimport ButtonGradient from 'components/CustomUI/ButtonGradient';\n//mui\nimport { Stack, Typography, Tooltip, useTheme } from '@mui/material';\n//styled\nimport {\n\tCollumnOne,\n\tCollumnTwo,\n\tNetworkSwitchBackground,\n\tNetworkSwitchContent,\n\tNetworkSwitchIcon,\n\tNetworkSwitchStyle,\n} from './styled';\n//images\nimport PolygonIcon from 'assets/images/network/polygon.webp';\nimport EthIcon from 'assets/images/network/eth.webp';\nimport BinanceIcon from 'assets/images/network/binance.webp';\nimport AvaxIcon from 'assets/images/network/avax.webp';\n\nconst getInfoNetWorkByChainId = (id: number) => {\n\treturn NETWORKINFO[id];\n};\n\ndeclare let window: any;\n\nconst SwitchNetWork = () => {\n\tconst theme = useTheme();\n\tconst dispatch = useDispatch();\n\tconst [netWork, setNetWork] = useState(false);\n\tconst chainIdState = useSelector(selectChainId);\n\tconst isLightTheme = theme.palette.mode === 'light';\n\n\tuseEffect(() => {\n\t\tif (netWork) document.body.classList.add('stop-scroll');\n\t\telse document.body.classList.remove('stop-scroll');\n\t}, [netWork]);\n\n\tconst changeNetwork = async (mainnet: any, newChainId: number) => {\n\t\tif (typeof window.ethereum !== 'undefined') {\n\t\t\ttry {\n\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\tparams: [{ chainId: Web3.utils.toHex(newChainId) }],\n\t\t\t\t});\n\t\t\t\tdispatch(setChainId(newChainId));\n\t\t\t\ttoast.success('Switch network successfully');\n\t\t\t} catch (switchError: any) {\n\t\t\t\tconsole.log('switch error');\n\t\t\t\tif (switchError.code !== 4001) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\tparams: mainnet,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdispatch(setChainId(newChainId));\n\t\t\t\t\t\ttoast.success('Switch network successfully');\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\ttoast.error('Switch network failed!');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsetNetWork(false);\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<ButtonGradient sx={{ width: 'fit-content' }} onClick={() => setNetWork(!netWork)}>\n\t\t\t\t<Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n\t\t\t\t\t<img\n\t\t\t\t\t\twidth=\"20px\"\n\t\t\t\t\t\tsrc={getInfoNetWorkByChainId(chainIdState)?.image}\n\t\t\t\t\t\talt={getInfoNetWorkByChainId(chainIdState)?.symbol}\n\t\t\t\t\t\tclassName=\"me-1\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Typography variant=\"body2\" sx={{ ml: 1 }}>\n\t\t\t\t\t\t{getInfoNetWorkByChainId(chainIdState)?.name}&nbsp;\n\t\t\t\t\t</Typography>\n\t\t\t\t</Stack>\n\t\t\t</ButtonGradient>\n\t\t\t<Modal\n\t\t\t\tmainHeader={'Switch Network'}\n\t\t\t\tonOpen={netWork}\n\t\t\t\tonClose={() => setNetWork(false)}\n\t\t\t\tstyle={{\n\t\t\t\t\tmaxWidth: '550px',\n\t\t\t\t\t...(isLightTheme\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tbackground: theme.palette.primaryLight.main,\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tbackgroundImage: theme.palette.gradients.secondary,\n\t\t\t\t\t\t  }),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<NetworkSwitchStyle>\n\t\t\t\t\t<NetworkSwitchBackground>\n\t\t\t\t\t\t<NetworkSwitchContent>\n\t\t\t\t\t\t\t<CollumnOne>\n\t\t\t\t\t\t\t\t<NetworkSwitchIcon\n\t\t\t\t\t\t\t\t\tonClick={() => changeNetwork(mainnetPolygon, 137)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Tooltip title=\"Polygon\" placement=\"left\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon-small\"\n\t\t\t\t\t\t\t\t\t\t\tsrc={PolygonIcon}\n\t\t\t\t\t\t\t\t\t\t\talt=\"polygon icon\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t</NetworkSwitchIcon>\n\t\t\t\t\t\t\t\t<NetworkSwitchIcon\n\t\t\t\t\t\t\t\t\tonClick={() => changeNetwork(mainnetEthereum, 1)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Tooltip title=\"Ethereum\" placement=\"left\">\n\t\t\t\t\t\t\t\t\t\t<img className=\"icon-small\" src={EthIcon} alt=\"eth icon\" />\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t</NetworkSwitchIcon>\n\t\t\t\t\t\t\t</CollumnOne>\n\t\t\t\t\t\t\t<CollumnTwo>\n\t\t\t\t\t\t\t\t<NetworkSwitchIcon\n\t\t\t\t\t\t\t\t\tonClick={() => changeNetwork(mainnetBinance, 56)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Tooltip title=\"Binance\" placement=\"right\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon-small\"\n\t\t\t\t\t\t\t\t\t\t\tsrc={BinanceIcon}\n\t\t\t\t\t\t\t\t\t\t\talt=\"bnb icon\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t</NetworkSwitchIcon>\n\t\t\t\t\t\t\t\t<NetworkSwitchIcon\n\t\t\t\t\t\t\t\t\tonClick={() => changeNetwork(mainnetAvalanche, 43114)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Tooltip title=\"Avalanche\" placement=\"right\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon-small\"\n\t\t\t\t\t\t\t\t\t\t\tsrc={AvaxIcon}\n\t\t\t\t\t\t\t\t\t\t\talt=\"avax icon\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t</NetworkSwitchIcon>\n\t\t\t\t\t\t\t</CollumnTwo>\n\t\t\t\t\t\t</NetworkSwitchContent>\n\t\t\t\t\t</NetworkSwitchBackground>\n\t\t\t\t</NetworkSwitchStyle>\n\t\t\t</Modal>\n\t\t</Fragment>\n\t);\n};\n\nexport default React.memo(SwitchNetWork);\n"],"sourceRoot":""}