{"version":3,"sources":["apis/nftsApi.ts","apis/tokenPaymentApi.ts","redux/actions/tokenPaymentAction.ts","redux/actions/allNftsAction.ts","pages/AllNfts/styled.tsx","pages/AllNfts/index.tsx"],"names":["nftsApi","createNft","data","chainId","axiosAuthen","post","updateNftByItemId","userAddress","itemId","url","put","freezeNft","metaData","body","getListTokenId","paginationParams","filter","pageSize","page","axiosClient","getSearchListTokenId","getLessNftInfoByTokenId","get","getDetailNftItemById","getSearchNftItemById","getDataForFreezeNft","tokenPaymentApi","getListPaymentTokenByChainId","changeTokenToUsd","from","to","inputPrice","fetchListPaymentTokenByChainId","MyCallBack","a","dispatch","startLoading","response","fetchListTokenPaymentSuccess","hasError","getState","fetchAllNFTs","isFetchFirstLoad","console","log","pagination","check","checkHasNextPage","currentPage","totalPages","setHasNextPage","fetchAllNftsFirstLoadSuccess","fetchAllNftsSuccess","message","FilterStack","styled","Stack","theme","flexDirection","justifyContent","alignItems","InfiniteListItem","Loadable","lazy","ButtonLoadmore","FilterItemGroup","FieldInput","AllNFT","useDispatch","typingTimeoutRef","useRef","useState","allowLoadMore","setAllowLoadMore","fetchNextPage","setFetchNextPage","useSelector","selectChainId","selectPagination","selectFilter","hasNextPage","selectHasNextPage","listTokenId","selectAllNfts","isLoading","selectLoading","initialState","selectInitialState","useEffect","window","scrollTo","top","behavior","executeAfterFetchListTokenPayment","executeAfterFetchAllNfts","resetAll","isFiltering","setPagination","globalStateNewest","allNfts","isSuccess","toast","error","errorMessage","tokenPayment","Container","maxWidth","Typography","variant","sx","mt","filterBlockChain","filterStatus","filterCollection","filterPrice","initialStateFilter","setFilter","direction","spacing","flexGrow","Box","type","onChange","e","value","target","clearTimeout","current","setTimeout","itemName","placeholder","padding","width","marginLeft","minWidth","marginTop","onClick"],"mappings":"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","file":"static/js/56.ba39ac0f.chunk.js","sourcesContent":["import { ListParams, CreateAndUpdateNFTInput } from 'models';\nimport axiosAuthen from './axiosAuthen';\nimport axiosClient from './axiosClient';\n\nconst nftsApi = {\n\t//AUTHENTICATE\n\tcreateNft(data: CreateAndUpdateNFTInput, chainId: number): Promise<any> {\n\t\tconst url = `/items/create`;\n\t\treturn axiosAuthen.post(url, data);\n\t},\n\tupdateNftByItemId(\n\t\tdata: CreateAndUpdateNFTInput,\n\t\tuserAddress: string,\n\t\titemId: string\n\t): Promise<any> {\n\t\tconst url = `/items/update/userAddress/${userAddress}/itemId/${itemId}`;\n\t\treturn axiosAuthen.put(url, data);\n\t},\n\tfreezeNft(itemId: string, userAddress: string, metaData: string): Promise<any> {\n\t\tconst url = `/items/freeze`;\n\n\t\tconst body = { itemId, userAddress, metaData };\n\t\treturn axiosAuthen.put(url, body);\n\t},\n\n\t//CLIENT\n\tgetListTokenId(paginationParams: ListParams, filter: ListParams): Promise<any> {\n\t\tconst { pageSize, page } = paginationParams;\n\n\t\tconst url = `/items/query/pageSize/${pageSize}/page/${page}`;\n\t\tconst body = { ...filter };\n\t\treturn axiosClient.post(url, body);\n\t},\n\tgetSearchListTokenId(paginationParams: ListParams, filter: ListParams): Promise<any> {\n\t\tconst { pageSize, page } = paginationParams;\n\n\t\tconst url = `/items/query-search/pageSize/${pageSize}/page/${page}`;\n\t\tconst body = { ...filter };\n\t\treturn axiosClient.post(url, body);\n\t},\n\tgetLessNftInfoByTokenId(filter: ListParams): Promise<any> {\n\t\tconst { itemId, userAddress } = filter;\n\t\tconst url = `/items/itemId/${itemId}?userAddress=${userAddress}`;\n\t\treturn axiosClient.get(url);\n\t},\n\tgetDetailNftItemById(itemId: string): Promise<any> {\n\t\tconst url = `/items/detail/itemId/${itemId}`;\n\t\treturn axiosClient.get(url);\n\t},\n\tgetSearchNftItemById(itemId: string): Promise<any> {\n\t\tconst url = `/items/search/itemId/${itemId}`;\n\t\treturn axiosClient.get(url);\n\t},\n\tgetDataForFreezeNft(itemId: string): Promise<any> {\n\t\tconst url = `/items/freeze/metadata/itemId/${itemId}`;\n\t\treturn axiosClient.get(url);\n\t},\n};\n\nexport default nftsApi;\n","import axiosClient from './axiosClient';\n\nconst tokenPaymentApi = {\n\tgetListPaymentTokenByChainId(chainId: number): Promise<any> {\n\t\tconst url = `orders/listToken?chainId=${chainId}`;\n\t\treturn axiosClient.get(url);\n\t},\n\n\tchangeTokenToUsd(from: string, to: string, inputPrice: string): Promise<any> {\n\t\tconst url = `/items/changePrice`;\n\t\treturn axiosClient.post(url, { from, to, inputPrice });\n\t},\n};\n\nexport default tokenPaymentApi;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport tokenPaymentApi from 'apis/tokenPaymentApi';\nimport { ListResponseNonPaging, TokenPayment } from 'models';\nimport {\n\tstartLoading,\n\thasError,\n\tfetchListTokenPaymentSuccess,\n} from 'redux/slices/tokenPaymentSlice';\nimport { dispatch, getState } from '../store';\n\nexport function fetchListPaymentTokenByChainId(chainId: number, MyCallBack?: Function) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response: ListResponseNonPaging<TokenPayment> =\n\t\t\t\tawait tokenPaymentApi.getListPaymentTokenByChainId(chainId);\n\t\t\tdispatch(fetchListTokenPaymentSuccess(response));\n\t\t} catch (error) {\n\t\t\tdispatch(hasError(error));\n\t\t\tif (MyCallBack) MyCallBack(getState());\n\t\t}\n\t};\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { ListParams, ListResponse, NFT } from 'models';\nimport nftsApi from 'apis/nftsApi';\nimport { dispatch, getState } from '../store';\nimport {\n\tstartLoading,\n\thasError,\n\tfetchAllNftsSuccess,\n\tfetchAllNftsFirstLoadSuccess,\n\tsetHasNextPage,\n} from 'redux/slices/allNftsSlice';\nimport { checkHasNextPage } from 'utils';\n\nexport function fetchAllNFTs(\n\tpaginationParams: ListParams,\n\tfilter: ListParams,\n\tisFetchFirstLoad: boolean,\n\tMyCallBack?: Function\n) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response: ListResponse<any> = await nftsApi.getListTokenId(\n\t\t\t\tpaginationParams,\n\t\t\t\tfilter\n\t\t\t);\n\n\t\t\tconsole.log('response', response);\n\n\t\t\tconst { pagination } = response;\n\t\t\tconst check: boolean = checkHasNextPage(pagination.currentPage, pagination.totalPages);\n\n\t\t\tdispatch(setHasNextPage(check));\n\n\t\t\tif (isFetchFirstLoad) {\n\t\t\t\tdispatch(fetchAllNftsFirstLoadSuccess(response));\n\t\t\t} else {\n\t\t\t\tdispatch(fetchAllNftsSuccess(response));\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\tdispatch(hasError(error.message));\n\t\t} finally {\n\t\t\tif (MyCallBack) MyCallBack(getState());\n\t\t}\n\t};\n}\n","import { styled, Stack } from '@mui/material';\n\nexport const FilterStack = styled(Stack)(({ theme }) => ({\n\tflexDirection: 'row',\n\tjustifyContent: 'space-between',\n\talignItems: 'center',\n}));\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { lazy, useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\n//redux\nimport { RootState } from 'redux/store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n\tresetAll,\n\tselectAllNfts,\n\tselectFilter,\n\tselectHasNextPage,\n\tselectInitialState,\n\tselectLoading,\n\tselectPagination,\n\tsetFilter,\n\tsetPagination,\n} from 'redux/slices/allNftsSlice';\n//actions\nimport { fetchAllNFTs } from 'redux/actions/allNftsAction';\n//components\nimport Loadable from 'components/CustomUI/LoadableComponent';\n//mui\nimport { Box, Container, Stack, Typography } from '@mui/material';\nimport { FilterStack } from './styled';\nimport { selectChainId } from 'redux/slices/web3InfoSlice';\nimport { fetchListPaymentTokenByChainId } from 'redux/actions/tokenPaymentAction';\n\nconst InfiniteListItem = Loadable(lazy(() => import('components/CustomUI/InfiniteListItem')));\nconst ButtonLoadmore = Loadable(lazy(() => import('components/CustomUI/ButtonLoadmore')));\nconst FilterItemGroup = Loadable(lazy(() => import('components/CustomUI/FilterItemGroup')));\nconst FieldInput = Loadable(lazy(() => import('components/CustomField/FieldInput')));\n\nfunction AllNFT() {\n\tconst dispatch = useDispatch();\n\tconst typingTimeoutRef = useRef<any>(null);\n\n\t// useState\n\tconst [allowLoadMore, setAllowLoadMore] = useState<boolean>(false);\n\tconst [fetchNextPage, setFetchNextPage] = useState<boolean>(false);\n\n\t// useSelector\n\tconst chainId = useSelector(selectChainId);\n\tconst pagination = useSelector(selectPagination);\n\tconst filter = useSelector(selectFilter);\n\tconst hasNextPage = useSelector(selectHasNextPage);\n\tconst listTokenId = useSelector(selectAllNfts);\n\tconst isLoading = useSelector(selectLoading);\n\n\tconst initialState = selectInitialState;\n\n\t// useEffect\n\tuseEffect(() => {\n\t\twindow.scrollTo({ top: 0, behavior: 'smooth' });\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\t// fetch list payment token\n\tuseEffect(() => {\n\t\tif (chainId) {\n\t\t\tdispatch(fetchListPaymentTokenByChainId(chainId, executeAfterFetchListTokenPayment));\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [chainId]);\n\n\t// fetchAllNFTs isFirstLoad === true\n\tuseEffect(() => {\n\t\tdispatch(\n\t\t\tfetchAllNFTs(\n\t\t\t\tinitialState.pagination,\n\t\t\t\tinitialState.filter,\n\t\t\t\ttrue,\n\t\t\t\texecuteAfterFetchAllNfts\n\t\t\t)\n\t\t);\n\n\t\treturn () => {\n\t\t\tdispatch(resetAll());\n\t\t\tsetAllowLoadMore(false);\n\t\t};\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\t// fetchAllNFTs isFirstLoad === false\n\tuseEffect(() => {\n\t\tif (pagination.page === 1 && !filter.isFiltering) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch(fetchAllNFTs(pagination, filter, false, executeAfterFetchAllNfts));\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [pagination, filter]);\n\n\tuseEffect(() => {\n\t\tif (fetchNextPage) {\n\t\t\tdispatch(setPagination({ ...pagination, page: pagination.page + 1 }));\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [fetchNextPage]);\n\n\t// functions\n\tconst handleFetchNextPage = () => {\n\t\tsetFetchNextPage(true);\n\t};\n\n\tconst executeAfterFetchAllNfts = (globalStateNewest: RootState) => {\n\t\tsetFetchNextPage(false);\n\n\t\tconst { allNfts } = globalStateNewest;\n\n\t\tif (!allNfts.isSuccess) {\n\t\t\ttoast.error('Some error occur when getting all NFTs! ' + allNfts.errorMessage);\n\t\t}\n\t};\n\n\tconst executeAfterFetchListTokenPayment = (globalStateNewest: RootState) => {\n\t\tconst { tokenPayment } = globalStateNewest;\n\t\tif (!tokenPayment.isSuccess) {\n\t\t\ttoast.error('Can not fetch list token payment!');\n\t\t}\n\t};\n\n\tconst handleFilterByName = (e: any) => {\n\t\tconst value = e.target.value;\n\n\t\tif (typingTimeoutRef) {\n\t\t\tclearTimeout(typingTimeoutRef.current);\n\t\t}\n\t\ttypingTimeoutRef.current = setTimeout(() => {\n\t\t\tdispatch(setFilter({ ...filter, itemName: value }));\n\t\t}, 500);\n\t};\n\n\treturn (\n\t\t<Container maxWidth=\"xl\">\n\t\t\t<Typography variant=\"h2\" sx={{ mt: 3 }}>\n\t\t\t\tNFTSpaceX\n\t\t\t</Typography>\n\n\t\t\t<FilterStack sx={{ mt: 5 }}>\n\t\t\t\t<FilterItemGroup\n\t\t\t\t\tfilterBlockChain\n\t\t\t\t\tfilterStatus\n\t\t\t\t\tfilterCollection\n\t\t\t\t\tfilterPrice\n\t\t\t\t\tinitialStateFilter={initialState.filter}\n\t\t\t\t\tfilter={filter}\n\t\t\t\t\tsetFilter={setFilter}\n\t\t\t\t/>\n\n\t\t\t\t<Stack\n\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\tjustifyContent=\"end\"\n\t\t\t\t\tspacing={2}\n\t\t\t\t\tsx={{ flexGrow: 1 }}\n\t\t\t\t>\n\t\t\t\t\t<Box sx={{ flexGrow: 1 }}>\n\t\t\t\t\t\t<FieldInput\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tonChange={handleFilterByName}\n\t\t\t\t\t\t\tplaceholder=\"Search name ...\"\n\t\t\t\t\t\t\tsx={{\n\t\t\t\t\t\t\t\tpadding: '12px 15px',\n\t\t\t\t\t\t\t\twidth: '80%',\n\t\t\t\t\t\t\t\tmarginLeft: 'auto',\n\t\t\t\t\t\t\t\tminWidth: '130px',\n\t\t\t\t\t\t\t\tmaxWidth: '500px',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t</Stack>\n\t\t\t</FilterStack>\n\n\t\t\t<Box sx={{ mt: 3 }}>\n\t\t\t\t<InfiniteListItem\n\t\t\t\t\tlistTokenId={listTokenId}\n\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\thasNextPage={hasNextPage}\n\t\t\t\t\tfetchNextPage={handleFetchNextPage}\n\t\t\t\t\tallowLoadMore={allowLoadMore}\n\t\t\t\t/>\n\t\t\t</Box>\n\n\t\t\t{!allowLoadMore && hasNextPage && !isLoading && (\n\t\t\t\t<Stack sx={{ marginTop: '50px' }} alignItems=\"center\">\n\t\t\t\t\t<ButtonLoadmore onClick={() => setAllowLoadMore(true)} />\n\t\t\t\t</Stack>\n\t\t\t)}\n\t\t</Container>\n\t);\n}\n\nexport default AllNFT;\n"],"sourceRoot":""}