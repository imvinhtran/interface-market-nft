{"version":3,"sources":["apis/advertiseApi.ts","components/pages/Home/AdvertiseSection/styled.tsx","components/pages/Home/AdvertiseSection/index.tsx"],"names":["advertiseApi","getListBanner","axiosClient","get","getListVideo","getListItem","AdvertiseSectionWrapper","styled","Box","theme","borderRadius","overflow","breakpoints","between","padding","SliderItem","top","width","height","position","objectFit","AdvertiseSection","useState","listVideo","setListVideo","dispatch","useDispatch","isLoadingPage","useSelector","selectLoadingPage","useEffect","a","setLoading","listVideoRes","data","setTimeout","toast","error","message","LoadingPage","pagination","modules","Pagination","Autoplay","className","autoplay","delay","disableOnInteraction","map","video","index","sx","pt","url","compressImage","muted","playing","playsinline","loop","renderListSlider","React","memo"],"mappings":"sJAEA,aAEMA,EAAe,CACpBC,cADoB,WAGnB,OAAOC,IAAYC,IADP,0BAGbC,aALoB,WAOnB,OAAOF,IAAYC,IADP,sBAGbE,YAToB,WAWnB,OAAOH,IAAYC,IADP,oBAKCH,O,2ICjBFM,EAA0BC,YAAOC,IAAPD,EAAY,gBAAGE,EAAH,EAAGA,MAAH,oBAClDC,aAAc,OACdC,SAAU,UACTF,EAAMG,YAAYC,QAAQ,IAAK,MAAQ,CACvCC,QAAS,YAIEC,EAAaR,YAAOC,IAAPD,EAAY,cAAGE,MAAH,MAAgB,CACrDO,IAAK,EACLC,MAAO,OACPC,OAAQ,OACRC,SAAU,WACVC,UAAW,UAGXV,aAAc,OACdC,SAAU,a,gFCCLU,EAA6B,WAClC,MAAkCC,mBAAc,IAAhD,mBAAOC,EAAP,KAAkBC,EAAlB,KAGMC,EAAWC,cACXC,EAAgBC,YAAYC,KAElCC,qBAAU,WACT,sBAAC,4BAAAC,EAAA,sEAECN,EAASO,aAAW,IAFrB,SAG8ChC,IAAaI,eAH3D,OAGO6B,EAHP,OAICT,EAAaS,EAAaC,MAC1BC,YAAW,kBAAMV,EAASO,aAAW,MAAS,KAL/C,gDAOCP,EAASO,aAAW,IACpBI,IAAMC,MAAM,KAAMC,SARnB,wDAAD,KAYE,IAsBH,OACC,cAAChC,EAAD,UACEqB,EAcA,cAACY,EAAA,QAAD,IAEA,cAAC,IAAD,CACCC,YAAY,EACZC,QAAS,CAACC,IAAYC,KACtBC,UAAU,WACVC,SAAU,CAAEC,MAAO,IAAMC,sBAAsB,GAJhD,SAtCsB,SAACxB,GACzB,OAAOA,EAAUyB,KAAI,SAACC,EAAeC,GAAhB,OACpB,cAAC,IAAD,UACC,cAAC1C,EAAA,EAAD,CAAK2C,GAAI,CAAEhC,SAAU,WAAYiC,GAAI,QAArC,SACC,cAACrC,EAAD,UACC,cAAC,IAAD,CACCsC,IAAKC,YAAcL,EAAO,IAAK,QAC/BM,OAAO,EACPC,SAAS,EACTC,aAAa,EACbC,MAAM,EACNzC,MAAM,OACNC,OAAO,cAVOgC,MA0CfS,CAAiBpC,QAORqC,cAAMC,KAAKxC","file":"static/js/72.ef778729.chunk.js","sourcesContent":["import { Response } from 'models';\nimport { AdvertiseBanner } from 'models/advertise';\nimport axiosClient from './axiosClient';\n\nconst advertiseApi = {\n\tgetListBanner(): Promise<AdvertiseBanner[]> {\n\t\tconst url = '/promotion/collection';\n\t\treturn axiosClient.get(url);\n\t},\n\tgetListVideo(): Promise<Response<string>> {\n\t\tconst url = '/promotion/hotpot';\n\t\treturn axiosClient.get(url);\n\t},\n\tgetListItem(): Promise<any> {\n\t\tconst url = '/promotion/nft';\n\t\treturn axiosClient.get(url);\n\t},\n};\n\nexport default advertiseApi;\n","import { styled, Box } from '@mui/material';\n\nexport const AdvertiseSectionWrapper = styled(Box)(({ theme }) => ({\n\tborderRadius: '16px',\n\toverflow: 'hidden',\n\t[theme.breakpoints.between(600, 1200)]: {\n\t\tpadding: '0 8%',\n\t},\n}));\n\nexport const SliderItem = styled(Box)(({ theme }) => ({\n\ttop: 0,\n\twidth: '100%',\n\theight: '100%',\n\tposition: 'absolute',\n\tobjectFit: 'contain',\n\t// border: '3px solid',\n\t// borderColor: theme.palette.primary.light,\n\tborderRadius: '16px',\n\toverflow: 'hidden',\n}));\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Box, Skeleton } from '@mui/material';\nimport { Swiper, SwiperSlide } from 'swiper/react/swiper-react.js';\nimport { Autoplay, Pagination } from 'swiper';\nimport { AdvertiseSectionWrapper, SliderItem } from './styled';\nimport ReactPlayer from 'react-player';\nimport { toast } from 'react-toastify';\n//api\nimport advertiseApi from 'apis/advertiseApi';\n//model\nimport { Response } from 'models';\n//utils\nimport { compressImage } from 'utils';\n//components\nimport LoadingPage from 'components/CustomUI/LoadingPage';\n//redux\nimport { selectLoadingPage, setLoading } from 'redux/slices/loadingSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst AdvertiseSection: React.FC = () => {\n\tconst [listVideo, setListVideo] = useState<any>([]);\n\t// const [isLoading, setIsLoading] = useState<boolean>(false);\n\n\tconst dispatch = useDispatch();\n\tconst isLoadingPage = useSelector(selectLoadingPage);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tdispatch(setLoading(true));\n\t\t\t\tconst listVideoRes: Response<string> = await advertiseApi.getListVideo();\n\t\t\t\tsetListVideo(listVideoRes.data);\n\t\t\t\tsetTimeout(() => dispatch(setLoading(false)), 1000);\n\t\t\t} catch (error: any) {\n\t\t\t\tdispatch(setLoading(false));\n\t\t\t\ttoast.error(error.message);\n\t\t\t}\n\t\t})();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst renderListSlider = (listVideo: string[]) => {\n\t\treturn listVideo.map((video: string, index: number) => (\n\t\t\t<SwiperSlide key={index}>\n\t\t\t\t<Box sx={{ position: 'relative', pt: '100%' }}>\n\t\t\t\t\t<SliderItem>\n\t\t\t\t\t\t<ReactPlayer\n\t\t\t\t\t\t\turl={compressImage(video, 967, 'best')}\n\t\t\t\t\t\t\tmuted={true}\n\t\t\t\t\t\t\tplaying={true}\n\t\t\t\t\t\t\tplaysinline={true}\n\t\t\t\t\t\t\tloop={true}\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\theight=\"100%\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SliderItem>\n\t\t\t\t</Box>\n\t\t\t</SwiperSlide>\n\t\t));\n\t};\n\n\treturn (\n\t\t<AdvertiseSectionWrapper>\n\t\t\t{isLoadingPage ? (\n\t\t\t\t// <Box sx={{ position: 'relative', pt: '100%', width: '100%' }}>\n\t\t\t\t// \t<Skeleton\n\t\t\t\t// \t\tsx={{\n\t\t\t\t// \t\t\tposition: 'absolute',\n\t\t\t\t// \t\t\ttop: 0,\n\t\t\t\t// \t\t\tleft: 0,\n\t\t\t\t// \t\t\twidth: '100%',\n\t\t\t\t// \t\t\theight: '100%',\n\t\t\t\t// \t\t\tWebkitTransform: 'scale(1,1)',\n\t\t\t\t// \t\t\ttransform: 'scale(1,1)',\n\t\t\t\t// \t\t}}\n\t\t\t\t// \t/>\n\t\t\t\t// </Box>\n\t\t\t\t<LoadingPage />\n\t\t\t) : (\n\t\t\t\t<Swiper\n\t\t\t\t\tpagination={true}\n\t\t\t\t\tmodules={[Pagination, Autoplay]}\n\t\t\t\t\tclassName=\"mySwiper\"\n\t\t\t\t\tautoplay={{ delay: 5000, disableOnInteraction: false }}\n\t\t\t\t>\n\t\t\t\t\t{renderListSlider(listVideo)}\n\t\t\t\t</Swiper>\n\t\t\t)}\n\t\t</AdvertiseSectionWrapper>\n\t);\n};\n\nexport default React.memo(AdvertiseSection);\n"],"sourceRoot":""}