(this["webpackJsonpforbitswap-nfts-interface-v2"]=this["webpackJsonpforbitswap-nfts-interface-v2"]||[]).push([[24,60,73,77,80],{1787:function(e,n,t){"use strict";t.r(n);var a=t(8),r=t(33),i=Object(r.a)("input")((function(e){var n=e.theme;return Object(a.a)(Object(a.a)({display:"block",border:"none",borderRadius:"12px",padding:"15px",outline:"none",width:"100%",fontSize:"16px",fontWeight:500,lineHeight:"16px",color:n.palette.text.primary},"light"===n.palette.mode?{background:n.palette.primaryLight.main}:{background:n.palette.primary.dark}),{},{"&::placeholder":{color:"light"===n.palette.mode?"#000":"#fff",fontSize:"16px",fontWeight:500,opacity:.4}})})),s=t(2);function o(e){e.id;var n=e.type,t=e.registerHookForm,r=e.placeholder,o=e.value,c=e.onChange,d=e.className,b=e.readOnly,u=e.sx,l=e.otherProps;return Object(s.jsx)(i,Object(a.a)(Object(a.a)({type:n,step:"any",className:d},t),{},{placeholder:r,value:o,onChange:c,sx:u,readOnly:b,autoComplete:"off",autoCorrect:"off"},l))}o.defaultProps={onChange:function(e){}};n.default=o},1789:function(e,n,t){"use strict";var a=t(8),r=t(340),i=t(229),s={getListTopCollection:function(e,n){var t=e.pageSize,r=e.page,s="/collections/top/pageSize/".concat(t,"/page/").concat(r);return i.a.post(s,Object(a.a)({},n))},fetchNewCollectionsPagination:function(e,n){var t="/collections/query/pageSize/".concat(e,"/page/").concat(n);return i.a.post(t,{sort:"createdAt:desc"})},getListCollectionId:function(e,n){var t=e.page,r=e.pageSize,s="/collections/query/pageSize/".concat(r,"/page/").concat(t),o=Object(a.a)({},n);return i.a.post(s,o)},getSearchListCollectionId:function(e,n){var t=e.page,r=e.pageSize,s="/collections/query-search/pageSize/".concat(r,"/page/").concat(t),o=Object(a.a)({},n);return i.a.post(s,o)},getListCollectionByOwnerOrCreatorItems:function(e,n){var t=e.page,r=e.pageSize,s="/collections/collectible-asset/pageSize/".concat(r,"/page/").concat(t),o=Object(a.a)({},n);return i.a.post(s,o)},getCollectionById:function(e){var n="/collections/collectionId/".concat(e);return i.a.get(n)},getCollectionDetailById:function(e){var n="/collections/detail/collectionId/".concat(e);return i.a.get(n)},getSearchCollectionById:function(e){var n="/collections/search/collectionId/".concat(e);return i.a.get(n)},createCollection:function(e){return console.log("data gui len ne",e),r.a.post("/collections/create",e)},importCollection:function(e,n,t){var a={chainId:e,userAddress:n,collectionAddress:t};return r.a.post("/items/import",a)},editCollection:function(e,n){var t="/collections/collectionId/".concat(n);return r.a.put(t,e)},checkExistCollectionName:function(e,n){return i.a.post("/collections/checkName",{collectionName:e,chainId:n})},getAllCategory:function(){return i.a.get("/collections/category")},getListCollectionCategory:function(){return i.a.get("/collections/topCategory")}};n.a=s},1790:function(e,n,t){"use strict";var a=t(8),r=t(340),i=t(229),s={createNft:function(e,n){return r.a.post("/items/create",e)},updateNftByItemId:function(e,n,t){var a="/items/update/userAddress/".concat(n,"/itemId/").concat(t);return r.a.put(a,e)},freezeNft:function(e,n,t){var a={itemId:e,userAddress:n,metaData:t};return r.a.put("/items/freeze",a)},getListTokenId:function(e,n){var t=e.pageSize,r=e.page,s="/items/query/pageSize/".concat(t,"/page/").concat(r),o=Object(a.a)({},n);return i.a.post(s,o)},getSearchListTokenId:function(e,n){var t=e.pageSize,r=e.page,s="/items/query-search/pageSize/".concat(t,"/page/").concat(r),o=Object(a.a)({},n);return i.a.post(s,o)},getLessNftInfoByTokenId:function(e){var n=e.itemId,t=e.userAddress,a="/items/itemId/".concat(n,"?userAddress=").concat(t);return i.a.get(a)},getDetailNftItemById:function(e){var n="/items/detail/itemId/".concat(e);return i.a.get(n)},getSearchNftItemById:function(e){var n="/items/search/itemId/".concat(e);return i.a.get(n)},getDataForFreezeNft:function(e){var n="/items/freeze/metadata/itemId/".concat(e);return i.a.get(n)}};n.a=s},1791:function(e,n,t){"use strict";t.d(n,"e",(function(){return c})),t.d(n,"g",(function(){return d})),t.d(n,"l",(function(){return b})),t.d(n,"k",(function(){return u})),t.d(n,"d",(function(){return l})),t.d(n,"f",(function(){return f})),t.d(n,"a",(function(){return p})),t.d(n,"c",(function(){return m})),t.d(n,"i",(function(){return y})),t.d(n,"j",(function(){return h})),t.d(n,"h",(function(){return g})),t.d(n,"b",(function(){return v}));var a=t(8),r=t(33),i=t(2063),s=t(1761),o=t(1776),c=Object(r.a)(i.a)((function(e){var n=e.theme;return Object(a.a)(Object(a.a)({WebkitTransition:"0.2s all ease-out",MozTransition:"0.2s all ease-out",OTransition:"0.2s all ease-out",transition:"0.2s all ease-out"},"light"===n.palette.mode?{boxShadow:n.customShadows.cardLight}:{border:"2px solid",borderColor:n.palette.primary.main,background:n.palette.gradients.fourth}),{},{"&:hover":Object(a.a)({},"light"===n.palette.mode?{boxShadow:n.customShadows.cardLightHover,transform:"scale(1.01)"}:{background:n.palette.gradients.third})})})),d=Object(r.a)(s.a)((function(e){e.theme;return{position:"relative",width:"100%",paddingTop:"100%",borderRadius:"10px",overflow:"hidden",img:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",maxHeight:"100%"}}})),b=Object(r.a)(o.a)((function(e){return{color:e.theme.palette.text.special}})),u=Object(r.a)(o.a)((function(e){e.theme;return{fontStyle:"italic"}})),l=Object(r.a)(s.a)((function(e){e.theme;return{width:20,height:20,borderRadius:"50%",overflow:"hidden",img:{width:"100%",height:"100%"}}})),f=Object(r.a)(s.a)((function(e){var n=e.theme;return{borderRadius:n.shape.borderRadiusSm,overflow:"hidden",position:"relative",marginTop:2,"&::before":Object(a.a)({content:'""',position:"absolute",height:"100%",width:"100%",opacity:.2,zIndex:-1},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.darker}:{backgroundColor:n.palette.primary.light})}})),p=(Object(r.a)(s.a)((function(e){return{position:"absolute",height:"2.5rem",width:"60%",zIndex:"2",top:"calc(100% - 2.5rem)",left:"0",borderRadius:e.theme.shape.borderRadiusMd,padding:"0.5rem",border:"1px solid #ffffff",backgroundImage:"linear-gradient(52deg,rgb(0, 255, 54) 7%,rgb(0, 238, 87) 17%,rgb(0, 197, 173) 37%,rgb(0, 164, 241) 52%,rgb(11, 24, 252) 88%,rgb(13, 0, 255) 94%)"}})),Object(r.a)(s.a)((function(e){e.theme;return{transition:"all 0.6s ease",cursor:"pointer",":hover":{zIndex:3,transform:"translateY(-5px)"}}}))),m=Object(r.a)(s.a)({borderRadius:"50%",width:25,height:25}),y=Object(r.a)(s.a)({video:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",maxHeight:"100%"}}),h=Object(r.a)(s.a)((function(e){var n=e.theme;return Object(a.a)({position:"absolute",bottom:0,left:0,zIndex:2,borderRadius:"50%",width:32,height:32,display:"flex",alignItems:"center",justifyContent:"center"},"light"===n.palette.mode?{backgroundColor:"#D8D8D8","&:hover":{backgroundColor:"#BBBBBB"}}:{backgroundColor:"rgb(53, 56, 64)","&:hover":{backgroundColor:"#595B64"}})})),g=Object(r.a)(s.a)({width:"100%",height:"100%",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",padding:10,textAlign:"center"}),v=Object(r.a)(s.a)({width:"100%",height:"100%",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",padding:10,textAlign:"center"})},1810:function(e,n,t){"use strict";var a=t(21),r=t(0),i=t(1761),s=t(1762),o=t(1776),c=t(277),d=t(1803),b=t.n(d),u=t(8),l=t(33),f=Object(l.a)(i.a)((function(e){var n=e.theme;return Object(u.a)({position:"relative",cursor:"pointer",borderRadius:"12px",padding:"2px 0 2px 15px",flexShrink:0},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.main}:{backgroundColor:n.palette.primary.main})})),p=Object(l.a)(i.a)((function(e){e.theme;return{position:"fixed",display:"none",top:0,left:0,width:"100vw",height:"100vh",zIndex:2,"&.active":{display:"block"}}})),m=Object(l.a)(s.a)((function(e){var n=e.theme;return Object(u.a)(Object(u.a)({display:"none",position:"absolute",top:"110%",left:0,width:"100%",maxHeight:"300px",borderRadius:10,zIndex:101,overflowY:"auto"},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.dark}:{backgroundColor:n.palette.primary.dark,border:"1px solid",borderColor:n.palette.primary.main}),{},{"&::-webkit-scrollbar":{display:"block",width:"3px",height:"4px"},"&::-webkit-scrollbar-track":{display:"block",background:"#0c5599"},"&::-webkit-scrollbar-thumb":{display:"block",background:"#65b8ff",borderRadius:"5px"},"&.active":{display:"block"}})})),y=Object(l.a)(s.a)((function(e){e.theme;return{}})),h=Object(l.a)(s.a)((function(e){var n=e.theme;return{cursor:"pointer","&:hover":Object(u.a)({},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.main}:{backgroundColor:n.palette.primary.darker})}})),g=Object(l.a)(i.a)((function(e){e.theme;return{padding:"10px 5px 10px 15px"}})),v=t(1787),_=t(2);n.a=function(e){var n=e.currentItem,t=e.listItem,d=e.sx,u=e.placeholder,l=e.onChange,O=e.headerIcon,w=e.disabled,T=void 0!==w&&w,j=Object(r.useRef)(null),x=Object(r.useRef)(null),S=Object(r.useState)(""),C=Object(a.a)(S,2),I=C[0],R=C[1],k=Object(r.useState)(!1),A=Object(a.a)(k,2),E=A[0],M=A[1];Object(r.useEffect)((function(){var e=function(e){e.stopPropagation(),j.current&&!j.current.contains(e.target)&&(M(!1),n&&R(String(n.name)))};return E&&document.body.addEventListener("click",e,{passive:!0}),function(){document.body.removeEventListener("click",e)}}),[E,n]),Object(r.useEffect)((function(){R(n?String(n.name):"")}),[n]);var P=""===I?t:t.filter((function(e){return String(e.name).toLowerCase().includes(I.toLowerCase())}));return Object(_.jsxs)(f,{onClick:function(){E||T||(M(!0),x.current&&x.current.focus())},sx:d,children:[Object(_.jsxs)(s.a,{direction:"row",alignItems:"center",children:[O&&Object(_.jsx)("img",{src:O,alt:"header icon",width:25,height:25}),(null===n||void 0===n?void 0:n.image)&&Object(_.jsx)("img",{src:n.image,alt:"token icon",width:25,height:25,style:{borderRadius:"50%",marginRight:"10px"}}),Object(_.jsx)(i.a,{sx:{flexGrow:1},children:Object(_.jsx)(v.default,{otherProps:{ref:x},type:"text",value:I,readOnly:T,placeholder:null!==u&&void 0!==u?u:"",onChange:function(e){var n=e.target.value;R(n),""===n&&l&&l(null)},sx:{zIndex:1,paddingLeft:"0px",backgroundColor:"inherit"}})}),!T&&Object(_.jsx)(b.a,{sx:{position:"absolute",top:"50%",right:"10px",transform:"translateY(-50%)",zIndex:0}})]}),Object(_.jsx)(p,{className:E?"active":""}),Object(_.jsx)(m,{ref:j,className:E?"active":"",children:Object(_.jsx)(y,{children:P.map((function(e,n){return Object(_.jsxs)(i.a,{children:[Object(_.jsx)(h,{onClick:function(n){return function(e,n){e.stopPropagation(),l&&l(n),M(!1)}(n,e)},children:Object(_.jsx)(g,{children:Object(_.jsxs)(s.a,{direction:"row",alignItems:"center",children:[e.image&&Object(_.jsx)("img",{src:e.image,alt:"token icon",width:"25",height:"25",style:{marginRight:10,borderRadius:"50%"}}),Object(_.jsx)(o.a,{variant:"body1",children:e.name})]})})}),n+1!==t.length&&Object(_.jsx)(c.a,{})]},n)}))})})]})}},1814:function(e,n,t){"use strict";n.a=t.p+"static/media/twitter-white.cd897e92.webp"},1815:function(e,n,t){"use strict";n.a=t.p+"static/media/favorite-thin-white.0cb36149.webp"},1816:function(e,n,t){"use strict";n.a=t.p+"static/media/twitter-black.c8111f00.webp"},1817:function(e,n,t){"use strict";n.a=t.p+"static/media/favorite-thin-black.85bbe557.webp"},1818:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"d",(function(){return u})),t.d(n,"b",(function(){return l})),t.d(n,"c",(function(){return f}));var a=t(35),r=t(1),i=t.n(r),s=t(1789),o=t(447),c=t(126),d=(t(63),t(58));function b(e,n,t,r){return Object(a.a)(i.a.mark((function a(){var b,u,l;return i.a.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return Object(d.a)(Object(o.t)()),a.prev=1,a.next=4,s.a.getListCollectionId(e,n);case 4:b=a.sent,u=b.pagination,l=Object(c.d)(u.currentPage,u.totalPages),Object(d.a)(Object(o.r)(l)),t?Object(d.a)(Object(o.d)(b)):Object(d.a)(Object(o.e)(b)),a.next=14;break;case 11:a.prev=11,a.t0=a.catch(1),Object(d.a)(Object(o.i)(a.t0));case 14:return a.prev=14,r&&r(Object(d.b)()),a.finish(14);case 17:case"end":return a.stop()}}),a,null,[[1,11,14,17]])})))}function u(e,n,t,r){return Object(a.a)(i.a.mark((function a(){var b,u,l;return i.a.wrap((function(a){for(;;)switch(a.prev=a.next){case 0:return Object(d.a)(Object(o.t)()),a.prev=1,a.next=4,s.a.getListCollectionByOwnerOrCreatorItems(e,n);case 4:b=a.sent,u=b.pagination,l=Object(c.d)(u.currentPage,u.totalPages),Object(d.a)(Object(o.r)(l)),t?Object(d.a)(Object(o.g)(b)):Object(d.a)(Object(o.h)(b)),a.next=14;break;case 11:a.prev=11,a.t0=a.catch(1),Object(d.a)(Object(o.i)(a.t0));case 14:return a.prev=14,r&&r(Object(d.b)()),a.finish(14);case 17:case"end":return a.stop()}}),a,null,[[1,11,14,17]])})))}function l(e,n){return Object(a.a)(i.a.mark((function t(){var a;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Object(d.a)(Object(o.t)()),t.prev=1,t.next=4,s.a.getCollectionById(e);case 4:a=t.sent,Object(d.a)(Object(o.f)(a)),t.next=11;break;case 8:t.prev=8,t.t0=t.catch(1),Object(d.a)(Object(o.i)(t.t0));case 11:return t.prev=11,n&&n(Object(d.b)()),t.finish(11);case 14:case"end":return t.stop()}}),t,null,[[1,8,11,14]])})))}function f(e,n){return Object(a.a)(i.a.mark((function t(){var a;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Object(d.a)(Object(o.t)()),t.prev=1,t.next=4,s.a.getCollectionDetailById(e);case 4:a=t.sent,Object(d.a)(Object(o.f)(a)),t.next=11;break;case 8:t.prev=8,t.t0=t.catch(1),Object(d.a)(Object(o.i)(t.t0));case 11:return t.prev=11,n&&n(Object(d.b)()),t.finish(11);case 14:case"end":return t.stop()}}),t,null,[[1,8,11,14]])})))}},1820:function(e,n,t){"use strict";t.d(n,"a",(function(){return l}));var a=t(21),r=t(448),i=t(0),s=t(1791),o=t(1847),c=t.n(o),d=t(1846),b=t.n(d),u=t(2);function l(e){var n=e.url,t=(e.name,Object(i.useContext)(r.a).currentAudio),o=function(e){var n=Object(i.useState)(new Audio(e)),t=Object(a.a)(n,1)[0],s=Object(i.useState)(!1),o=Object(a.a)(s,2),c=o[0],d=o[1],b=Object(i.useContext)(r.a),u=b.currentAudio,l=b.handleSetCurrentAudio;return Object(i.useEffect)((function(){return u===e?c?t.play():t.pause():(t.pause(),d(!1)),function(){return t.pause()}}),[t,c,u,e]),Object(i.useEffect)((function(){if(t)return t.addEventListener("ended",(function(){return d(!1)})),function(){t.removeEventListener("ended",(function(){return d(!1)}))}}),[]),[c,function(){d(!c),l(e)}]}(n),d=Object(a.a)(o,2),l=d[0],f=d[1];return Object(u.jsx)(s.j,{onClick:function(e){e.stopPropagation(),f()},children:t===n&&l?Object(u.jsx)(b.a,{}):Object(u.jsx)(c.a,{})})}},1831:function(e,n,t){"use strict";var a=t(21),r=t(16),i=t(4),s=t(0),o=t(22),c=t(1759),d=t(33),b=t(42),u=t(443),l=t(2),f=Object(u.a)(Object(l.jsx)("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),"Person"),p=t(1705),m=t(1760);function y(e){return Object(p.a)("MuiAvatar",e)}Object(m.a)("MuiAvatar",["root","colorDefault","circular","rounded","square","img","fallback"]);var h=["alt","children","className","component","imgProps","sizes","src","srcSet","variant"],g=Object(d.a)("div",{name:"MuiAvatar",slot:"Root",overridesResolver:function(e,n){var t=e.ownerState;return[n.root,n[t.variant],t.colorDefault&&n.colorDefault]}})((function(e){var n=e.theme,t=e.ownerState;return Object(i.a)({position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:n.typography.fontFamily,fontSize:n.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none"},"rounded"===t.variant&&{borderRadius:n.shape.borderRadius},"square"===t.variant&&{borderRadius:0},t.colorDefault&&{color:n.palette.background.default,backgroundColor:"light"===n.palette.mode?n.palette.grey[400]:n.palette.grey[600]})})),v=Object(d.a)("img",{name:"MuiAvatar",slot:"Img",overridesResolver:function(e,n){return n.img}})({width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4}),_=Object(d.a)(f,{name:"MuiAvatar",slot:"Fallback",overridesResolver:function(e,n){return n.fallback}})({width:"75%",height:"75%"});var O=s.forwardRef((function(e,n){var t=Object(b.a)({props:e,name:"MuiAvatar"}),d=t.alt,u=t.children,f=t.className,p=t.component,m=void 0===p?"div":p,O=t.imgProps,w=t.sizes,T=t.src,j=t.srcSet,x=t.variant,S=void 0===x?"circular":x,C=Object(r.a)(t,h),I=null,R=function(e){var n=e.crossOrigin,t=e.referrerPolicy,r=e.src,i=e.srcSet,o=s.useState(!1),c=Object(a.a)(o,2),d=c[0],b=c[1];return s.useEffect((function(){if(r||i){b(!1);var e=!0,a=new Image;return a.onload=function(){e&&b("loaded")},a.onerror=function(){e&&b("error")},a.crossOrigin=n,a.referrerPolicy=t,a.src=r,i&&(a.srcset=i),function(){e=!1}}}),[n,t,r,i]),d}(Object(i.a)({},O,{src:T,srcSet:j})),k=T||j,A=k&&"error"!==R,E=Object(i.a)({},t,{colorDefault:!A,component:m,variant:S}),M=function(e){var n=e.classes,t={root:["root",e.variant,e.colorDefault&&"colorDefault"],img:["img"],fallback:["fallback"]};return Object(c.a)(t,y,n)}(E);return I=A?Object(l.jsx)(v,Object(i.a)({alt:d,src:T,srcSet:j,sizes:w,ownerState:E,className:M.img},O)):null!=u?u:k&&d?d[0]:Object(l.jsx)(_,{className:M.fallback}),Object(l.jsx)(g,Object(i.a)({as:m,ownerState:E,className:Object(o.default)(M.root,f),ref:n},C,{children:I}))}));n.a=O},1846:function(e,n,t){"use strict";var a=t(273);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=a(t(275)),i=t(2),s=(0,r.default)((0,i.jsx)("path",{d:"M6 19h4V5H6v14zm8-14v14h4V5h-4z"}),"Pause");n.default=s},1847:function(e,n,t){"use strict";var a=t(273);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=a(t(275)),i=t(2),s=(0,r.default)((0,i.jsx)("path",{d:"M8 5v14l11-7z"}),"PlayArrow");n.default=s},1849:function(e){e.exports=JSON.parse('{"address":"0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a","abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_proxyRegistryAddress","type":"address"},{"internalType":"string","name":"_templateURI","type":"string"},{"internalType":"address","name":"_migrationAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":true,"internalType":"address","name":"_creator","type":"address"}],"name":"CreatorChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"address payable","name":"relayerAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"functionSignature","type":"bytes"}],"name":"MetaTransactionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"PermanentURI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_uri","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ERC712_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"addSharedProxyAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_quantities","type":"uint256[]"}],"name":"batchBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_quantities","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"creator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"disableMigrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"bytes","name":"functionSignature","type":"bytes"},{"internalType":"bytes32","name":"sigR","type":"bytes32"},{"internalType":"bytes32","name":"sigS","type":"bytes32"},{"internalType":"uint8","name":"sigV","type":"uint8"}],"name":"executeMetaTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDomainSeperator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"isOperator","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"isPermanentURI","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"internalType":"struct ForbitswapNFTSAssetShared.Ownership[]","name":"_ownerships","type":"tuple[]"}],"name":"migrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrationTarget","outputs":[{"internalType":"contract ForbitswapNFTSAssetShared","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_quantity","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proxyRegistryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"removeSharedProxyAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_to","type":"address"}],"name":"setCreator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"setPermanentURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"setProxyRegistryAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"}],"name":"setTemplateURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"sharedProxyAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"supportsFactoryInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"templateURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0","receipt":{"to":null,"from":"0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8","contractAddress":"0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a","transactionIndex":0,"gasUsed":"3753980","logsBloom":"0xblockHash":"0x56ce0865f9030d9a9a50ea36867649aa1393d4d2acfd36b65572beafaa9e7c6d","transactionHash":"0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0","logs":[{"transactionIndex":0,"blockNumber":10331052,"transactionHash":"0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0","address":"0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x00000000000000000000000000b91b2f8afe87fcdc2b3ffa9ee2278cd1e4ddf8"],"data":"0x","logIndex":0,"blockHash":"0x56ce0865f9030d9a9a50ea36867649aa1393d4d2acfd36b65572beafaa9e7c6d"}],"blockNumber":10331052,"cumulativeGasUsed":"3753980","status":1,"byzantium":true},"args":["Forbit Migration contracts","FMC","0x14aFCbb771B02743234aF08e7DDd8647f42A5b58","","0x12F571d5Cd4D20C9D83D0D222516Dfb3299Ff29D"],"solcInputHash":"98c15b4f3559a23f2599202e42791894","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"_name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_proxyRegistryAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_templateURI\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_migrationAddress\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"_creator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"CreatorChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"userAddress\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address payable\\",\\"name\\":\\"relayerAddress\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"functionSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"MetaTransactionExecuted\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"_value\\",\\"type\\":\\"string\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"PermanentURI\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ids\\",\\"type\\":\\"uint256[]\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"values\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"TransferBatch\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"TransferSingle\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"URI\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"ERC712_VERSION\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addSharedProxyAddress\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"accounts\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ids\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"balanceOfBatch\\",\\"outputs\\":[{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"\\",\\"type\\":\\"uint256[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_ids\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_quantities\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"batchBurn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_ids\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_quantities\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"batchMint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_quantity\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"creator\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"disableMigrate\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"userAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"functionSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"sigR\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"sigS\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"sigV\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"executeMetaTransaction\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"exists\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getDomainSeperator\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"user\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"isOperator\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"isPermanentURI\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"maxSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"internalType\\":\\"struct ForbitswapNFTSAssetShared.Ownership[]\\",\\"name\\":\\"_ownerships\\",\\"type\\":\\"tuple[]\\"}],\\"name\\":\\"migrate\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"migrationTarget\\",\\"outputs\\":[{\\"internalType\\":\\"contract ForbitswapNFTSAssetShared\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_quantity\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"proxyRegistryAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeSharedProxyAddress\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_ids\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_amounts\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeBatchTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setCreator\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setPermanentURI\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setProxyRegistryAddress\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setTemplateURI\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setURI\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"sharedProxyAddresses\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"supportsFactoryInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceId\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"templateURI\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"uri\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"balanceOfBatch(address[],uint256[])\\":{\\"details\\":\\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\\"},\\"batchBurn(address,uint256[],uint256[])\\":{\\"details\\":\\"Burns tokens for each id in _ids\\",\\"params\\":{\\"_from\\":\\"The address to burn tokens from\\",\\"_ids\\":\\"Array of token ids to burn\\",\\"_quantities\\":\\"Array of the amount to be burned\\"}},\\"batchMint(address,uint256[],uint256[],bytes)\\":{\\"details\\":\\"Mint tokens for each id in _ids\\",\\"params\\":{\\"_data\\":\\"Data to pass if receiver is contract\\",\\"_ids\\":\\"Array of ids to mint\\",\\"_quantities\\":\\"Array of amounts of tokens to mint per id\\",\\"_to\\":\\"The address to mint tokens to\\"}},\\"burn(address,uint256,uint256)\\":{\\"details\\":\\"Burns amount of a given token id\\",\\"params\\":{\\"_from\\":\\"The address to burn tokens from\\",\\"_id\\":\\"Token ID to burn\\",\\"_quantity\\":\\"Amount to burn\\"}},\\"exists(uint256)\\":{\\"details\\":\\"Returns whether the specified token is minted\\"},\\"mint(address,uint256,uint256,bytes)\\":{\\"details\\":\\"Mints some amount of tokens to an address\\",\\"params\\":{\\"_data\\":\\"Data to pass if receiver is contract\\",\\"_id\\":\\"Token ID to mint\\",\\"_quantity\\":\\"Amount of tokens to mint\\",\\"_to\\":\\"Address of the future owner of the token\\"}},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"paused()\\":{\\"details\\":\\"Return true if the contract is paused, and false otherwise\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC1155-setApprovalForAll}.\\"},\\"supportsInterface(bytes4)\\":{\\"details\\":\\"See {IERC165-supportsInterface}.\\"},\\"totalSupply(uint256)\\":{\\"details\\":\\"Returns the total quantity for a token ID\\",\\"params\\":{\\"_id\\":\\"Id of token to query\\"},\\"returns\\":{\\"_0\\":\\"Amount of token in existence\\"}},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/collectible/ForbitswapNFTSAssetShared.sol\\":\\"ForbitswapNFTSAssetShared\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{\\":__CACHE_BREAKER__\\":\\"0x00000000d41867734bbee4c6863d9255b2b06ac1\\"},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(\\\\n        address indexed previousOwner,\\\\n        address indexed newOwner\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _setOwner(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _setOwner(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(\\\\n            newOwner != address(0),\\\\n            \\\\\\"Ownable: new owner is the zero address\\\\\\"\\\\n        );\\\\n        _setOwner(newOwner);\\\\n    }\\\\n\\\\n    function _setOwner(address newOwner) private {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5c8ae508c9208b232eada2cf40a774371336fad5b9f3a921fdfdaa007bf23c5e\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/ERC1155Custom.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"../token/ERC1155/ERC1155.sol\\\\\\";\\\\nimport \\\\\\"../utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../utils/libraries/Strings.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./meta-transaction/ContextMixin.sol\\\\\\";\\\\nimport \\\\\\"./meta-transaction/NativeMetaTransaction.sol\\\\\\";\\\\nimport \\\\\\"../utils/Pausable.sol\\\\\\";\\\\n// import \\\\\\"../market/ProxyRegistry.sol\\\\\\";\\\\n\\\\ncontract OwnableDelegateProxy {}\\\\n\\\\ncontract ProxyRegistry {\\\\n  mapping(address => OwnableDelegateProxy) public proxies;\\\\n}\\\\n\\\\ncontract ERC1155Custom is ContextMixin, ERC1155, NativeMetaTransaction, Ownable, Pausable {\\\\n  using Address for address;\\\\n\\\\n  address public proxyRegistryAddress;\\\\n  string public name;\\\\n  string public symbol;\\\\n\\\\n  mapping(uint256 => mapping(address => uint256)) private balances;\\\\n  mapping(uint256 => uint256) private _supply;\\\\n\\\\n  event URI(string _uri, uint256 indexed _id);\\\\n\\\\n  modifier onlyOwnerOrProxy() {\\\\n    require(\\\\n      _isOwnerOrProxy(_msgSender()),\\\\n      \\\\\\"ERC1155Trandable: CALLER_IS_NOT_OWNER\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  modifier onlyApproved(address _from) {\\\\n    require(\\\\n      _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\\\\n      \\\\\\"ERC1155Trandable: CALLER_NOT_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  constructor(\\\\n    string memory _name,\\\\n    string memory _symbol,\\\\n    string memory _uri,\\\\n    address _proxyRegistryAddress\\\\n  ) ERC1155(_uri) {\\\\n    name = _name;\\\\n    symbol = _symbol;\\\\n    proxyRegistryAddress = _proxyRegistryAddress;\\\\n    _initializeEIP712(name);\\\\n  }\\\\n\\\\n  function _isOwnerOrProxy(address _address) internal view returns (bool) {\\\\n    return owner() == _address || _isProxyForUser(owner(), _address);\\\\n  }\\\\n\\\\n  function pause() external onlyOwnerOrProxy {\\\\n    _pause();\\\\n  }\\\\n\\\\n  function unpause() external onlyOwnerOrProxy {\\\\n    _unpause();\\\\n  }\\\\n\\\\n  function balanceOf(address account, uint256 id)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (uint256)\\\\n  {\\\\n    require(account != address(0), \\\\\\"ERC1155: balance query for the zero address\\\\\\");\\\\n    return balances[id][account];\\\\n  }\\\\n\\\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (uint256[] memory)\\\\n  {\\\\n    require(\\\\n      accounts.length == ids.length,\\\\n      \\\\\\"ERC1155: accounts and ids length mismatch\\\\\\"\\\\n    );\\\\n\\\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\\\n\\\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\\\n    }\\\\n\\\\n    return batchBalances;\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Returns the total quantity for a token ID\\\\n   * @param _id Id of token to query\\\\n   * @return Amount of token in existence\\\\n   */\\\\n  function totalSupply(uint256 _id) public view returns (uint256) {\\\\n    return _supply[_id];\\\\n  }\\\\n\\\\n  function isApprovedForAll(address _owner, address _operator)\\\\n    public\\\\n    view\\\\n    override\\\\n    returns (bool isOperator)\\\\n  {\\\\n    if (_isProxyForUser(_owner, _operator)) {\\\\n      return true;\\\\n    }\\\\n\\\\n    return super.isApprovedForAll(_owner, _operator);\\\\n  }\\\\n\\\\n  function safeTransferFrom(\\\\n    address from,\\\\n    address to,\\\\n    uint256 id,\\\\n    uint256 amount,\\\\n    bytes memory data\\\\n  ) public virtual override whenNotPaused onlyApproved(from) {\\\\n    require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(\\\\n      operator,\\\\n      from,\\\\n      to,\\\\n      asSingletonArray(id),\\\\n      asSingletonArray(amount),\\\\n      data\\\\n    );\\\\n\\\\n    uint256 fromBalance = balances[id][from];\\\\n    require(\\\\n      fromBalance >= amount,\\\\n      \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n    );\\\\n    balances[id][from] = fromBalance - amount;\\\\n    balances[id][to] += amount;\\\\n\\\\n    emit TransferSingle(operator, from, to, id, amount);\\\\n\\\\n    doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\\\n  }\\\\n\\\\n  function safeBatchTransferFrom(\\\\n    address from,\\\\n    address to,\\\\n    uint256[] memory ids,\\\\n    uint256[] memory amounts,\\\\n    bytes memory data\\\\n  ) public virtual override whenNotPaused onlyApproved(from) {\\\\n    require(\\\\n      ids.length == amounts.length,\\\\n      \\\\\\"ERC1155: IDS_AMOUNTS_LENGTH_MISMATCH\\\\\\"\\\\n    );\\\\n    require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\\\n\\\\n    for (uint256 i = 0; i < ids.length; ++i) {\\\\n      uint256 id = ids[i];\\\\n      uint256 amount = amounts[i];\\\\n\\\\n      uint256 fromBalance = balances[id][from];\\\\n      require(\\\\n        fromBalance >= amount,\\\\n        \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n      );\\\\n      balances[id][from] = fromBalance - amount;\\\\n      balances[id][to] += amount;\\\\n    }\\\\n\\\\n    emit TransferBatch(operator, from, to, ids, amounts);\\\\n\\\\n    doSafeBatchTransferAcceptanceCheck(\\\\n      operator,\\\\n      from,\\\\n      to,\\\\n      ids,\\\\n      amounts,\\\\n      data\\\\n    );\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Hook called before minting\\\\n   * @param _id Token ID to mint\\\\n   * @param _quantity Amount of tokens to mint\\\\n   */\\\\n  function _beforeMint(uint256 _id, uint256 _quantity) internal virtual {}\\\\n\\\\n  /**\\\\n   * @dev Mints some amount of tokens to an address\\\\n   * @param _to Address of the future owner of the token\\\\n   * @param _id Token ID to mint\\\\n   * @param _quantity Amount of tokens to mint\\\\n   * @param _data Data to pass if receiver is contract\\\\n   */\\\\n  function mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _quantity,\\\\n    bytes memory _data\\\\n  ) public virtual onlyOwnerOrProxy {\\\\n    _mint(_to, _id, _quantity, _data);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Mint tokens for each id in _ids\\\\n   * @param _to The address to mint tokens to\\\\n   * @param _ids Array of ids to mint\\\\n   * @param _quantities Array of amounts of tokens to mint per id\\\\n   * @param _data Data to pass if receiver is contract\\\\n   */\\\\n  function batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities,\\\\n    bytes memory _data\\\\n  ) public virtual onlyOwnerOrProxy {\\\\n    _batchMint(_to, _ids, _quantities, _data);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Burns amount of a given token id\\\\n   * @param _from The address to burn tokens from\\\\n   * @param _id Token ID to burn\\\\n   * @param _quantity Amount to burn\\\\n   */\\\\n  function burn(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) public virtual onlyApproved(_from) {\\\\n    _burn(_from, _id, _quantity);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Burns tokens for each id in _ids\\\\n   * @param _from The address to burn tokens from\\\\n   * @param _ids Array of token ids to burn\\\\n   * @param _quantities Array of the amount to be burned\\\\n   */\\\\n  function batchBurn(\\\\n    address _from,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities\\\\n  ) public virtual onlyApproved(_from) {\\\\n    _burnBatch(_from, _ids, _quantities);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Returns whether the specified token is minted\\\\n   */\\\\n  function exists(uint256 _id) public view returns (bool) {\\\\n    return _supply[_id] > 0;\\\\n  }\\\\n\\\\n  function _mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _amount,\\\\n    bytes memory _data\\\\n  ) internal virtual override whenNotPaused {\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(\\\\n      operator,\\\\n      address(0),\\\\n      _to,\\\\n      asSingletonArray(_id),\\\\n      asSingletonArray(_amount),\\\\n      _data\\\\n    );\\\\n\\\\n    _beforeMint(_id, _amount);\\\\n\\\\n    balances[_id][_to] += _amount;\\\\n    _supply[_id] += _amount;\\\\n\\\\n    emit TransferSingle(operator, address(0), _to, _id, _amount);\\\\n\\\\n    doSafeTransferAcceptanceCheck(\\\\n      operator,\\\\n      address(0),\\\\n      _to,\\\\n      _id,\\\\n      _amount,\\\\n      _data\\\\n    );\\\\n  }\\\\n\\\\n  function _batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _amounts,\\\\n    bytes memory _data\\\\n  ) internal virtual whenNotPaused {\\\\n    require(\\\\n      _ids.length == _amounts.length,\\\\n      \\\\\\"INVALID_ARRAYS_LENGTH\\\\\\"\\\\n    );\\\\n\\\\n    uint256 nMint = _ids.length;\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(operator, address(0), _to, _ids, _amounts, _data);\\\\n\\\\n    for (uint256 i = 0; i < nMint; i++) {\\\\n      uint256 id = _ids[i];\\\\n      uint256 amount = _amounts[i];\\\\n      _beforeMint(id, amount);\\\\n      balances[id][_to] += amount;\\\\n      _supply[id] += amount;\\\\n    }\\\\n\\\\n    emit TransferBatch(operator, address(0), _to, _ids, _amounts);\\\\n\\\\n    doSafeBatchTransferAcceptanceCheck(\\\\n      operator,\\\\n      address(0),\\\\n      _to,\\\\n      _ids,\\\\n      _amounts,\\\\n      _data\\\\n    );\\\\n  }\\\\n\\\\n  function _burn(\\\\n    address account,\\\\n    uint256 id,\\\\n    uint256 amount\\\\n  ) internal override whenNotPaused {\\\\n    require(account != address(0), \\\\\\"BURN_FROM_ZERO_ADDRESS\\\\\\");\\\\n    require(amount > 0, \\\\\\"AMOUNT_LESS_THAN_ONE\\\\\\");\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(\\\\n      operator,\\\\n      account,\\\\n      address(0),\\\\n      asSingletonArray(id),\\\\n      asSingletonArray(amount),\\\\n      \\\\\\"\\\\\\"\\\\n    );\\\\n\\\\n    uint256 accountBalance = balances[id][account];\\\\n    require(\\\\n      accountBalance >= amount,\\\\n      \\\\\\"AMOUNT_EXCEEDS_BALANCE\\\\\\"\\\\n    );\\\\n    balances[id][account] = accountBalance - amount;\\\\n    _supply[id] -= amount;\\\\n\\\\n    emit TransferSingle(operator, account, address(0), id, amount);\\\\n  }\\\\n\\\\n  function _burnBatch(\\\\n    address account,\\\\n    uint256[] memory ids,\\\\n    uint256[] memory amounts\\\\n  ) internal override whenNotPaused {\\\\n    require(account != address(0), \\\\\\"BURN_FROM_ZERO_ADDRESS\\\\\\");\\\\n    require(\\\\n      ids.length == amounts.length,\\\\n      \\\\\\"IDS_AMOUNTS_LENGTH_MISMATCH\\\\\\"\\\\n    );\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\\\\"\\\\\\");\\\\n\\\\n    for (uint256 i = 0; i < ids.length; i++) {\\\\n      uint256 id = ids[i];\\\\n      uint256 amount = amounts[i];\\\\n\\\\n      uint256 accountBalance = balances[id][account];\\\\n      require(\\\\n        accountBalance >= amount,\\\\n        \\\\\\"AMOUNT_EXCEEDS_BALANCE\\\\\\"\\\\n      );\\\\n      balances[id][account] = accountBalance - amount;\\\\n      _supply[id] -= amount;\\\\n    }\\\\n\\\\n    emit TransferBatch(operator, account, address(0), ids, amounts);\\\\n  }\\\\n\\\\n  function _isProxyForUser(address _user, address _address)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    returns (bool)\\\\n  {\\\\n    if (!proxyRegistryAddress.isContract()) {\\\\n      return false;\\\\n    }\\\\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\\\n    return address(proxyRegistry.proxies(_user)) == _address;\\\\n  }\\\\n\\\\n  function doSafeTransferAcceptanceCheck(\\\\n    address operator,\\\\n    address from,\\\\n    address to,\\\\n    uint256 id,\\\\n    uint256 amount,\\\\n    bytes memory data\\\\n  ) private {\\\\n    if (to.isContract()) {\\\\n      try\\\\n        IERC1155Receiver(to).onERC1155Received(\\\\n          operator,\\\\n          from,\\\\n          id,\\\\n          amount,\\\\n          data\\\\n        )\\\\n      returns (bytes4 response) {\\\\n        if (\\\\n          response != IERC1155Receiver(to).onERC1155Received.selector\\\\n        ) {\\\\n          revert(\\\\\\"ERC1155Receiver rejected tokens\\\\\\");\\\\n        }\\\\n      } catch Error(string memory reason) {\\\\n        revert(reason);\\\\n      } catch {\\\\n        revert(\\\\\\"Transfer to non ERC1155Receiver\\\\\\");\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function doSafeBatchTransferAcceptanceCheck(\\\\n    address operator,\\\\n    address from,\\\\n    address to,\\\\n    uint256[] memory ids,\\\\n    uint256[] memory amounts,\\\\n    bytes memory data\\\\n  ) internal {\\\\n    if (to.isContract()) {\\\\n      try\\\\n        IERC1155Receiver(to).onERC1155BatchReceived(\\\\n          operator,\\\\n          from,\\\\n          ids,\\\\n          amounts,\\\\n          data\\\\n        )\\\\n      returns (bytes4 response) {\\\\n        if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\\\n          revert(\\\\\\"ERC1155Receiver rejected tokens\\\\\\");\\\\n        }\\\\n      } catch Error(string memory reason) {\\\\n        revert(reason);\\\\n      } catch {\\\\n        revert(\\\\\\"Transfer to non ERC1155Receiver\\\\\\");\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function asSingletonArray(uint256 element)\\\\n    private\\\\n    pure\\\\n    returns (uint256[] memory)\\\\n  {\\\\n    uint256[] memory array = new uint256[](1);\\\\n    array[0] = element;\\\\n    return array;\\\\n  }\\\\n\\\\n  function _msgSender() internal view override returns (address sender) {\\\\n    return ContextMixin.msgSender();\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0xc5c99f65388b09e780b27c07915a897a30b676fe2307a30023c156b528155c01\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/ForbitswapNFTSAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ERC1155Custom.sol\\\\\\";\\\\n\\\\ncontract ForbitswapNFTSAsset is ERC1155Custom {\\\\n  uint256 constant TOKEN_SUPPLY_CAP = 1;\\\\n  string public templateURI;\\\\n\\\\n  mapping(uint256 => string) private _tokenURI;\\\\n  mapping(uint256 => bool) private _isPermanentURI;\\\\n\\\\n  event PermanentURI(string _value, uint256 indexed _id);\\\\n\\\\n  modifier onlyTokenAmountOwned(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) {\\\\n    require(\\\\n      _ownsTokenAmount(_from, _id, _quantity),\\\\n      \\\\\\"ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  modifier onlyImpermanentURI(uint256 id) {\\\\n    require(\\\\n      !isPermanentURI(id),\\\\n      \\\\\\"URI_CANNOT_BE_CHANGED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  constructor(\\\\n    string memory _name,\\\\n    string memory _symbol,\\\\n    address _proxyRegistryAddress,\\\\n    string memory _templateURI\\\\n  ) ERC1155Custom(_name, _symbol, \\\\\\"\\\\\\", _proxyRegistryAddress) {\\\\n    if (bytes(_templateURI).length > 0) {\\\\n      setTemplateURI(_templateURI);\\\\n    }\\\\n  }\\\\n\\\\n  function _ownsTokenAmount(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) internal view returns (bool) {\\\\n    return balanceOf(_from, _id) >= _quantity;\\\\n  }\\\\n\\\\n  function supportsFactoryInterface() public pure returns (bool) {\\\\n    return true;\\\\n  }\\\\n\\\\n  function setTemplateURI(string memory _uri) public onlyOwnerOrProxy {\\\\n    templateURI = _uri;\\\\n  }\\\\n\\\\n  function setURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    virtual\\\\n    onlyOwnerOrProxy\\\\n    onlyImpermanentURI(_id)\\\\n  {\\\\n    _setURI(_id, _uri);\\\\n  }\\\\n\\\\n  function setPermanentURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    virtual\\\\n    onlyOwnerOrProxy\\\\n    onlyImpermanentURI(_id)\\\\n  {\\\\n    _setPermanentURI(_id, _uri);\\\\n  }\\\\n\\\\n  function isPermanentURI(uint256 _id) public view returns (bool) {\\\\n    return _isPermanentURI[_id];\\\\n  }\\\\n\\\\n  function uri(uint256 _id) public view override returns (string memory) {\\\\n    string memory tokenUri = _tokenURI[_id];\\\\n    if (bytes(tokenUri).length != 0) {\\\\n      return tokenUri;\\\\n    }\\\\n    return templateURI;\\\\n  }\\\\n\\\\n  function balanceOf(address _owner, uint256 _id)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (uint256)\\\\n  {\\\\n    uint256 balance = super.balanceOf(_owner, _id);\\\\n    return \\\\n      _isCreatorOrProxy(_owner)\\\\n        ? balance + _remainingSupply(_id)\\\\n        : balance;\\\\n  }\\\\n\\\\n  function safeTransferFrom(\\\\n    address _from,\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _amount,\\\\n    bytes memory _data\\\\n  ) public override {\\\\n    uint256 mintedBalance = super.balanceOf(_from, _id);\\\\n    if (mintedBalance < _amount) {\\\\n      mint(_to, _id, _amount - mintedBalance, _data);\\\\n      if (mintedBalance > 0) {\\\\n        super.safeTransferFrom(_from, _to, _id, mintedBalance, _data);\\\\n      }\\\\n    } else {\\\\n      super.safeTransferFrom(_from, _to, _id, _amount, _data);\\\\n    }\\\\n  }\\\\n\\\\n  function safeBatchTransferFrom(\\\\n    address _from,\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _amounts,\\\\n    bytes memory _data\\\\n  ) public override {\\\\n    require(\\\\n      _ids.length == _amounts.length,\\\\n      \\\\\\"INVALID_ARRAYS_LENGTH\\\\\\"\\\\n    );\\\\n    for (uint256 i = 0; i < _ids.length; i++) {\\\\n      safeTransferFrom(_from, _to, _ids[i], _amounts[i], _data);\\\\n    }\\\\n  }\\\\n\\\\n  function _beforeMint(uint256 _id, uint256 _quantity)\\\\n    internal\\\\n    view\\\\n    override\\\\n  {\\\\n    require(\\\\n      _quantity <= _remainingSupply(_id),\\\\n      \\\\\\"QUANTITY_EXCEEDS_TOKEN_SUPPLY_CAP\\\\\\"\\\\n    );\\\\n  }\\\\n\\\\n  function burn(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) public override onlyTokenAmountOwned(_from, _id, _quantity) {\\\\n    super.burn(_from, _id, _quantity);\\\\n  }\\\\n\\\\n  function batchBurn(\\\\n    address _from,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities\\\\n  ) public override {\\\\n    for (uint256 i = 0; i < _ids.length; i++) {\\\\n      require(\\\\n        _ownsTokenAmount(_from, _ids[i], _quantities[i]),\\\\n        \\\\\\"ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\\\\"\\\\n      );\\\\n    }\\\\n    super.batchBurn(_from, _ids, _quantities);\\\\n  }\\\\n\\\\n  function _mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _quantity,\\\\n    bytes memory _data\\\\n  ) internal override {\\\\n    super._mint(_to, _id, _quantity, _data);\\\\n    if (_data.length > 1) {\\\\n      _setURI(_id, string(_data));\\\\n    }\\\\n  }\\\\n\\\\n  function _isCreatorOrProxy(address _address)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    returns (bool)\\\\n  {\\\\n    return _isOwnerOrProxy(_address);\\\\n  }\\\\n\\\\n  function _remainingSupply(uint256 _id)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    returns (uint256)\\\\n  {\\\\n    return TOKEN_SUPPLY_CAP - totalSupply(_id);\\\\n  }\\\\n\\\\n  function _origin() internal view virtual returns (address) {\\\\n    return owner();\\\\n  }\\\\n\\\\n  function _batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities,\\\\n    bytes memory _data\\\\n  ) internal virtual override {\\\\n    super._batchMint(_to, _ids, _quantities, _data);\\\\n    if (_data.length > 1) {\\\\n      for (uint256 i = 0; i < _ids.length; i++) {\\\\n        _setURI(_ids[i], string(_data));\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function _setURI(uint256 _id, string memory _uri) internal {\\\\n    _tokenURI[_id] = _uri;\\\\n    emit URI(_uri, _id);\\\\n  }\\\\n\\\\n  function _setPermanentURI(uint256 _id, string memory _uri)\\\\n    internal\\\\n    virtual\\\\n  {\\\\n    require(\\\\n      bytes(_uri).length > 0,\\\\n      \\\\\\"ONLY_VALID_URI\\\\\\"\\\\n    );\\\\n    _isPermanentURI[_id] = true;\\\\n    _setURI(_id, _uri);\\\\n    emit PermanentURI(_uri, _id);\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x9afcb43aa9e8d90ae405e08e8081a3091aa6315cdc84cf4643a8568cb243def1\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/ForbitswapNFTSAssetShared.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ForbitswapNFTSAsset.sol\\\\\\";\\\\nimport \\\\\\"./TokenIdentifiers.sol\\\\\\";\\\\nimport \\\\\\"../utils/ReentrancyGuard.sol\\\\\\";\\\\n\\\\ncontract ForbitswapNFTSAssetShared is ForbitswapNFTSAsset, ReentrancyGuard {\\\\n  using TokenIdentifiers for uint256;\\\\n\\\\n  ForbitswapNFTSAssetShared public migrationTarget;\\\\n\\\\n  mapping(address => bool) public sharedProxyAddresses;\\\\n\\\\n  struct Ownership {\\\\n    uint256 id;\\\\n    address owner;\\\\n  }\\\\n\\\\n  mapping(uint256 => address) internal _creatorOverride;\\\\n\\\\n  event CreatorChanged(uint256 indexed _id, address indexed _creator);\\\\n\\\\n  modifier creatorOnly(uint256 _id) {\\\\n    require(\\\\n      _isCreatorOrProxy(_id, _msgSender()),\\\\n      \\\\\\"ONLY_CREATOR_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  modifier onlyFullTokenOwner(uint256 _id) {\\\\n    require(\\\\n      _ownsTokenAmount(_msgSender(), _id, _id.tokenMaxSupply()),\\\\n      \\\\\\"ONLY_FULL_TOKEN_OWNER_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  constructor(\\\\n    string memory _name,\\\\n    string memory _symbol,\\\\n    address _proxyRegistryAddress,\\\\n    string memory _templateURI,\\\\n    address _migrationAddress\\\\n  ) ForbitswapNFTSAsset(_name, _symbol, _proxyRegistryAddress, _templateURI) {\\\\n    migrationTarget = ForbitswapNFTSAssetShared(_migrationAddress);\\\\n  }\\\\n\\\\n  function setProxyRegistryAddress(address _address) public onlyOwnerOrProxy {\\\\n    proxyRegistryAddress = _address;\\\\n  }\\\\n\\\\n  function addSharedProxyAddress(address _address) public onlyOwnerOrProxy {\\\\n    sharedProxyAddresses[_address] = true;\\\\n  }\\\\n\\\\n  function removeSharedProxyAddress(address _address) public onlyOwnerOrProxy {\\\\n    delete sharedProxyAddresses[_address];\\\\n  }\\\\n\\\\n  function disableMigrate() public onlyOwnerOrProxy {\\\\n    migrationTarget = ForbitswapNFTSAssetShared(address(0));\\\\n  }\\\\n\\\\n  function migrate(Ownership[] memory _ownerships) public onlyOwnerOrProxy {\\\\n    ForbitswapNFTSAssetShared _migrationTarget = migrationTarget;\\\\n    require(\\\\n      _migrationTarget != ForbitswapNFTSAssetShared(address(0)),\\\\n      \\\\\\"MIGRATE_DISABLED\\\\\\"\\\\n    );\\\\n\\\\n    string memory _migrationTargetTemplateURI = _migrationTarget.templateURI();\\\\n\\\\n    for (uint256 i = 0; i < _ownerships.length; ++i) {\\\\n      uint256 id = _ownerships[i].id;\\\\n      address owner = _ownerships[i].owner;\\\\n\\\\n      require(\\\\n        owner != address(0),\\\\n        \\\\\\"ZERO_ADDRESS_NOT_ALLOWED\\\\\\"\\\\n      );\\\\n\\\\n      uint256 previousAmount = _migrationTarget.balanceOf(owner, id);\\\\n\\\\n      if (previousAmount == 0) {\\\\n        continue;\\\\n      }\\\\n\\\\n      _mint(owner, id, previousAmount, \\\\\\"\\\\\\");\\\\n\\\\n      if (\\\\n        keccak256(bytes(_migrationTarget.uri(id))) !=\\\\n        keccak256(bytes(_migrationTargetTemplateURI))\\\\n      ) {\\\\n        _setPermanentURI(id, _migrationTarget.uri(id));\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _quantity,\\\\n    bytes memory _data\\\\n  ) public override nonReentrant creatorOnly(_id) {\\\\n    _mint(_to, _id, _quantity, _data);\\\\n  }\\\\n\\\\n  function batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities,\\\\n    bytes memory _data\\\\n  ) public override nonReentrant {\\\\n    for (uint256 i = 0; i < _ids.length; i++) {\\\\n      require(\\\\n        _isCreatorOrProxy(_ids[i], _msgSender()),\\\\n        \\\\\\"ONLY_CREATOR_ALLOWED\\\\\\"\\\\n      );\\\\n    }\\\\n    _batchMint(_to, _ids, _quantities, _data);\\\\n  }\\\\n\\\\n  function setURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    override\\\\n    creatorOnly(_id)\\\\n    onlyFullTokenOwner(_id)\\\\n  {\\\\n    _setURI(_id, _uri);\\\\n  }\\\\n\\\\n  function setPermanentURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    override\\\\n    creatorOnly(_id)\\\\n    onlyImpermanentURI(_id)\\\\n    onlyFullTokenOwner(_id)\\\\n  {\\\\n    _setPermanentURI(_id, _uri);\\\\n  }\\\\n\\\\n  function setCreator(uint256 _id, address _to) public creatorOnly(_id) {\\\\n    require(\\\\n      _to != address(0),\\\\n      \\\\\\"INVALID_ADDRESS\\\\\\"\\\\n    );\\\\n    _creatorOverride[_id] = _to;\\\\n    emit CreatorChanged(_id, _to);\\\\n  }\\\\n\\\\n  function creator(uint256 _id) public view returns (address) {\\\\n    if (_creatorOverride[_id] != address(0)) {\\\\n      return _creatorOverride[_id];\\\\n    } else {\\\\n      return _id.tokenCreator();\\\\n    }\\\\n  }\\\\n\\\\n  function maxSupply(uint256 _id) public pure returns (uint256) {\\\\n    return _id.tokenMaxSupply();\\\\n  }\\\\n\\\\n  function _origin(uint256 _id) internal pure returns (address) {\\\\n    return _id.tokenCreator();\\\\n  }\\\\n\\\\n  function _requireMintable(address _address, uint256 _id) internal view {\\\\n    require(\\\\n      _isCreatorOrProxy(_id, _address),\\\\n      \\\\\\"ONLY_CREATOR_ALLOWED\\\\\\"\\\\n    );\\\\n  }\\\\n\\\\n  function _remainingSupply(uint256 _id)\\\\n    internal\\\\n    view\\\\n    override\\\\n    returns (uint256)\\\\n  {\\\\n    return maxSupply(_id) - totalSupply(_id);\\\\n  }\\\\n\\\\n  function _isCreatorOrProxy(uint256 _id, address _address)\\\\n    internal\\\\n    view\\\\n    returns (bool)\\\\n  {\\\\n    address creator_ = creator(_id);\\\\n    return creator_ == _address || _isProxyForUser(creator_, _address);\\\\n  }\\\\n\\\\n  function _isProxyForUser(address _user, address _address)\\\\n    internal\\\\n    view\\\\n    override\\\\n    returns (bool)\\\\n  {\\\\n    if (sharedProxyAddresses[_address]) {\\\\n      return true;\\\\n    }\\\\n    return super._isProxyForUser(_user, _address);\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x12d34744cd0fa115da821f599cb0f1d3b34f69fd0a0b01862c634fdfaae98c53\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/TokenIdentifiers.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary TokenIdentifiers {\\\\n  uint8 constant ADDRESS_BITS = 160;\\\\n  uint8 constant INDEX_BITS = 56;\\\\n  uint8 constant SUPPLY_BITS = 40;\\\\n\\\\n  uint256 constant SUPPLY_MASK = (uint256(1) << SUPPLY_BITS) - 1;\\\\n  uint256 constant INDEX_MASK = ((uint256(1) << INDEX_BITS) - 1) ^ SUPPLY_MASK;\\\\n\\\\n  function tokenMaxSupply(uint256 _id) internal pure returns (uint256) {\\\\n    return _id & SUPPLY_MASK;\\\\n  }\\\\n\\\\n  function tokenIndex(uint256 _id) internal pure returns (uint256) {\\\\n    return _id & INDEX_MASK;\\\\n  }\\\\n\\\\n  function tokenCreator(uint256 _id) internal pure returns (address) {\\\\n    return address(uint160(_id >> (INDEX_BITS + SUPPLY_BITS)));\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x9161ff1b0d82ca545d46d1daec0e410980884d5979e10afec8d172b3008da6dd\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/ContextMixin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract ContextMixin {\\\\n    function msgSender()\\\\n        internal\\\\n        view\\\\n        returns (address payable sender)\\\\n    {\\\\n        if (msg.sender == address(this)) {\\\\n            bytes memory array = msg.data;\\\\n            uint256 index = msg.data.length;\\\\n            assembly {\\\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\\\n                sender := and(\\\\n                    mload(add(array, index)),\\\\n                    0xffffffffffffffffffffffffffffffffffffffff\\\\n                )\\\\n            }\\\\n        } else {\\\\n            sender = payable(msg.sender);\\\\n        }\\\\n        return sender;\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x75cc75d416c24a59b695e8418abacc91fe6da7a1e76d791b660e7e6a8e89aa7e\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/EIP712Base.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./Initializable.sol\\\\\\";\\\\n\\\\ncontract EIP712Base is Initializable {\\\\n    struct EIP712Domain {\\\\n        string name;\\\\n        string version;\\\\n        address verifyingContract;\\\\n        bytes32 salt;\\\\n    }\\\\n\\\\n    string public constant ERC712_VERSION = \\\\\\"1\\\\\\";\\\\n\\\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\\\n        bytes(\\\\n            \\\\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\\\\"\\\\n        )\\\\n    );\\\\n    bytes32 internal domainSeperator;\\\\n\\\\n    function _initializeEIP712(\\\\n        string memory name\\\\n    )\\\\n        internal\\\\n        initializer\\\\n    {\\\\n        _setDomainSeperator(name);\\\\n    }\\\\n\\\\n    function _setDomainSeperator(string memory name) internal {\\\\n        domainSeperator = keccak256(\\\\n            abi.encode(\\\\n                EIP712_DOMAIN_TYPEHASH,\\\\n                keccak256(bytes(name)),\\\\n                keccak256(bytes(ERC712_VERSION)),\\\\n                address(this),\\\\n                bytes32(getChainId())\\\\n            )\\\\n        );\\\\n    }\\\\n\\\\n    function getDomainSeperator() public view returns (bytes32) {\\\\n        return domainSeperator;\\\\n    }\\\\n\\\\n    function getChainId() public view returns (uint256) {\\\\n        uint256 id;\\\\n        assembly {\\\\n            id := chainid()\\\\n        }\\\\n        return id;\\\\n    }\\\\n\\\\n    function toTypedMessageHash(bytes32 messageHash)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return\\\\n            keccak256(\\\\n                abi.encodePacked(\\\\\\"\\\\\\\\x19\\\\\\\\x01\\\\\\", getDomainSeperator(), messageHash)\\\\n            );\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x41fab0b43922c8e3134341e79d4f4f83bf441b4476ce4a303bfebb9e3ff887d8\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/Initializable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\ncontract Initializable {\\\\n  bool inited = false;\\\\n\\\\n  modifier initializer() {\\\\n    require(!inited, \\\\\\"already inited\\\\\\");\\\\n    _;\\\\n    inited = true;\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x1936400e518e73dfe924a655b68a2533efc0758e24b71e212f03c11fce2bd1c9\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/NativeMetaTransaction.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./EIP712Base.sol\\\\\\";\\\\n\\\\ncontract NativeMetaTransaction is EIP712Base {\\\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\\\n        bytes(\\\\n            \\\\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\\\\"\\\\n        )\\\\n    );\\\\n\\\\n    struct MetaTransaction {\\\\n        uint256 nonce;\\\\n        address from;\\\\n        bytes functionSignature;\\\\n    }\\\\n    \\\\n    event MetaTransactionExecuted(\\\\n        address userAddress,\\\\n        address payable relayerAddress,\\\\n        bytes functionSignature\\\\n    );\\\\n    mapping(address => uint256) nonces;\\\\n\\\\n    function executeMetaTransaction(\\\\n        address userAddress,\\\\n        bytes memory functionSignature,\\\\n        bytes32 sigR,\\\\n        bytes32 sigS,\\\\n        uint8 sigV\\\\n    ) public payable returns (bytes memory) {\\\\n        MetaTransaction memory metaTx = MetaTransaction({\\\\n            nonce: nonces[userAddress],\\\\n            from: userAddress,\\\\n            functionSignature: functionSignature\\\\n        });\\\\n\\\\n        require(\\\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\\\n            \\\\\\"Signer and signature do not match\\\\\\"\\\\n        );\\\\n\\\\n        nonces[userAddress] = nonces[userAddress] + 1;\\\\n\\\\n        emit MetaTransactionExecuted(\\\\n            userAddress,\\\\n            payable(msg.sender),\\\\n            functionSignature\\\\n        );\\\\n\\\\n        (bool success, bytes memory returnData) = address(this).call(\\\\n            abi.encodePacked(functionSignature, userAddress)\\\\n        );\\\\n        require(success, \\\\\\"Function call not successful\\\\\\");\\\\n\\\\n        return returnData;\\\\n    }\\\\n\\\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return\\\\n            keccak256(\\\\n                abi.encode(\\\\n                    META_TRANSACTION_TYPEHASH,\\\\n                    metaTx.nonce,\\\\n                    metaTx.from,\\\\n                    keccak256(metaTx.functionSignature)\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function getNonce(address user) public view returns (uint256 nonce) {\\\\n        nonce = nonces[user];\\\\n    }\\\\n\\\\n    function verify(\\\\n        address signer,\\\\n        MetaTransaction memory metaTx,\\\\n        bytes32 sigR,\\\\n        bytes32 sigS,\\\\n        uint8 sigV\\\\n    ) internal view returns (bool) {\\\\n        require(signer != address(0), \\\\\\"NativeMetaTransaction: INVALID_SIGNER\\\\\\");\\\\n        return\\\\n            signer ==\\\\n            ecrecover(\\\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\\\n                sigV,\\\\n                sigR,\\\\n                sigS\\\\n            );\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x2fe0d0f279a758d3893b7d7c8ee2e9a6e1780a74fc5d00e5e1ebfc453e2360f6\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/ERC1155.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC1155.sol\\\\\\";\\\\nimport \\\\\\"../../utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"./IERC1155Receiver.sol\\\\\\";\\\\nimport \\\\\\"./IERC1155MetadataURI.sol\\\\\\";\\\\nimport \\\\\\"../../utils/libraries/Address.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\nimport \\\\\\"../../utils/introspection/ERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the basic standard multi-token.\\\\n * See https://eips.ethereum.org/EIPS/eip-1155\\\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\\\n    using Address for address;\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Mapping from token ID to account balances\\\\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\\\\n\\\\n    // Mapping from account to operator approvals\\\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\\\n\\\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\\\n    string private _uri;\\\\n\\\\n    /**\\\\n     * @dev See {_setURI}.\\\\n     */\\\\n    constructor(string memory uri_) {\\\\n        _setURI(uri_);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override(ERC165, IERC165)\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            interfaceId == type(IERC1155).interfaceId ||\\\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155MetadataURI-uri}.\\\\n     *\\\\n     * This implementation returns the same URI for *all* token types. It relies\\\\n     * on the token type ID substitution mechanism\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\\\n     *\\\\n     * Clients calling this function must replace the `\\\\\\\\{id\\\\\\\\}` substring with the\\\\n     * actual token type ID.\\\\n     */\\\\n    function uri(uint256) public view virtual override returns (string memory) {\\\\n        return _uri;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-balanceOf}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function balanceOf(address account, uint256 id)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (uint256)\\\\n    {\\\\n        require(\\\\n            account != address(0),\\\\n            \\\\\\"ERC1155: balance query for the zero address\\\\\\"\\\\n        );\\\\n        return _balances[id][account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-balanceOfBatch}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `accounts` and `ids` must have the same length.\\\\n     */\\\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (uint256[] memory)\\\\n    {\\\\n        require(\\\\n            accounts.length == ids.length,\\\\n            \\\\\\"ERC1155: accounts and ids length mismatch\\\\\\"\\\\n        );\\\\n\\\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\\\n\\\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\\\n        }\\\\n\\\\n        return batchBalances;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-setApprovalForAll}.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved)\\\\n        public\\\\n        virtual\\\\n        override\\\\n    {\\\\n        require(\\\\n            _msgSender() != operator,\\\\n            \\\\\\"ERC1155: setting approval status for self\\\\\\"\\\\n        );\\\\n\\\\n        _operatorApprovals[_msgSender()][operator] = approved;\\\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-isApprovedForAll}.\\\\n     */\\\\n    function isApprovedForAll(address account, address operator)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        return _operatorApprovals[account][operator];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) public virtual override {\\\\n        require(\\\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\\\n            \\\\\\"ERC1155: caller is not owner nor approved\\\\\\"\\\\n        );\\\\n        _safeTransferFrom(from, to, id, amount, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\\\n     */\\\\n    function safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) public virtual override {\\\\n        require(\\\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\\\n            \\\\\\"ERC1155: transfer caller is not owner nor approved\\\\\\"\\\\n        );\\\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(\\\\n            operator,\\\\n            from,\\\\n            to,\\\\n            _asSingletonArray(id),\\\\n            _asSingletonArray(amount),\\\\n            data\\\\n        );\\\\n\\\\n        uint256 fromBalance = _balances[id][from];\\\\n        require(\\\\n            fromBalance >= amount,\\\\n            \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n        );\\\\n        unchecked {\\\\n            _balances[id][from] = fromBalance - amount;\\\\n        }\\\\n        _balances[id][to] += amount;\\\\n\\\\n        emit TransferSingle(operator, from, to, id, amount);\\\\n\\\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\\\n     *\\\\n     * Emits a {TransferBatch} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(\\\\n            ids.length == amounts.length,\\\\n            \\\\\\"ERC1155: ids and amounts length mismatch\\\\\\"\\\\n        );\\\\n        require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\\\n\\\\n        for (uint256 i = 0; i < ids.length; ++i) {\\\\n            uint256 id = ids[i];\\\\n            uint256 amount = amounts[i];\\\\n\\\\n            uint256 fromBalance = _balances[id][from];\\\\n            require(\\\\n                fromBalance >= amount,\\\\n                \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n            );\\\\n            unchecked {\\\\n                _balances[id][from] = fromBalance - amount;\\\\n            }\\\\n            _balances[id][to] += amount;\\\\n        }\\\\n\\\\n        emit TransferBatch(operator, from, to, ids, amounts);\\\\n\\\\n        _doSafeBatchTransferAcceptanceCheck(\\\\n            operator,\\\\n            from,\\\\n            to,\\\\n            ids,\\\\n            amounts,\\\\n            data\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\\\n     * substitution mechanism\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\\\n     *\\\\n     * By this mechanism, any occurrence of the `\\\\\\\\{id\\\\\\\\}` substring in either the\\\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\\\n     * clients with the token type ID.\\\\n     *\\\\n     * For example, the `https://token-cdn-domain/\\\\\\\\{id\\\\\\\\}.json` URI would be\\\\n     * interpreted by clients as\\\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\\\n     * for token type ID 0x4cce0.\\\\n     *\\\\n     * See {uri}.\\\\n     *\\\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\\\n     * this function emits no events.\\\\n     */\\\\n    function _setURI(string memory newuri) internal virtual {\\\\n        _uri = newuri;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _mint(\\\\n        address account,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC1155: mint to the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(\\\\n            operator,\\\\n            address(0),\\\\n            account,\\\\n            _asSingletonArray(id),\\\\n            _asSingletonArray(amount),\\\\n            data\\\\n        );\\\\n\\\\n        _balances[id][account] += amount;\\\\n        emit TransferSingle(operator, address(0), account, id, amount);\\\\n\\\\n        _doSafeTransferAcceptanceCheck(\\\\n            operator,\\\\n            address(0),\\\\n            account,\\\\n            id,\\\\n            amount,\\\\n            data\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _mintBatch(\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(to != address(0), \\\\\\"ERC1155: mint to the zero address\\\\\\");\\\\n        require(\\\\n            ids.length == amounts.length,\\\\n            \\\\\\"ERC1155: ids and amounts length mismatch\\\\\\"\\\\n        );\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\\\n\\\\n        for (uint256 i = 0; i < ids.length; i++) {\\\\n            _balances[ids[i]][to] += amounts[i];\\\\n        }\\\\n\\\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\\\n\\\\n        _doSafeBatchTransferAcceptanceCheck(\\\\n            operator,\\\\n            address(0),\\\\n            to,\\\\n            ids,\\\\n            amounts,\\\\n            data\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens of token type `id`.\\\\n     */\\\\n    function _burn(\\\\n        address account,\\\\n        uint256 id,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC1155: burn from the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(\\\\n            operator,\\\\n            account,\\\\n            address(0),\\\\n            _asSingletonArray(id),\\\\n            _asSingletonArray(amount),\\\\n            \\\\\\"\\\\\\"\\\\n        );\\\\n\\\\n        uint256 accountBalance = _balances[id][account];\\\\n        require(\\\\n            accountBalance >= amount,\\\\n            \\\\\\"ERC1155: burn amount exceeds balance\\\\\\"\\\\n        );\\\\n        unchecked {\\\\n            _balances[id][account] = accountBalance - amount;\\\\n        }\\\\n\\\\n        emit TransferSingle(operator, account, address(0), id, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     */\\\\n    function _burnBatch(\\\\n        address account,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts\\\\n    ) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC1155: burn from the zero address\\\\\\");\\\\n        require(\\\\n            ids.length == amounts.length,\\\\n            \\\\\\"ERC1155: ids and amounts length mismatch\\\\\\"\\\\n        );\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\\\\"\\\\\\");\\\\n\\\\n        for (uint256 i = 0; i < ids.length; i++) {\\\\n            uint256 id = ids[i];\\\\n            uint256 amount = amounts[i];\\\\n\\\\n            uint256 accountBalance = _balances[id][account];\\\\n            require(\\\\n                accountBalance >= amount,\\\\n                \\\\\\"ERC1155: burn amount exceeds balance\\\\\\"\\\\n            );\\\\n            unchecked {\\\\n                _balances[id][account] = accountBalance - amount;\\\\n            }\\\\n        }\\\\n\\\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any token transfer. This includes minting\\\\n     * and burning, as well as batched variants.\\\\n     *\\\\n     * The same hook is called on both single and batched variants. For single\\\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\\\n     *\\\\n     * Calling conditions (for each `id` and `amount` pair):\\\\n     *\\\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * of token type `id` will be  transferred to `to`.\\\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\\\n     * for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens of token type `id`\\\\n     * will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     * - `ids` and `amounts` have the same, non-zero length.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    // solhint-disable no-empty-blocks\\\\n    function _beforeTokenTransfer(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) internal virtual {}\\\\n\\\\n    function _doSafeTransferAcceptanceCheck(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) private {\\\\n        if (to.isContract()) {\\\\n            try\\\\n                IERC1155Receiver(to).onERC1155Received(\\\\n                    operator,\\\\n                    from,\\\\n                    id,\\\\n                    amount,\\\\n                    data\\\\n                )\\\\n            returns (bytes4 response) {\\\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\\\n                    revert(\\\\\\"ERC1155: ERC1155Receiver rejected tokens\\\\\\");\\\\n                }\\\\n            } catch Error(string memory reason) {\\\\n                revert(reason);\\\\n            } catch {\\\\n                revert(\\\\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\\\\");\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _doSafeBatchTransferAcceptanceCheck(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) private {\\\\n        if (to.isContract()) {\\\\n            try\\\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\\\n                    operator,\\\\n                    from,\\\\n                    ids,\\\\n                    amounts,\\\\n                    data\\\\n                )\\\\n            returns (bytes4 response) {\\\\n                if (\\\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\\\n                ) {\\\\n                    revert(\\\\\\"ERC1155: ERC1155Receiver rejected tokens\\\\\\");\\\\n                }\\\\n            } catch Error(string memory reason) {\\\\n                revert(reason);\\\\n            } catch {\\\\n                revert(\\\\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\\\\");\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _asSingletonArray(uint256 element)\\\\n        private\\\\n        pure\\\\n        returns (uint256[] memory)\\\\n    {\\\\n        uint256[] memory array = new uint256[](1);\\\\n        array[0] = element;\\\\n\\\\n        return array;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x56a626cd1da960493a39226f22c772cff647d2c204e7848282963087dc008573\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/IERC1155.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ninterface IERC1155 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\\\n     */\\\\n    event TransferSingle(\\\\n        address indexed operator,\\\\n        address indexed from,\\\\n        address indexed to,\\\\n        uint256 id,\\\\n        uint256 value\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\\\n     * transfers.\\\\n     */\\\\n    event TransferBatch(\\\\n        address indexed operator,\\\\n        address indexed from,\\\\n        address indexed to,\\\\n        uint256[] ids,\\\\n        uint256[] values\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\\\n     * `approved`.\\\\n     */\\\\n    event ApprovalForAll(\\\\n        address indexed account,\\\\n        address indexed operator,\\\\n        bool approved\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\\\n     *\\\\n     * If an {URI} event was emitted for `id`, the standard\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\\\n     * returned by {IERC1155MetadataURI-uri}.\\\\n     */\\\\n    // event URI(string value, uint256 indexed id);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function balanceOf(address account, uint256 id)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `accounts` and `ids` must have the same length.\\\\n     */\\\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\\\n        external\\\\n        view\\\\n        returns (uint256[] memory);\\\\n\\\\n    /**\\\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\'s tokens, according to `approved`,\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `operator` cannot be the caller.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns true if `operator` is approved to transfer ``account``\'s tokens.\\\\n     *\\\\n     * See {setApprovalForAll}.\\\\n     */\\\\n    function isApprovedForAll(address account, address operator)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\'s tokens via {setApprovalForAll}.\\\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes calldata data\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\\\n     *\\\\n     * Emits a {TransferBatch} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] calldata ids,\\\\n        uint256[] calldata amounts,\\\\n        bytes calldata data\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5f99788b7ddbfdc0fbd6f8e1072f3648a12b0a19771eea9261c8b65b8ac1d1da\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/IERC1155MetadataURI.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC1155.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ninterface IERC1155MetadataURI is IERC1155 {\\\\n    /**\\\\n     * @dev Returns the URI for token type `id`.\\\\n     *\\\\n     * If the `\\\\\\\\{id\\\\\\\\}` substring is present in the URI, it must be replaced by\\\\n     * clients with the actual token type ID.\\\\n     */\\\\n    function uri(uint256 id) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x98f51fcfa39b58ed90352217aa4900ec770f83a9fdec91780a45d61de4ad509e\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/IERC1155Receiver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev _Available since v3.1._\\\\n */\\\\ninterface IERC1155Receiver is IERC165 {\\\\n    /**\\\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\\\n        To accept the transfer, this must return\\\\n        `bytes4(keccak256(\\\\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\\\\"))`\\\\n        (i.e. 0xf23a6e61, or its own function selector).\\\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\\\n        @param from The address which previously owned the token\\\\n        @param id The ID of the token being transferred\\\\n        @param value The amount of tokens being transferred\\\\n        @param data Additional data with no specified format\\\\n        @return `bytes4(keccak256(\\\\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\\\\"))` if transfer is allowed\\\\n    */\\\\n    function onERC1155Received(\\\\n        address operator,\\\\n        address from,\\\\n        uint256 id,\\\\n        uint256 value,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n\\\\n    /**\\\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\\\n        been updated. To accept the transfer(s), this must return\\\\n        `bytes4(keccak256(\\\\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\\\\"))`\\\\n        (i.e. 0xbc197c81, or its own function selector).\\\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\\\n        @param from The address which previously owned the token\\\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\\\n        @param data Additional data with no specified format\\\\n        @return `bytes4(keccak256(\\\\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\\\\"))` if transfer is allowed\\\\n    */\\\\n    function onERC1155BatchReceived(\\\\n        address operator,\\\\n        address from,\\\\n        uint256[] calldata ids,\\\\n        uint256[] calldata values,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./Context.sol\\\\\\";\\\\n\\\\nabstract contract Pausable is Context {\\\\n  bool private _paused;\\\\n\\\\n  event Paused(address account);\\\\n  event Unpaused(address account);\\\\n\\\\n  modifier whenNotPaused() {\\\\n    require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n    _;\\\\n  }\\\\n\\\\n  modifier whenPaused() {\\\\n    require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n    _;\\\\n  }\\\\n\\\\n  constructor() {\\\\n    _paused = false;\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Return true if the contract is paused, and false otherwise\\\\n   */\\\\n  function paused() public virtual returns (bool) {\\\\n    return _paused;\\\\n  }\\\\n\\\\n  function _pause() internal virtual whenNotPaused {\\\\n    _paused = true;\\\\n    emit Paused(_msgSender());\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Return to normal state\\\\n   */\\\\n  function _unpause() internal virtual whenPaused {\\\\n    _paused = false;\\\\n    emit Unpaused(_msgSender());\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0xf9516df26db7a649f3e4ca083cc38b752049819c325e7e596f697880cc792f28\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Contract module that helps prevent reentrant calls to a function.\\\\n */\\\\n\\\\nabstract contract ReentrancyGuard {\\\\n    uint256 private constant _NOT_ENTERED = 1;\\\\n    uint256 private constant _ENTERED = 2;\\\\n\\\\n    uint256 private _status;\\\\n\\\\n    constructor() {\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(_status != _ENTERED, \\\\\\"ReentrancyGuard: reentrant call\\\\\\");\\\\n        _status = _ENTERED;\\\\n        _;\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xda940c3f1f364a990f37f0b5bb62f6410ff58666104d3fe712d42f7d82952f57\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/introspection/ERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n *\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x93b1ce940e4e905752730be86b74d5f915097747868f7876e1de9af86afa6ad4\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/introspection/IERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/libraries/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(\\\\n            address(this).balance >= amount,\\\\n            \\\\\\"Address: insufficient balance\\\\\\"\\\\n        );\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(\\\\n            success,\\\\n            \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data)\\\\n        internal\\\\n        returns (bytes memory)\\\\n    {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return\\\\n            functionCallWithValue(\\\\n                target,\\\\n                data,\\\\n                value,\\\\n                \\\\\\"Address: low-level call with value failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(\\\\n            address(this).balance >= value,\\\\n            \\\\\\"Address: insufficient balance for call\\\\\\"\\\\n        );\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\\\n            data\\\\n        );\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data)\\\\n        internal\\\\n        view\\\\n        returns (bytes memory)\\\\n    {\\\\n        return\\\\n            functionStaticCall(\\\\n                target,\\\\n                data,\\\\n                \\\\\\"Address: low-level static call failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data)\\\\n        internal\\\\n        returns (bytes memory)\\\\n    {\\\\n        return\\\\n            functionDelegateCall(\\\\n                target,\\\\n                data,\\\\n                \\\\\\"Address: low-level delegate call failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    function _verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) private pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc7a79a3811a2d5ccd504dfc51074048aa28b2b3ef0ca63db196e70c44fd072a7\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/libraries/Strings.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n    bytes16 private constant _HEX_SYMBOLS = \\\\\\"0123456789abcdef\\\\\\";\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\n        // Inspired by OraclizeAPI\'s implementation - MIT licence\\\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\\\n\\\\n        if (value == 0) {\\\\n            return \\\\\\"0\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 digits;\\\\n        while (temp != 0) {\\\\n            digits++;\\\\n            temp /= 10;\\\\n        }\\\\n        bytes memory buffer = new bytes(digits);\\\\n        while (value != 0) {\\\\n            digits -= 1;\\\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\\\n            value /= 10;\\\\n        }\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\n        if (value == 0) {\\\\n            return \\\\\\"0x00\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 length = 0;\\\\n        while (temp != 0) {\\\\n            length++;\\\\n            temp >>= 8;\\\\n        }\\\\n        return toHexString(value, length);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n     */\\\\n    function toHexString(uint256 value, uint256 length)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\n        buffer[0] = \\\\\\"0\\\\\\";\\\\n        buffer[1] = \\\\\\"x\\\\\\";\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\\\n            value >>= 4;\\\\n        }\\\\n        require(value == 0, \\\\\\"Strings: hex length insufficient\\\\\\");\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    function strConcat(\\\\n        string memory _a,\\\\n        string memory _b,\\\\n        string memory _c,\\\\n        string memory _d,\\\\n        string memory _e\\\\n    ) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        bytes memory _bc = bytes(_c);\\\\n        bytes memory _bd = bytes(_d);\\\\n        bytes memory _be = bytes(_e);\\\\n        string memory abcde = new string(\\\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\\\n        );\\\\n        bytes memory babcde = bytes(abcde);\\\\n        uint256 k = 0;\\\\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\\\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\\\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\\\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\\\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\\\n        return string(babcde);\\\\n    }\\\\n\\\\n    function strConcat(\\\\n        string memory _a,\\\\n        string memory _b,\\\\n        string memory _c,\\\\n        string memory _d\\\\n    ) internal pure returns (string memory) {\\\\n        return strConcat(_a, _b, _c, _d, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function strConcat(\\\\n        string memory _a,\\\\n        string memory _b,\\\\n        string memory _c\\\\n    ) internal pure returns (string memory) {\\\\n        return strConcat(_a, _b, _c, \\\\\\"\\\\\\", \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function strConcat(string memory _a, string memory _b)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return strConcat(_a, _b, \\\\\\"\\\\\\", \\\\\\"\\\\\\", \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function uint2str(uint256 _i)\\\\n        internal\\\\n        pure\\\\n        returns (string memory _uintAsString)\\\\n    {\\\\n        if (_i == 0) {\\\\n            return \\\\\\"0\\\\\\";\\\\n        }\\\\n        uint256 j = _i;\\\\n        uint256 len;\\\\n        while (j != 0) {\\\\n            len++;\\\\n            j /= 10;\\\\n        }\\\\n        bytes memory bstr = new bytes(len);\\\\n        uint256 k = len - 1;\\\\n        while (_i != 0) {\\\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\\\n            _i /= 10;\\\\n        }\\\\n        return string(bstr);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb5125219a0b6640bfd7c22463d63b97d1525e7830eea1bfe6312b6f08437762c\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x860c26edc6958c5c72c482b147921630e311c0b061dc7fd2157d1840653f6839\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040526003805460ff191690553480156200001b57600080fd5b50604051620047d8380380620047d88339810160408190526200003e91620006bd565b8484848483836040518060200160405280600081525084816200006781620001be60201b60201c565b506200007c62000076620001d7565b620001f4565b6006805460ff60a01b1916905583516200009e9060089060208701906200054d565b508251620000b49060099060208601906200054d565b50600780546001600160a01b0319166001600160a01b03831617905560088054620001709190620000e59062000824565b80601f0160208091040260200160405190810160405280929190818152602001828054620001139062000824565b8015620001645780601f10620001385761010080835404028352916020019162000164565b820191906000526020600020905b8154815290600101906020018083116200014657829003601f168201915b50506200024692505050565b505050506000815111156200018a576200018a8162000290565b50506001600f555050601080546001600160a01b0319166001600160a01b0392909216919091179055506200089092505050565b8051620001d39060029060208401906200054d565b5050565b6000620001ee620002d860201b620018fb1760201c565b90505b90565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60035460ff1615620002755760405162461bcd60e51b81526004016200026c90620007fc565b60405180910390fd5b620002808162000336565b506003805460ff19166001179055565b620002a46200029e620001d7565b620003d8565b620002c35760405162461bcd60e51b81526004016200026c90620007b7565b8051620001d390600c9060208401906200054d565b6000333014156200033157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620001f19050565b503390565b6040518060800160405280604f815260200162004789604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc630620003a46200041a565b604051620003ba9594939291906020016200078b565b60408051601f19818403018152919052805160209091012060045550565b60006001600160a01b038216620003ee6200041e565b6001600160a01b03161480620004145750620004146200040d6200041e565b836200042d565b92915050565b4690565b6006546001600160a01b031690565b6001600160a01b03811660009081526011602052604081205460ff1615620004585750600162000414565b6200046f83836200047660201b620019571760201c565b9392505050565b6007546000906200049c906001600160a01b031662000547602090811b62001a1217901c565b620004aa5750600062000414565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c455279190620004e190889060040162000777565b60206040518083038186803b158015620004fa57600080fd5b505afa1580156200050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200053591906200069e565b6001600160a01b031614949350505050565b3b151590565b8280546200055b9062000824565b90600052602060002090601f0160209004810192826200057f5760008555620005ca565b82601f106200059a57805160ff1916838001178555620005ca565b82800160010185558215620005ca579182015b82811115620005ca578251825591602001919060010190620005ad565b50620005d8929150620005dc565b5090565b5b80821115620005d85760008155600101620005dd565b600082601f83011262000604578081fd5b81516001600160401b038082111562000621576200062162000861565b6040516020601f8401601f191682018101838111838210171562000649576200064962000861565b604052838252858401810187101562000660578485fd5b8492505b8383101562000683578583018101518284018201529182019162000664565b838311156200069457848185840101525b5095945050505050565b600060208284031215620006b0578081fd5b81516200046f8162000877565b600080600080600060a08688031215620006d5578081fd5b85516001600160401b0380821115620006ec578283fd5b620006fa89838a01620005f3565b9650602088015191508082111562000710578283fd5b6200071e89838a01620005f3565b955060408801519150620007328262000877565b60608801519194508082111562000747578283fd5b506200075688828901620005f3565b9250506080860151620007698162000877565b809150509295509295909350565b6001600160a01b0391909116815260200190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b6020808252600e908201526d185b1c9958591e481a5b9a5d195960921b604082015260600190565b6002810460018216806200083957607f821691505b602082108114156200085b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200088d57600080fd5b50565b613ee980620008a06000396000f3fe6080604052600436106102665760003560e01c8063731133e911610144578063b48ab8b6116100b6578063e985e9c51161007a578063e985e9c5146106d0578063f242432a146106f0578063f2fde38b14610710578063f5298aca14610730578063f6eb127a14610750578063f923e8c31461077057610266565b8063b48ab8b614610646578063bd85b03914610666578063c311c52314610686578063cd7c03261461069b578063d26ea6c0146106b057610266565b80638da5cb5b116101085780638da5cb5b1461059c57806391686f53146105b157806395d89b41146105d15780639e037eea146105e6578063a22cb46514610606578063a50aa5c31461062657610266565b8063731133e91461050757806373505d35146105275780638456cb5914610547578063862440e21461055c578063869f75941461057c57610266565b80632eb2c2d6116101dd5780634e1273f4116101a15780634e1273f41461044e5780634f558e791461047b578063510b51581461049b5780635b51acff146104c85780635c975abb146104dd578063715018a6146104f257610266565b80632eb2c2d6146103c45780632f1c982c146103e45780633408e470146104045780633588ad7c146104195780633f4ba83a1461043957610266565b80630e89341c1161022f5780630e89341c1461031a5780630f7e59701461033a5780631e7d9dbb1461034f57806320379ee51461036f57806324d88785146103845780632d0335ab146103a457610266565b8062fdd58e1461026b57806301ffc9a7146102a157806306fdde03146102ce5780630bb2465a146102f05780630c53c51c14610307575b600080fd5b34801561027757600080fd5b5061028b610286366004612f09565b610785565b60405161029891906134de565b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004613151565b6107c4565b60405161029891906134d3565b3480156102da57600080fd5b506102e361080c565b6040516102989190613529565b3480156102fc57600080fd5b5061030561089a565b005b6102e3610315366004612e8f565b6108e1565b34801561032657600080fd5b506102e3610335366004613249565b610a61565b34801561034657600080fd5b506102e3610ba2565b34801561035b57600080fd5b506102c161036a366004613249565b610bbf565b34801561037b57600080fd5b5061028b610bd4565b34801561039057600080fd5b5061030561039f3660046131a5565b610bdb565b3480156103b057600080fd5b5061028b6103bf366004612bf3565b610c19565b3480156103d057600080fd5b506103056103df366004612c47565b610c34565b3480156103f057600080fd5b506103056103ff36600461307b565b610cd6565b34801561041057600080fd5b5061028b61101d565b34801561042557600080fd5b5061030561043436600461329d565b611021565b34801561044557600080fd5b506103056110be565b34801561045a57600080fd5b5061046e610469366004612fbc565b6110ef565b604051610298919061349b565b34801561048757600080fd5b506102c1610496366004613249565b61120e565b3480156104a757600080fd5b506104bb6104b6366004613249565b611222565b60405161029891906133ab565b3480156104d457600080fd5b506104bb61126d565b3480156104e957600080fd5b506102c161127c565b3480156104fe57600080fd5b5061030561128c565b34801561051357600080fd5b50610305610522366004612f68565b6112d5565b34801561053357600080fd5b506102c1610542366004612bf3565b61133e565b34801561055357600080fd5b50610305611353565b34801561056857600080fd5b5061030561057736600461329d565b611382565b34801561058857600080fd5b5061028b610597366004613249565b6113dd565b3480156105a857600080fd5b506104bb6113e8565b3480156105bd57600080fd5b506103056105cc366004613279565b6113f7565b3480156105dd57600080fd5b506102e36114a0565b3480156105f257600080fd5b50610305610601366004612bf3565b6114ad565b34801561061257600080fd5b50610305610621366004612e5e565b6114f5565b34801561063257600080fd5b50610305610641366004612bf3565b6115c3565b34801561065257600080fd5b50610305610661366004612dc8565b61160e565b34801561067257600080fd5b5061028b610681366004613249565b6116bb565b34801561069257600080fd5b506102c16116cd565b3480156106a757600080fd5b506104bb6116d2565b3480156106bc57600080fd5b506103056106cb366004612bf3565b6116e1565b3480156106dc57600080fd5b506102c16106eb366004612c0f565b61172a565b3480156106fc57600080fd5b5061030561070b366004612cf0565b611754565b34801561071c57600080fd5b5061030561072b366004612bf3565b6117a4565b34801561073c57600080fd5b5061030561074b366004612f34565b611815565b34801561075c57600080fd5b5061030561076b366004612d56565b61184a565b34801561077c57600080fd5b506102e36118ee565b6000806107928484611a18565b905061079d84611a68565b6107a757806107ba565b6107b083611a73565b6107ba9082613c99565b9150505b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806107f557506001600160e01b031982166303a24d0760e21b145b80610804575061080482611a91565b90505b919050565b6008805461081990613d19565b80601f016020809104026020016040519081016040528092919081815260200182805461084590613d19565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505081565b6108aa6108a5611aaa565b611ab9565b6108cf5760405162461bcd60e51b81526004016108c69061376f565b60405180910390fd5b601080546001600160a01b0319169055565b60408051606081810183526001600160a01b0388166000818152600560209081529085902054845283015291810186905261091f8782878787611aee565b61093b5760405162461bcd60e51b81526004016108c690613a0b565b6001600160a01b03871660009081526005602052604090205461095f906001613c99565b6001600160a01b0388166000908152600560205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b906109af90899033908a906133bf565b60405180910390a1600080306001600160a01b0316888a6040516020016109d7929190613359565b60408051601f19818403018152908290526109f19161333d565b6000604051808303816000865af19150503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b509150915081610a555760405162461bcd60e51b81526004016108c6906136d3565b98975050505050505050565b6000818152600d6020526040812080546060929190610a7f90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610aab90613d19565b8015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b505050505090508051600014610b0f579050610807565b600c8054610b1c90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4890613d19565b8015610b955780601f10610b6a57610100808354040283529160200191610b95565b820191906000526020600020905b815481529060010190602001808311610b7857829003601f168201915b5050505050915050919050565b604051806040016040528060018152602001603160f81b81525081565b6000908152600e602052604090205460ff1690565b6004545b90565b610be66108a5611aaa565b610c025760405162461bcd60e51b81526004016108c69061376f565b8051610c1590600c906020840190612aa2565b5050565b6001600160a01b031660009081526005602052604090205490565b8151835114610c555760405162461bcd60e51b81526004016108c690613978565b60005b8351811015610cce57610cbc8686868481518110610c8657634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610cae57634e487b7160e01b600052603260045260246000fd5b602002602001015186611754565b80610cc681613d54565b915050610c58565b505050505050565b610ce16108a5611aaa565b610cfd5760405162461bcd60e51b81526004016108c69061376f565b6010546001600160a01b031680610d265760405162461bcd60e51b81526004016108c690613a4c565b6000816001600160a01b031663f923e8c36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9d91908101906131d7565b905060005b8351811015611017576000848281518110610dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015190506000858381518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905060006001600160a01b0316816001600160a01b03161415610e3e5760405162461bcd60e51b81526004016108c6906137b4565b604051627eeac760e11b81526000906001600160a01b0387169062fdd58e90610e6d9085908790600401613482565b60206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190613261565b905080610ecc57505050611007565b610ee782848360405180602001604052806000815250611b94565b845160208601206040516303a24d0760e21b81526001600160a01b03881690630e89341c90610f1a9087906004016134de565b60006040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6e91908101906131d7565b80519060200120146110035761100383876001600160a01b0316630e89341c866040518263ffffffff1660e01b8152600401610faa91906134de565b60006040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906131d7565b611bb4565b5050505b61101081613d54565b9050610da2565b50505050565b4690565b816110338161102e611aaa565b611c34565b61104f5760405162461bcd60e51b81526004016108c690613a76565b8261105981610bbf565b156110765760405162461bcd60e51b81526004016108c6906139a7565b83611091611082611aaa565b8261108c84611c67565b611c82565b6110ad5760405162461bcd60e51b81526004016108c690613656565b6110b78585611bb4565b5050505050565b6110c96108a5611aaa565b6110e55760405162461bcd60e51b81526004016108c69061376f565b6110ed611c99565b565b606081518351146111125760405162461bcd60e51b81526004016108c690613b98565b600083516001600160401b0381111561113b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611164578160200160208202803683370190505b50905060005b8451811015611206576111cb85828151811061119657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111be57634e487b7160e01b600052603260045260246000fd5b6020026020010151610785565b8282815181106111eb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526111ff81613d54565b905061116a565b509392505050565b6000908152600b6020526040902054151590565b6000818152601260205260408120546001600160a01b03161561125d57506000818152601260205260409020546001600160a01b0316610807565b61126682611d0a565b9050610807565b6010546001600160a01b031681565b600654600160a01b900460ff1690565b611294611aaa565b6001600160a01b03166112a56113e8565b6001600160a01b0316146112cb5760405162461bcd60e51b81526004016108c6906139d6565b6110ed6000611d24565b6002600f5414156112f85760405162461bcd60e51b81526004016108c690613be1565b6002600f558261130a8161102e611aaa565b6113265760405162461bcd60e51b81526004016108c690613a76565b61133285858585611b94565b50506001600f55505050565b60116020526000908152604090205460ff1681565b61135e6108a5611aaa565b61137a5760405162461bcd60e51b81526004016108c69061376f565b6110ed611d76565b8161138f8161102e611aaa565b6113ab5760405162461bcd60e51b81526004016108c690613a76565b826113b7611082611aaa565b6113d35760405162461bcd60e51b81526004016108c690613656565b6110178484611dd7565b600061080482611c67565b6006546001600160a01b031690565b816114048161102e611aaa565b6114205760405162461bcd60e51b81526004016108c690613a76565b6001600160a01b0382166114465760405162461bcd60e51b81526004016108c69061353c565b60008381526012602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917f39071c63e44267bfdefc7b625c0df99d3ce2e6ff98d9f5e9e8a7ab43cdf5000d9190a3505050565b6009805461081990613d19565b6114b86108a5611aaa565b6114d45760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19169055565b816001600160a01b0316611507611aaa565b6001600160a01b0316141561152e5760405162461bcd60e51b81526004016108c690613b4f565b806001600061153b611aaa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561157f611aaa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b791906134d3565b60405180910390a35050565b6115ce6108a5611aaa565b6115ea5760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19166001179055565b6002600f5414156116315760405162461bcd60e51b81526004016108c690613be1565b6002600f5560005b83518110156116a35761167584828151811061166557634e487b7160e01b600052603260045260246000fd5b602002602001015161102e611aaa565b6116915760405162461bcd60e51b81526004016108c690613a76565b8061169b81613d54565b915050611639565b506116b084848484611e27565b50506001600f555050565b6000908152600b602052604090205490565b600190565b6007546001600160a01b031681565b6116ec6108a5611aaa565b6117085760405162461bcd60e51b81526004016108c69061376f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006117368383611e8c565b15611743575060016107be565b61174d8383611ebf565b9392505050565b60006117608685611a18565b9050828110156117975761177f85856117798487613cd6565b856112d5565b8015611792576117928686868486611eed565b610cce565b610cce8686868686611eed565b6117ac611aaa565b6001600160a01b03166117bd6113e8565b6001600160a01b0316146117e35760405162461bcd60e51b81526004016108c6906139d6565b6001600160a01b0381166118095760405162461bcd60e51b81526004016108c69061368d565b61181281611d24565b50565b828282611823838383611c82565b61183f5760405162461bcd60e51b81526004016108c69061370a565b610cce8686866120ae565b60005b82518110156118dd576118af8484838151811061187a57634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106118a257634e487b7160e01b600052603260045260246000fd5b6020026020010151611c82565b6118cb5760405162461bcd60e51b81526004016108c69061370a565b806118d581613d54565b91505061184d565b506118e9838383612104565b505050565b600c805461081990613d19565b60003330141561195257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610bd89050565b503390565b60075460009061196f906001600160a01b0316611a12565b61197b575060006107be565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906119b09088906004016133ab565b60206040518083038186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613189565b6001600160a01b031614949350505050565b3b151590565b60006001600160a01b038316611a405760405162461bcd60e51b81526004016108c6906135d4565b506000908152600a602090815260408083206001600160a01b03949094168352929052205490565b600061080482611ab9565b6000611a7e826116bb565b611a87836113dd565b6108049190613cd6565b6001600160e01b031981166301ffc9a760e01b14919050565b6000611ab46118fb565b905090565b6000816001600160a01b0316611acd6113e8565b6001600160a01b031614806108045750610804611ae86113e8565b83611e8c565b60006001600160a01b038616611b165760405162461bcd60e51b81526004016108c690613822565b6001611b29611b248761215a565b6121b8565b83868660405160008152602001604052604051611b49949392919061350b565b6020604051602081039080840390855afa158015611b6b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b611ba0848484846121d4565b600181511115611017576110178382611dd7565b6000815111611bd55760405162461bcd60e51b81526004016108c6906138d6565b6000828152600e60205260409020805460ff19166001179055611bf88282611dd7565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720782604051611c289190613529565b60405180910390a25050565b600080611c4084611222565b9050826001600160a01b0316816001600160a01b031614806107ba57506107ba8184611e8c565b6000611c7a600165010000000000613cd6565b909116919050565b600081611c8f8585610785565b1015949350505050565b611ca161127c565b611cbd5760405162461bcd60e51b81526004016108c690613565565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611cf3611aaa565b604051611d0091906133ab565b60405180910390a1565b6000611d1860286038613cb1565b60ff169190911c919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d7e61127c565b15611d9b5760405162461bcd60e51b81526004016108c690613867565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf3611aaa565b6000828152600d602090815260409091208251611df692840190612aa2565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051611c289190613529565b611e33848484846122f1565b6001815111156110175760005b83518110156110b757611e7a848281518110611e6c57634e487b7160e01b600052603260045260246000fd5b602002602001015183611dd7565b80611e8481613d54565b915050611e40565b6001600160a01b03811660009081526011602052604081205460ff1615611eb5575060016107be565b61174d8383611957565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b611ef561127c565b15611f125760405162461bcd60e51b81526004016108c690613867565b84611f1b611aaa565b6001600160a01b0316816001600160a01b03161480611f415750611f41816106eb611aaa565b611f5d5760405162461bcd60e51b81526004016108c690613aa4565b6001600160a01b038516611f835760405162461bcd60e51b81526004016108c690613891565b6000611f8d611aaa565b9050611fad818888611f9e8961249a565b611fa78961249a565b88610cce565b6000858152600a602090815260408083206001600160a01b038b16845290915290205484811015611ff05760405162461bcd60e51b81526004016108c69061392e565b611ffa8582613cd6565b6000878152600a602090815260408083206001600160a01b038d81168552925280832093909355891681529081208054879290612038908490613c99565b92505081905550866001600160a01b0316886001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161208e929190613c18565b60405180910390a46120a48289898989896124f3565b5050505050505050565b826120b7611aaa565b6001600160a01b0316816001600160a01b031614806120dd57506120dd816106eb611aaa565b6120f95760405162461bcd60e51b81526004016108c690613aa4565b61101784848461260a565b8261210d611aaa565b6001600160a01b0316816001600160a01b031614806121335750612133816106eb611aaa565b61214f5760405162461bcd60e51b81526004016108c690613aa4565b6110178484846127a2565b6000604051806080016040528060438152602001613e71604391398051602091820120835184830151604080870151805190860120905161219b95016134e7565b604051602081830303815290604052805190602001209050919050565b60006121c2610bd4565b8260405160200161219b929190613390565b6121dc61127c565b156121f95760405162461bcd60e51b81526004016108c690613867565b6000612203611aaa565b9050612224816000876122158861249a565b61221e8861249a565b87610cce565b61222e84846129a9565b6000848152600a602090815260408083206001600160a01b038916845290915281208054859290612260908490613c99565b90915550506000848152600b602052604081208054859290612283908490613c99565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122da929190613c18565b60405180910390a46110b7816000878787876124f3565b6122f961127c565b156123165760405162461bcd60e51b81526004016108c690613867565b81518351146123375760405162461bcd60e51b81526004016108c690613978565b82516000612343611aaa565b905061235481600088888888610cce565b60005b8281101561243257600086828151811061238157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106123ad57634e487b7160e01b600052603260045260246000fd5b602002602001015190506123c182826129a9565b6000828152600a602090815260408083206001600160a01b038d168452909152812080548392906123f3908490613c99565b90915550506000828152600b602052604081208054839290612416908490613c99565b925050819055505050808061242a90613d54565b915050612357565b50856001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb88886040516124839291906134ae565b60405180910390a4610cce816000888888886129d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124e257634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612505846001600160a01b0316611a12565b15610cce5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061253e908990899088908890889060040161343d565b602060405180830381600087803b15801561255857600080fd5b505af1925050508015612588575060408051601f3d908101601f191682019092526125859181019061316d565b60015b6125d157612594613da1565b8061259f57506125b9565b8060405162461bcd60e51b81526004016108c69190613529565b60405162461bcd60e51b81526004016108c69061361f565b6001600160e01b0319811663f23a6e6160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b50505050505050565b61261261127c565b1561262f5760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166126555760405162461bcd60e51b81526004016108c690613b1f565b600081116126755760405162461bcd60e51b81526004016108c690613741565b600061267f611aaa565b90506126af818560006126918761249a565b61269a8761249a565b60405180602001604052806000815250610cce565b6000838152600a602090815260408083206001600160a01b0388168452909152902054828110156126f25760405162461bcd60e51b81526004016108c6906138fe565b6126fc8382613cd6565b6000858152600a602090815260408083206001600160a01b038a168452825280832093909355868252600b9052908120805485929061273c908490613cd6565b9250508190555060006001600160a01b0316856001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612793929190613c18565b60405180910390a45050505050565b6127aa61127c565b156127c75760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166127ed5760405162461bcd60e51b81526004016108c690613b1f565b805182511461280e5760405162461bcd60e51b81526004016108c690613ae8565b6000612818611aaa565b905061283881856000868660405180602001604052806000815250610cce565b60005b835181101561294a57600084828151811061286657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061289257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082206001600160a01b038c1683529093529190912054909150818110156128e35760405162461bcd60e51b81526004016108c6906138fe565b6128ed8282613cd6565b6000848152600a602090815260408083206001600160a01b038d168452825280832093909355858252600b9052908120805484929061292d908490613cd6565b92505081905550505050808061294290613d54565b91505061283b565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161299b9291906134ae565b60405180910390a450505050565b6129b282611a73565b811115610c155760405162461bcd60e51b81526004016108c690613593565b6129e3846001600160a01b0316611a12565b15610cce5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a1c90899089908890889088906004016133eb565b602060405180830381600087803b158015612a3657600080fd5b505af1925050508015612a66575060408051601f3d908101601f19168201909252612a639181019061316d565b60015b612a7257612594613da1565b6001600160e01b0319811663bc197c8160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b828054612aae90613d19565b90600052602060002090601f016020900481019282612ad05760008555612b16565b82601f10612ae957805160ff1916838001178555612b16565b82800160010185558215612b16579182015b82811115612b16578251825591602001919060010190612afb565b50612b22929150612b26565b5090565b5b80821115612b225760008155600101612b27565b600082601f830112612b4b578081fd5b81356020612b60612b5b83613c4f565b613c26565b8281528181019085830183850287018401881015612b7c578586fd5b855b85811015612b9a57813584529284019290840190600101612b7e565b5090979650505050505050565b600082601f830112612bb7578081fd5b8135612bc5612b5b82613c72565b818152846020838601011115612bd9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c04578081fd5b813561174d81613e45565b60008060408385031215612c21578081fd5b8235612c2c81613e45565b91506020830135612c3c81613e45565b809150509250929050565b600080600080600060a08688031215612c5e578081fd5b8535612c6981613e45565b94506020860135612c7981613e45565b935060408601356001600160401b0380821115612c94578283fd5b612ca089838a01612b3b565b94506060880135915080821115612cb5578283fd5b612cc189838a01612b3b565b93506080880135915080821115612cd6578283fd5b50612ce388828901612ba7565b9150509295509295909350565b600080600080600060a08688031215612d07578283fd5b8535612d1281613e45565b94506020860135612d2281613e45565b9350604086013592506060860135915060808601356001600160401b03811115612d4a578182fd5b612ce388828901612ba7565b600080600060608486031215612d6a578081fd5b8335612d7581613e45565b925060208401356001600160401b0380821115612d90578283fd5b612d9c87838801612b3b565b93506040860135915080821115612db1578283fd5b50612dbe86828701612b3b565b9150509250925092565b60008060008060808587031215612ddd578182fd5b8435612de881613e45565b935060208501356001600160401b0380821115612e03578384fd5b612e0f88838901612b3b565b94506040870135915080821115612e24578384fd5b612e3088838901612b3b565b93506060870135915080821115612e45578283fd5b50612e5287828801612ba7565b91505092959194509250565b60008060408385031215612e70578182fd5b8235612e7b81613e45565b915060208301358015158114612c3c578182fd5b600080600080600060a08688031215612ea6578283fd5b8535612eb181613e45565b945060208601356001600160401b03811115612ecb578384fd5b612ed788828901612ba7565b9450506040860135925060608601359150608086013560ff81168114612efb578182fd5b809150509295509295909350565b60008060408385031215612f1b578182fd5b8235612f2681613e45565b946020939093013593505050565b600080600060608486031215612f48578081fd5b8335612f5381613e45565b95602085013595506040909401359392505050565b60008060008060808587031215612f7d578182fd5b8435612f8881613e45565b9350602085013592506040850135915060608501356001600160401b03811115612fb0578182fd5b612e5287828801612ba7565b60008060408385031215612fce578182fd5b82356001600160401b0380821115612fe4578384fd5b818501915085601f830112612ff7578384fd5b81356020613007612b5b83613c4f565b82815281810190858301838502870184018b1015613023578889fd5b8896505b8487101561304e57803561303a81613e45565b835260019690960195918301918301613027565b5096505086013592505080821115613064578283fd5b5061307185828601612b3b565b9150509250929050565b6000602080838503121561308d578182fd5b82356001600160401b03808211156130a3578384fd5b818501915085601f8301126130b6578384fd5b81356130c4612b5b82613c4f565b818152848101908486016040808502870188018b10156130e2578889fd5b8896505b848710156131425780828c0312156130fc578889fd5b8051818101818110888211171561311557613115613d85565b8252823581528883013561312881613e45565b818a015284526001969096019592870192908101906130e6565b50909998505050505050505050565b600060208284031215613162578081fd5b813561174d81613e5a565b60006020828403121561317e578081fd5b815161174d81613e5a565b60006020828403121561319a578081fd5b815161174d81613e45565b6000602082840312156131b6578081fd5b81356001600160401b038111156131cb578182fd5b6107ba84828501612ba7565b6000602082840312156131e8578081fd5b81516001600160401b038111156131fd578182fd5b8201601f8101841361320d578182fd5b805161321b612b5b82613c72565b81815285602083850101111561322f578384fd5b613240826020830160208601613ced565b95945050505050565b60006020828403121561325a578081fd5b5035919050565b600060208284031215613272578081fd5b5051919050565b6000806040838503121561328b578182fd5b823591506020830135612c3c81613e45565b600080604083850312156132af578182fd5b8235915060208301356001600160401b038111156132cb578182fd5b61307185828601612ba7565b6000815180845260208085019450808401835b83811015613306578151875295820195908201906001016132ea565b509495945050505050565b60008151808452613329816020860160208601613ced565b601f01601f19169290920160200192915050565b6000825161334f818460208701613ced565b9190910192915050565b6000835161336b818460208801613ced565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0384811682528316602082015260606040820181905260009061324090830184613311565b6001600160a01b0386811682528516602082015260a060408201819052600090613417908301866132d7565b828103606084015261342981866132d7565b90508281036080840152610a558185613311565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061347790830184613311565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b60006020825261174d60208301846132d7565b6000604082526134c160408301856132d7565b828103602084015261324081856132d7565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261174d6020830184613311565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526021908201527f5155414e544954595f455843454544535f544f4b454e5f535550504c595f43416040820152600560fc1b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252601f908201527f5472616e7366657220746f206e6f6e2045524331313535526563656976657200604082015260600190565b6020808252601d908201527f4f4e4c595f46554c4c5f544f4b454e5f4f574e45525f414c4c4f574544000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601f908201527f4f4e4c595f544f4b454e5f414d4f554e545f4f574e45445f414c4c4f57454400604082015260600190565b602080825260149082015273414d4f554e545f4c4553535f5448414e5f4f4e4560601b604082015260600190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b60208082526018908201527f5a45524f5f414444524553535f4e4f545f414c4c4f5745440000000000000000604082015260600190565b6020808252601f908201527f4552433131353552656365697665722072656a656374656420746f6b656e7300604082015260600190565b60208082526025908201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360408201526424a3a722a960d91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252600e908201526d4f4e4c595f56414c49445f55524960901b604082015260600190565b602080825260169082015275414d4f554e545f455843454544535f42414c414e434560501b604082015260600190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601590820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b604082015260600190565b60208082526015908201527415549257d0d0539393d517d09157d0d2105391d151605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b60208082526010908201526f135251d490551157d11254d05093115160821b604082015260600190565b60208082526014908201527313d3931657d0d491505513d497d0531313d5d15160621b604082015260600190565b60208082526024908201527f455243313135355472616e6461626c653a2043414c4c45525f4e4f545f414c4c60408201526313d5d15160e21b606082015260800190565b6020808252601b908201527f4944535f414d4f554e54535f4c454e4754485f4d49534d415443480000000000604082015260600190565b6020808252601690820152754255524e5f46524f4d5f5a45524f5f4144445245535360501b604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613c4757613c47613d85565b604052919050565b60006001600160401b03821115613c6857613c68613d85565b5060209081020190565b60006001600160401b03821115613c8b57613c8b613d85565b50601f01601f191660200190565b60008219821115613cac57613cac613d6f565b500190565b600060ff821660ff84168060ff03821115613cce57613cce613d6f565b019392505050565b600082821015613ce857613ce8613d6f565b500390565b60005b83811015613d08578181015183820152602001613cf0565b838111156110175750506000910152565b600281046001821680613d2d57607f821691505b60208210811415613d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d6857613d68613d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613db157610bd8565b600481823e6308c379a0613dc58251613d9b565b14613dcf57610bd8565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613dfe5750505050610bd8565b82840192508251915080821115613e185750505050610bd8565b503d83016020828401011115613e3057505050610bd8565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461181257600080fd5b6001600160e01b03198116811461181257600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220fc1f5aea4eeee2df5db9b9be6c44f54550ede2ce190013367fe005dfc634543b64736f6c63430008000033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429","deployedBytecode":"0x6080604052600436106102665760003560e01c8063731133e911610144578063b48ab8b6116100b6578063e985e9c51161007a578063e985e9c5146106d0578063f242432a146106f0578063f2fde38b14610710578063f5298aca14610730578063f6eb127a14610750578063f923e8c31461077057610266565b8063b48ab8b614610646578063bd85b03914610666578063c311c52314610686578063cd7c03261461069b578063d26ea6c0146106b057610266565b80638da5cb5b116101085780638da5cb5b1461059c57806391686f53146105b157806395d89b41146105d15780639e037eea146105e6578063a22cb46514610606578063a50aa5c31461062657610266565b8063731133e91461050757806373505d35146105275780638456cb5914610547578063862440e21461055c578063869f75941461057c57610266565b80632eb2c2d6116101dd5780634e1273f4116101a15780634e1273f41461044e5780634f558e791461047b578063510b51581461049b5780635b51acff146104c85780635c975abb146104dd578063715018a6146104f257610266565b80632eb2c2d6146103c45780632f1c982c146103e45780633408e470146104045780633588ad7c146104195780633f4ba83a1461043957610266565b80630e89341c1161022f5780630e89341c1461031a5780630f7e59701461033a5780631e7d9dbb1461034f57806320379ee51461036f57806324d88785146103845780632d0335ab146103a457610266565b8062fdd58e1461026b57806301ffc9a7146102a157806306fdde03146102ce5780630bb2465a146102f05780630c53c51c14610307575b600080fd5b34801561027757600080fd5b5061028b610286366004612f09565b610785565b60405161029891906134de565b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004613151565b6107c4565b60405161029891906134d3565b3480156102da57600080fd5b506102e361080c565b6040516102989190613529565b3480156102fc57600080fd5b5061030561089a565b005b6102e3610315366004612e8f565b6108e1565b34801561032657600080fd5b506102e3610335366004613249565b610a61565b34801561034657600080fd5b506102e3610ba2565b34801561035b57600080fd5b506102c161036a366004613249565b610bbf565b34801561037b57600080fd5b5061028b610bd4565b34801561039057600080fd5b5061030561039f3660046131a5565b610bdb565b3480156103b057600080fd5b5061028b6103bf366004612bf3565b610c19565b3480156103d057600080fd5b506103056103df366004612c47565b610c34565b3480156103f057600080fd5b506103056103ff36600461307b565b610cd6565b34801561041057600080fd5b5061028b61101d565b34801561042557600080fd5b5061030561043436600461329d565b611021565b34801561044557600080fd5b506103056110be565b34801561045a57600080fd5b5061046e610469366004612fbc565b6110ef565b604051610298919061349b565b34801561048757600080fd5b506102c1610496366004613249565b61120e565b3480156104a757600080fd5b506104bb6104b6366004613249565b611222565b60405161029891906133ab565b3480156104d457600080fd5b506104bb61126d565b3480156104e957600080fd5b506102c161127c565b3480156104fe57600080fd5b5061030561128c565b34801561051357600080fd5b50610305610522366004612f68565b6112d5565b34801561053357600080fd5b506102c1610542366004612bf3565b61133e565b34801561055357600080fd5b50610305611353565b34801561056857600080fd5b5061030561057736600461329d565b611382565b34801561058857600080fd5b5061028b610597366004613249565b6113dd565b3480156105a857600080fd5b506104bb6113e8565b3480156105bd57600080fd5b506103056105cc366004613279565b6113f7565b3480156105dd57600080fd5b506102e36114a0565b3480156105f257600080fd5b50610305610601366004612bf3565b6114ad565b34801561061257600080fd5b50610305610621366004612e5e565b6114f5565b34801561063257600080fd5b50610305610641366004612bf3565b6115c3565b34801561065257600080fd5b50610305610661366004612dc8565b61160e565b34801561067257600080fd5b5061028b610681366004613249565b6116bb565b34801561069257600080fd5b506102c16116cd565b3480156106a757600080fd5b506104bb6116d2565b3480156106bc57600080fd5b506103056106cb366004612bf3565b6116e1565b3480156106dc57600080fd5b506102c16106eb366004612c0f565b61172a565b3480156106fc57600080fd5b5061030561070b366004612cf0565b611754565b34801561071c57600080fd5b5061030561072b366004612bf3565b6117a4565b34801561073c57600080fd5b5061030561074b366004612f34565b611815565b34801561075c57600080fd5b5061030561076b366004612d56565b61184a565b34801561077c57600080fd5b506102e36118ee565b6000806107928484611a18565b905061079d84611a68565b6107a757806107ba565b6107b083611a73565b6107ba9082613c99565b9150505b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806107f557506001600160e01b031982166303a24d0760e21b145b80610804575061080482611a91565b90505b919050565b6008805461081990613d19565b80601f016020809104026020016040519081016040528092919081815260200182805461084590613d19565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505081565b6108aa6108a5611aaa565b611ab9565b6108cf5760405162461bcd60e51b81526004016108c69061376f565b60405180910390fd5b601080546001600160a01b0319169055565b60408051606081810183526001600160a01b0388166000818152600560209081529085902054845283015291810186905261091f8782878787611aee565b61093b5760405162461bcd60e51b81526004016108c690613a0b565b6001600160a01b03871660009081526005602052604090205461095f906001613c99565b6001600160a01b0388166000908152600560205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b906109af90899033908a906133bf565b60405180910390a1600080306001600160a01b0316888a6040516020016109d7929190613359565b60408051601f19818403018152908290526109f19161333d565b6000604051808303816000865af19150503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b509150915081610a555760405162461bcd60e51b81526004016108c6906136d3565b98975050505050505050565b6000818152600d6020526040812080546060929190610a7f90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610aab90613d19565b8015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b505050505090508051600014610b0f579050610807565b600c8054610b1c90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4890613d19565b8015610b955780601f10610b6a57610100808354040283529160200191610b95565b820191906000526020600020905b815481529060010190602001808311610b7857829003601f168201915b5050505050915050919050565b604051806040016040528060018152602001603160f81b81525081565b6000908152600e602052604090205460ff1690565b6004545b90565b610be66108a5611aaa565b610c025760405162461bcd60e51b81526004016108c69061376f565b8051610c1590600c906020840190612aa2565b5050565b6001600160a01b031660009081526005602052604090205490565b8151835114610c555760405162461bcd60e51b81526004016108c690613978565b60005b8351811015610cce57610cbc8686868481518110610c8657634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610cae57634e487b7160e01b600052603260045260246000fd5b602002602001015186611754565b80610cc681613d54565b915050610c58565b505050505050565b610ce16108a5611aaa565b610cfd5760405162461bcd60e51b81526004016108c69061376f565b6010546001600160a01b031680610d265760405162461bcd60e51b81526004016108c690613a4c565b6000816001600160a01b031663f923e8c36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9d91908101906131d7565b905060005b8351811015611017576000848281518110610dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015190506000858381518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905060006001600160a01b0316816001600160a01b03161415610e3e5760405162461bcd60e51b81526004016108c6906137b4565b604051627eeac760e11b81526000906001600160a01b0387169062fdd58e90610e6d9085908790600401613482565b60206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190613261565b905080610ecc57505050611007565b610ee782848360405180602001604052806000815250611b94565b845160208601206040516303a24d0760e21b81526001600160a01b03881690630e89341c90610f1a9087906004016134de565b60006040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6e91908101906131d7565b80519060200120146110035761100383876001600160a01b0316630e89341c866040518263ffffffff1660e01b8152600401610faa91906134de565b60006040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906131d7565b611bb4565b5050505b61101081613d54565b9050610da2565b50505050565b4690565b816110338161102e611aaa565b611c34565b61104f5760405162461bcd60e51b81526004016108c690613a76565b8261105981610bbf565b156110765760405162461bcd60e51b81526004016108c6906139a7565b83611091611082611aaa565b8261108c84611c67565b611c82565b6110ad5760405162461bcd60e51b81526004016108c690613656565b6110b78585611bb4565b5050505050565b6110c96108a5611aaa565b6110e55760405162461bcd60e51b81526004016108c69061376f565b6110ed611c99565b565b606081518351146111125760405162461bcd60e51b81526004016108c690613b98565b600083516001600160401b0381111561113b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611164578160200160208202803683370190505b50905060005b8451811015611206576111cb85828151811061119657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111be57634e487b7160e01b600052603260045260246000fd5b6020026020010151610785565b8282815181106111eb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526111ff81613d54565b905061116a565b509392505050565b6000908152600b6020526040902054151590565b6000818152601260205260408120546001600160a01b03161561125d57506000818152601260205260409020546001600160a01b0316610807565b61126682611d0a565b9050610807565b6010546001600160a01b031681565b600654600160a01b900460ff1690565b611294611aaa565b6001600160a01b03166112a56113e8565b6001600160a01b0316146112cb5760405162461bcd60e51b81526004016108c6906139d6565b6110ed6000611d24565b6002600f5414156112f85760405162461bcd60e51b81526004016108c690613be1565b6002600f558261130a8161102e611aaa565b6113265760405162461bcd60e51b81526004016108c690613a76565b61133285858585611b94565b50506001600f55505050565b60116020526000908152604090205460ff1681565b61135e6108a5611aaa565b61137a5760405162461bcd60e51b81526004016108c69061376f565b6110ed611d76565b8161138f8161102e611aaa565b6113ab5760405162461bcd60e51b81526004016108c690613a76565b826113b7611082611aaa565b6113d35760405162461bcd60e51b81526004016108c690613656565b6110178484611dd7565b600061080482611c67565b6006546001600160a01b031690565b816114048161102e611aaa565b6114205760405162461bcd60e51b81526004016108c690613a76565b6001600160a01b0382166114465760405162461bcd60e51b81526004016108c69061353c565b60008381526012602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917f39071c63e44267bfdefc7b625c0df99d3ce2e6ff98d9f5e9e8a7ab43cdf5000d9190a3505050565b6009805461081990613d19565b6114b86108a5611aaa565b6114d45760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19169055565b816001600160a01b0316611507611aaa565b6001600160a01b0316141561152e5760405162461bcd60e51b81526004016108c690613b4f565b806001600061153b611aaa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561157f611aaa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b791906134d3565b60405180910390a35050565b6115ce6108a5611aaa565b6115ea5760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19166001179055565b6002600f5414156116315760405162461bcd60e51b81526004016108c690613be1565b6002600f5560005b83518110156116a35761167584828151811061166557634e487b7160e01b600052603260045260246000fd5b602002602001015161102e611aaa565b6116915760405162461bcd60e51b81526004016108c690613a76565b8061169b81613d54565b915050611639565b506116b084848484611e27565b50506001600f555050565b6000908152600b602052604090205490565b600190565b6007546001600160a01b031681565b6116ec6108a5611aaa565b6117085760405162461bcd60e51b81526004016108c69061376f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006117368383611e8c565b15611743575060016107be565b61174d8383611ebf565b9392505050565b60006117608685611a18565b9050828110156117975761177f85856117798487613cd6565b856112d5565b8015611792576117928686868486611eed565b610cce565b610cce8686868686611eed565b6117ac611aaa565b6001600160a01b03166117bd6113e8565b6001600160a01b0316146117e35760405162461bcd60e51b81526004016108c6906139d6565b6001600160a01b0381166118095760405162461bcd60e51b81526004016108c69061368d565b61181281611d24565b50565b828282611823838383611c82565b61183f5760405162461bcd60e51b81526004016108c69061370a565b610cce8686866120ae565b60005b82518110156118dd576118af8484838151811061187a57634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106118a257634e487b7160e01b600052603260045260246000fd5b6020026020010151611c82565b6118cb5760405162461bcd60e51b81526004016108c69061370a565b806118d581613d54565b91505061184d565b506118e9838383612104565b505050565b600c805461081990613d19565b60003330141561195257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610bd89050565b503390565b60075460009061196f906001600160a01b0316611a12565b61197b575060006107be565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906119b09088906004016133ab565b60206040518083038186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613189565b6001600160a01b031614949350505050565b3b151590565b60006001600160a01b038316611a405760405162461bcd60e51b81526004016108c6906135d4565b506000908152600a602090815260408083206001600160a01b03949094168352929052205490565b600061080482611ab9565b6000611a7e826116bb565b611a87836113dd565b6108049190613cd6565b6001600160e01b031981166301ffc9a760e01b14919050565b6000611ab46118fb565b905090565b6000816001600160a01b0316611acd6113e8565b6001600160a01b031614806108045750610804611ae86113e8565b83611e8c565b60006001600160a01b038616611b165760405162461bcd60e51b81526004016108c690613822565b6001611b29611b248761215a565b6121b8565b83868660405160008152602001604052604051611b49949392919061350b565b6020604051602081039080840390855afa158015611b6b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b611ba0848484846121d4565b600181511115611017576110178382611dd7565b6000815111611bd55760405162461bcd60e51b81526004016108c6906138d6565b6000828152600e60205260409020805460ff19166001179055611bf88282611dd7565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720782604051611c289190613529565b60405180910390a25050565b600080611c4084611222565b9050826001600160a01b0316816001600160a01b031614806107ba57506107ba8184611e8c565b6000611c7a600165010000000000613cd6565b909116919050565b600081611c8f8585610785565b1015949350505050565b611ca161127c565b611cbd5760405162461bcd60e51b81526004016108c690613565565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611cf3611aaa565b604051611d0091906133ab565b60405180910390a1565b6000611d1860286038613cb1565b60ff169190911c919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d7e61127c565b15611d9b5760405162461bcd60e51b81526004016108c690613867565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf3611aaa565b6000828152600d602090815260409091208251611df692840190612aa2565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051611c289190613529565b611e33848484846122f1565b6001815111156110175760005b83518110156110b757611e7a848281518110611e6c57634e487b7160e01b600052603260045260246000fd5b602002602001015183611dd7565b80611e8481613d54565b915050611e40565b6001600160a01b03811660009081526011602052604081205460ff1615611eb5575060016107be565b61174d8383611957565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b611ef561127c565b15611f125760405162461bcd60e51b81526004016108c690613867565b84611f1b611aaa565b6001600160a01b0316816001600160a01b03161480611f415750611f41816106eb611aaa565b611f5d5760405162461bcd60e51b81526004016108c690613aa4565b6001600160a01b038516611f835760405162461bcd60e51b81526004016108c690613891565b6000611f8d611aaa565b9050611fad818888611f9e8961249a565b611fa78961249a565b88610cce565b6000858152600a602090815260408083206001600160a01b038b16845290915290205484811015611ff05760405162461bcd60e51b81526004016108c69061392e565b611ffa8582613cd6565b6000878152600a602090815260408083206001600160a01b038d81168552925280832093909355891681529081208054879290612038908490613c99565b92505081905550866001600160a01b0316886001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161208e929190613c18565b60405180910390a46120a48289898989896124f3565b5050505050505050565b826120b7611aaa565b6001600160a01b0316816001600160a01b031614806120dd57506120dd816106eb611aaa565b6120f95760405162461bcd60e51b81526004016108c690613aa4565b61101784848461260a565b8261210d611aaa565b6001600160a01b0316816001600160a01b031614806121335750612133816106eb611aaa565b61214f5760405162461bcd60e51b81526004016108c690613aa4565b6110178484846127a2565b6000604051806080016040528060438152602001613e71604391398051602091820120835184830151604080870151805190860120905161219b95016134e7565b604051602081830303815290604052805190602001209050919050565b60006121c2610bd4565b8260405160200161219b929190613390565b6121dc61127c565b156121f95760405162461bcd60e51b81526004016108c690613867565b6000612203611aaa565b9050612224816000876122158861249a565b61221e8861249a565b87610cce565b61222e84846129a9565b6000848152600a602090815260408083206001600160a01b038916845290915281208054859290612260908490613c99565b90915550506000848152600b602052604081208054859290612283908490613c99565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122da929190613c18565b60405180910390a46110b7816000878787876124f3565b6122f961127c565b156123165760405162461bcd60e51b81526004016108c690613867565b81518351146123375760405162461bcd60e51b81526004016108c690613978565b82516000612343611aaa565b905061235481600088888888610cce565b60005b8281101561243257600086828151811061238157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106123ad57634e487b7160e01b600052603260045260246000fd5b602002602001015190506123c182826129a9565b6000828152600a602090815260408083206001600160a01b038d168452909152812080548392906123f3908490613c99565b90915550506000828152600b602052604081208054839290612416908490613c99565b925050819055505050808061242a90613d54565b915050612357565b50856001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb88886040516124839291906134ae565b60405180910390a4610cce816000888888886129d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124e257634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612505846001600160a01b0316611a12565b15610cce5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061253e908990899088908890889060040161343d565b602060405180830381600087803b15801561255857600080fd5b505af1925050508015612588575060408051601f3d908101601f191682019092526125859181019061316d565b60015b6125d157612594613da1565b8061259f57506125b9565b8060405162461bcd60e51b81526004016108c69190613529565b60405162461bcd60e51b81526004016108c69061361f565b6001600160e01b0319811663f23a6e6160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b50505050505050565b61261261127c565b1561262f5760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166126555760405162461bcd60e51b81526004016108c690613b1f565b600081116126755760405162461bcd60e51b81526004016108c690613741565b600061267f611aaa565b90506126af818560006126918761249a565b61269a8761249a565b60405180602001604052806000815250610cce565b6000838152600a602090815260408083206001600160a01b0388168452909152902054828110156126f25760405162461bcd60e51b81526004016108c6906138fe565b6126fc8382613cd6565b6000858152600a602090815260408083206001600160a01b038a168452825280832093909355868252600b9052908120805485929061273c908490613cd6565b9250508190555060006001600160a01b0316856001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612793929190613c18565b60405180910390a45050505050565b6127aa61127c565b156127c75760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166127ed5760405162461bcd60e51b81526004016108c690613b1f565b805182511461280e5760405162461bcd60e51b81526004016108c690613ae8565b6000612818611aaa565b905061283881856000868660405180602001604052806000815250610cce565b60005b835181101561294a57600084828151811061286657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061289257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082206001600160a01b038c1683529093529190912054909150818110156128e35760405162461bcd60e51b81526004016108c6906138fe565b6128ed8282613cd6565b6000848152600a602090815260408083206001600160a01b038d168452825280832093909355858252600b9052908120805484929061292d908490613cd6565b92505081905550505050808061294290613d54565b91505061283b565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161299b9291906134ae565b60405180910390a450505050565b6129b282611a73565b811115610c155760405162461bcd60e51b81526004016108c690613593565b6129e3846001600160a01b0316611a12565b15610cce5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a1c90899089908890889088906004016133eb565b602060405180830381600087803b158015612a3657600080fd5b505af1925050508015612a66575060408051601f3d908101601f19168201909252612a639181019061316d565b60015b612a7257612594613da1565b6001600160e01b0319811663bc197c8160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b828054612aae90613d19565b90600052602060002090601f016020900481019282612ad05760008555612b16565b82601f10612ae957805160ff1916838001178555612b16565b82800160010185558215612b16579182015b82811115612b16578251825591602001919060010190612afb565b50612b22929150612b26565b5090565b5b80821115612b225760008155600101612b27565b600082601f830112612b4b578081fd5b81356020612b60612b5b83613c4f565b613c26565b8281528181019085830183850287018401881015612b7c578586fd5b855b85811015612b9a57813584529284019290840190600101612b7e565b5090979650505050505050565b600082601f830112612bb7578081fd5b8135612bc5612b5b82613c72565b818152846020838601011115612bd9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c04578081fd5b813561174d81613e45565b60008060408385031215612c21578081fd5b8235612c2c81613e45565b91506020830135612c3c81613e45565b809150509250929050565b600080600080600060a08688031215612c5e578081fd5b8535612c6981613e45565b94506020860135612c7981613e45565b935060408601356001600160401b0380821115612c94578283fd5b612ca089838a01612b3b565b94506060880135915080821115612cb5578283fd5b612cc189838a01612b3b565b93506080880135915080821115612cd6578283fd5b50612ce388828901612ba7565b9150509295509295909350565b600080600080600060a08688031215612d07578283fd5b8535612d1281613e45565b94506020860135612d2281613e45565b9350604086013592506060860135915060808601356001600160401b03811115612d4a578182fd5b612ce388828901612ba7565b600080600060608486031215612d6a578081fd5b8335612d7581613e45565b925060208401356001600160401b0380821115612d90578283fd5b612d9c87838801612b3b565b93506040860135915080821115612db1578283fd5b50612dbe86828701612b3b565b9150509250925092565b60008060008060808587031215612ddd578182fd5b8435612de881613e45565b935060208501356001600160401b0380821115612e03578384fd5b612e0f88838901612b3b565b94506040870135915080821115612e24578384fd5b612e3088838901612b3b565b93506060870135915080821115612e45578283fd5b50612e5287828801612ba7565b91505092959194509250565b60008060408385031215612e70578182fd5b8235612e7b81613e45565b915060208301358015158114612c3c578182fd5b600080600080600060a08688031215612ea6578283fd5b8535612eb181613e45565b945060208601356001600160401b03811115612ecb578384fd5b612ed788828901612ba7565b9450506040860135925060608601359150608086013560ff81168114612efb578182fd5b809150509295509295909350565b60008060408385031215612f1b578182fd5b8235612f2681613e45565b946020939093013593505050565b600080600060608486031215612f48578081fd5b8335612f5381613e45565b95602085013595506040909401359392505050565b60008060008060808587031215612f7d578182fd5b8435612f8881613e45565b9350602085013592506040850135915060608501356001600160401b03811115612fb0578182fd5b612e5287828801612ba7565b60008060408385031215612fce578182fd5b82356001600160401b0380821115612fe4578384fd5b818501915085601f830112612ff7578384fd5b81356020613007612b5b83613c4f565b82815281810190858301838502870184018b1015613023578889fd5b8896505b8487101561304e57803561303a81613e45565b835260019690960195918301918301613027565b5096505086013592505080821115613064578283fd5b5061307185828601612b3b565b9150509250929050565b6000602080838503121561308d578182fd5b82356001600160401b03808211156130a3578384fd5b818501915085601f8301126130b6578384fd5b81356130c4612b5b82613c4f565b818152848101908486016040808502870188018b10156130e2578889fd5b8896505b848710156131425780828c0312156130fc578889fd5b8051818101818110888211171561311557613115613d85565b8252823581528883013561312881613e45565b818a015284526001969096019592870192908101906130e6565b50909998505050505050505050565b600060208284031215613162578081fd5b813561174d81613e5a565b60006020828403121561317e578081fd5b815161174d81613e5a565b60006020828403121561319a578081fd5b815161174d81613e45565b6000602082840312156131b6578081fd5b81356001600160401b038111156131cb578182fd5b6107ba84828501612ba7565b6000602082840312156131e8578081fd5b81516001600160401b038111156131fd578182fd5b8201601f8101841361320d578182fd5b805161321b612b5b82613c72565b81815285602083850101111561322f578384fd5b613240826020830160208601613ced565b95945050505050565b60006020828403121561325a578081fd5b5035919050565b600060208284031215613272578081fd5b5051919050565b6000806040838503121561328b578182fd5b823591506020830135612c3c81613e45565b600080604083850312156132af578182fd5b8235915060208301356001600160401b038111156132cb578182fd5b61307185828601612ba7565b6000815180845260208085019450808401835b83811015613306578151875295820195908201906001016132ea565b509495945050505050565b60008151808452613329816020860160208601613ced565b601f01601f19169290920160200192915050565b6000825161334f818460208701613ced565b9190910192915050565b6000835161336b818460208801613ced565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0384811682528316602082015260606040820181905260009061324090830184613311565b6001600160a01b0386811682528516602082015260a060408201819052600090613417908301866132d7565b828103606084015261342981866132d7565b90508281036080840152610a558185613311565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061347790830184613311565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b60006020825261174d60208301846132d7565b6000604082526134c160408301856132d7565b828103602084015261324081856132d7565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261174d6020830184613311565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526021908201527f5155414e544954595f455843454544535f544f4b454e5f535550504c595f43416040820152600560fc1b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252601f908201527f5472616e7366657220746f206e6f6e2045524331313535526563656976657200604082015260600190565b6020808252601d908201527f4f4e4c595f46554c4c5f544f4b454e5f4f574e45525f414c4c4f574544000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601f908201527f4f4e4c595f544f4b454e5f414d4f554e545f4f574e45445f414c4c4f57454400604082015260600190565b602080825260149082015273414d4f554e545f4c4553535f5448414e5f4f4e4560601b604082015260600190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b60208082526018908201527f5a45524f5f414444524553535f4e4f545f414c4c4f5745440000000000000000604082015260600190565b6020808252601f908201527f4552433131353552656365697665722072656a656374656420746f6b656e7300604082015260600190565b60208082526025908201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360408201526424a3a722a960d91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252600e908201526d4f4e4c595f56414c49445f55524960901b604082015260600190565b602080825260169082015275414d4f554e545f455843454544535f42414c414e434560501b604082015260600190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601590820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b604082015260600190565b60208082526015908201527415549257d0d0539393d517d09157d0d2105391d151605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b60208082526010908201526f135251d490551157d11254d05093115160821b604082015260600190565b60208082526014908201527313d3931657d0d491505513d497d0531313d5d15160621b604082015260600190565b60208082526024908201527f455243313135355472616e6461626c653a2043414c4c45525f4e4f545f414c4c60408201526313d5d15160e21b606082015260800190565b6020808252601b908201527f4944535f414d4f554e54535f4c454e4754485f4d49534d415443480000000000604082015260600190565b6020808252601690820152754255524e5f46524f4d5f5a45524f5f4144445245535360501b604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613c4757613c47613d85565b604052919050565b60006001600160401b03821115613c6857613c68613d85565b5060209081020190565b60006001600160401b03821115613c8b57613c8b613d85565b50601f01601f191660200190565b60008219821115613cac57613cac613d6f565b500190565b600060ff821660ff84168060ff03821115613cce57613cce613d6f565b019392505050565b600082821015613ce857613ce8613d6f565b500390565b60005b83811015613d08578181015183820152602001613cf0565b838111156110175750506000910152565b600281046001821680613d2d57607f821691505b60208210811415613d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d6857613d68613d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613db157610bd8565b600481823e6308c379a0613dc58251613d9b565b14613dcf57610bd8565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613dfe5750505050610bd8565b82840192508251915080821115613e185750505050610bd8565b503d83016020828401011115613e3057505050610bd8565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461181257600080fd5b6001600160e01b03198116811461181257600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220fc1f5aea4eeee2df5db9b9be6c44f54550ede2ce190013367fe005dfc634543b64736f6c63430008000033","libraries":{},"devdoc":{"kind":"dev","methods":{"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"batchBurn(address,uint256[],uint256[])":{"details":"Burns tokens for each id in _ids","params":{"_from":"The address to burn tokens from","_ids":"Array of token ids to burn","_quantities":"Array of the amount to be burned"}},"batchMint(address,uint256[],uint256[],bytes)":{"details":"Mint tokens for each id in _ids","params":{"_data":"Data to pass if receiver is contract","_ids":"Array of ids to mint","_quantities":"Array of amounts of tokens to mint per id","_to":"The address to mint tokens to"}},"burn(address,uint256,uint256)":{"details":"Burns amount of a given token id","params":{"_from":"The address to burn tokens from","_id":"Token ID to burn","_quantity":"Amount to burn"}},"exists(uint256)":{"details":"Returns whether the specified token is minted"},"mint(address,uint256,uint256,bytes)":{"details":"Mints some amount of tokens to an address","params":{"_data":"Data to pass if receiver is contract","_id":"Token ID to mint","_quantity":"Amount of tokens to mint","_to":"Address of the future owner of the token"}},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Return true if the contract is paused, and false otherwise"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply(uint256)":{"details":"Returns the total quantity for a token ID","params":{"_id":"Id of token to query"},"returns":{"_0":"Amount of token in existence"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7145,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":7151,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":7153,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"inited","offset":0,"slot":"3","type":"t_bool"},{"astId":2642,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"domainSeperator","offset":0,"slot":"4","type":"t_bytes32"},{"astId":2781,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"nonces","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":7,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":9009,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_paused","offset":20,"slot":"6","type":"t_bool"},{"astId":134,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"proxyRegistryAddress","offset":0,"slot":"7","type":"t_address"},{"astId":136,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"name","offset":0,"slot":"8","type":"t_string_storage"},{"astId":138,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"symbol","offset":0,"slot":"9","type":"t_string_storage"},{"astId":144,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"balances","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":148,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_supply","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1341,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"templateURI","offset":0,"slot":"12","type":"t_string_storage"},{"astId":1345,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_tokenURI","offset":0,"slot":"13","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":1349,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_isPermanentURI","offset":0,"slot":"14","type":"t_mapping(t_uint256,t_bool)"},{"astId":9098,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_status","offset":0,"slot":"15","type":"t_uint256"},{"astId":1961,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"migrationTarget","offset":0,"slot":"16","type":"t_contract(ForbitswapNFTSAssetShared)2492"},{"astId":1965,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"sharedProxyAddresses","offset":0,"slot":"17","type":"t_mapping(t_address,t_bool)"},{"astId":1974,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_creatorOverride","offset":0,"slot":"18","type":"t_mapping(t_uint256,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(ForbitswapNFTSAssetShared)2492":{"encoding":"inplace","label":"contract ForbitswapNFTSAssetShared","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},1850:function(e){e.exports=JSON.parse('{"address":"0x9249a8B74567ea6010607D4444A97eB5D169a171","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"baseURI","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_baseTokenURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"tokensOfOwner","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}')},1875:function(e,n,t){"use strict";t.d(n,"a",(function(){return j}));var a=t(8),r=t(21),i=t(453),s=t(1761),o=t(1776),c=t(1762),d=t(1854),b=t.n(d),u=t(0),l=t(1898),f=t(1811),p=t.n(f),m=t(126),y=t(33),h=Object(y.a)("div")({overflow:"hidden"}),g=Object(y.a)("div")({outline:"none",overflow:"hidden",zIndex:0,width:"100%",height:"100%",position:"relative",display:"flex",alignItems:"center",justifyContent:"center","& > *":{width:"100%",height:"100%"},"&:hover":{cursor:"pointer"},".Player":{objectFit:"contain"}}),v=Object(y.a)("div")({width:300,height:300,display:"flex",alignItems:"center",justifyContent:"center",borderRadius:"unset !important"}),_=Object(y.a)("div")({width:"100%",height:50,display:"flex",justifyContent:"center",alignItems:"center","&:hover":{cursor:"pointer",backgroundColor:"black",opacity:.4}}),O=t.p+"static/media/image-input-default.c9bf64ec.webp",w=t(2),T=["error","file","caption","sx"];function j(e){var n=e.error,t=e.file,d=(e.caption,e.sx),f=Object(i.a)(e,T),y=Object(u.useState)(""),j=Object(r.a)(y,2),x=j[0],S=j[1],C=Object(l.a)(Object(a.a)({multiple:!1},f)),I=C.getRootProps,R=C.getInputProps,k=C.isDragActive,A=C.isDragReject,E=C.fileRejections;Object(u.useEffect)((function(){if(t){var e=Object(m.s)(t);S(e)}}),[t]);var M=function(){return Object(w.jsx)(s.a,{children:E.map((function(e){var n=e.file,t=(e.errors,n.path),a=n.size;return Object(w.jsxs)(s.a,{sx:{my:1},children:[Object(w.jsxs)(o.a,{variant:"body1",noWrap:!0,children:[t," - ",Object(m.j)(a)]}),Object(w.jsx)(o.a,{variant:"body1",noWrap:!0,sx:{color:"red"},children:"File is larger than 50MB"})]},t)}))})};return Object(w.jsxs)(h,{sx:d,children:[Object(w.jsxs)(g,Object(a.a)(Object(a.a)({},I()),{},{sx:Object(a.a)(Object(a.a)({},k&&{opacity:.72}),(A||n)&&{color:"red"}),children:[Object(w.jsx)("input",Object(a.a)(Object(a.a)({},R()),{},{style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",opacity:0,cursor:"pointer"}})),t?Object(w.jsx)(u.Fragment,{children:"mp4"===x||"mp3"===x?Object(w.jsxs)(c.a,{sx:{width:"100%"},children:["mp3"===x&&Object(w.jsx)(_,{children:"Change"}),Object(w.jsx)(p.a,{url:b()(t)?t:t.preview,className:"Player",muted:!0,playing:!0,loop:!0,controls:!0,width:"100%",height:"mp3"===x?50:"100%"})]}):Object(w.jsx)(s.a,{component:"img",alt:"avatar",src:b()(t)?t:t.preview,sx:{zIndex:8,objectFit:"cover"}})}):Object(w.jsx)(v,{children:Object(w.jsx)("img",{src:O,className:"placeholder-img",alt:"default",width:80,height:80})})]})),E.length>0&&Object(w.jsx)(M,{})]})}},1912:function(e,n,t){"use strict";var a=t(229),r={uploadItemMedia:function(e){return a.a.post("/items/upload",e)},uploadItemPreviewMedia:function(e){return a.a.post("/items/uploadPreview",e)},uploadCollectionMedia:function(e){return a.a.post("/collections/upload",e)},uploadUserMedia:function(e,n){return a.a.post("/users/upload",e)}};n.a=r},1913:function(e,n,t){"use strict";t.d(n,"a",(function(){return c}));var a=t(35),r=t(1),i=t.n(r),s=t(1790),o=t(446);function c(e,n){return function(){var t=Object(a.a)(i.a.mark((function t(a,r){var c;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return a(Object(o.f)()),t.prev=1,t.next=4,s.a.getDetailNftItemById(e);case 4:c=t.sent,a(Object(o.b)(c)),t.next=11;break;case 8:t.prev=8,t.t0=t.catch(1),a(Object(o.c)(t.t0));case 11:return t.prev=11,n&&n(r()),t.finish(11);case 14:case"end":return t.stop()}}),t,null,[[1,8,11,14]])})));return function(e,n){return t.apply(this,arguments)}}()}},1981:function(e,n,t){"use strict";t.d(n,"a",(function(){return l}));var a=t(35),r=t(1),i=t.n(r),s=t(164),o=t(128),c=t(1849),d=t(1850),b=t(1790),u=t(126);function l(){var e=function(){var e=Object(a.a)(i.a.mark((function e(n,t){var a,r,d,b,u,l,f;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=n.itemTokenId,r=n.itemStandard,d=n.collectionAddress,b=n.userAddress,u=n.web3,e.prev=1,!r.includes("721")){e.next=4;break}return e.abrupt("return",!0);case 4:return l=Object(o.a)(c.abi,d),f=!1,e.next=8,l.methods.exists(a).call().then((function(e){f=e}));case 8:if(f){e.next=15;break}if(!t){e.next=13;break}return e.abrupt("return",!1);case 13:return e.next=15,l.methods.mint(b,a,1,u.utils.asciiToHex("")).send({from:b}).then((function(e){console.log("Result after mint item: ",e)}));case 15:return e.abrupt("return",!0);case 18:return e.prev=18,e.t0=e.catch(1),t?s.b.error("Some error occur when checking item is mint or not!"):s.b.error("Some error occur when minting item!"),console.log(e.t0),e.abrupt("return",!1);case 23:case"end":return e.stop()}}),e,null,[[1,18]])})));return function(n,t){return e.apply(this,arguments)}}(),n=function(){var e=Object(a.a)(i.a.mark((function e(n){var t,a,r,l,f,p,m,y,h;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.itemId,a=n.itemStandard,r=n.collectionAddress,l=n.userAddress,e.prev=1,f=null,f=a.includes("1155")?Object(o.a)(c.abi,r):Object(o.a)(d.abi,r),e.next=6,b.a.getDataForFreezeNft(t);case 6:return p=e.sent,m=p.cid,y=p.tokenId,h=u.b+m,e.next=11,f.methods.setURI(y,h).send({from:l}).then((function(e){console.log("Result after freeze item: ",e)}));case 11:return e.next=13,b.a.freezeNft(t,l,h);case 13:return e.abrupt("return",!0);case 16:return e.prev=16,e.t0=e.catch(1),s.b.error("Some error occur when freeze item!"),console.log(e.t0),e.abrupt("return",!1);case 21:case"end":return e.stop()}}),e,null,[[1,16]])})));return function(n){return e.apply(this,arguments)}}();return{MintItem:e,FreezeItem:n}}},1982:function(e,n,t){"use strict";(function(e){var a=t(761),r=t(0),i=t.n(r),s=t(1983),o=t.n(s),c=t(1984),d=t(477),b=t(2067),u=t(156),l=t.n(u);function f(){return(f=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var p=function(e,n){for(var t=[e[0]],a=0,r=n.length;a<r;a+=1)t.push(n[a],e[a+1]);return t},m=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!Object(a.typeOf)(e)},y=Object.freeze([]),h=Object.freeze({});function g(e){return"function"==typeof e}function v(e){return e.displayName||e.name||"Component"}function _(e){return e&&"string"==typeof e.styledComponentId}var O="undefined"!=typeof e&&(Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).REACT_APP_SC_ATTR||Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).SC_ATTR)||"data-styled",w="undefined"!=typeof window&&"HTMLElement"in window,T=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof e&&void 0!==Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).REACT_APP_SC_DISABLE_SPEEDY&&""!==Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).REACT_APP_SC_DISABLE_SPEEDY?"false"!==Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).REACT_APP_SC_DISABLE_SPEEDY&&Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof e&&void 0!==Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).SC_DISABLE_SPEEDY&&""!==Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).SC_DISABLE_SPEEDY&&("false"!==Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).SC_DISABLE_SPEEDY&&Object({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0,REACT_APP_CHAIN_ID:"",REACT_APP_NETWORK_URL:""}).SC_DISABLE_SPEEDY));function j(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),a=1;a<n;a++)t[a-1]=arguments[a];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(t.length>0?" Args: "+t.join(", "):""))}var x=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var n=e.prototype;return n.indexOfGroup=function(e){for(var n=0,t=0;t<e;t++)n+=this.groupSizes[t];return n},n.insertRules=function(e,n){if(e>=this.groupSizes.length){for(var t=this.groupSizes,a=t.length,r=a;e>=r;)(r<<=1)<0&&j(16,""+e);this.groupSizes=new Uint32Array(r),this.groupSizes.set(t),this.length=r;for(var i=a;i<r;i++)this.groupSizes[i]=0}for(var s=this.indexOfGroup(e+1),o=0,c=n.length;o<c;o++)this.tag.insertRule(s,n[o])&&(this.groupSizes[e]++,s++)},n.clearGroup=function(e){if(e<this.length){var n=this.groupSizes[e],t=this.indexOfGroup(e),a=t+n;this.groupSizes[e]=0;for(var r=t;r<a;r++)this.tag.deleteRule(t)}},n.getGroup=function(e){var n="";if(e>=this.length||0===this.groupSizes[e])return n;for(var t=this.groupSizes[e],a=this.indexOfGroup(e),r=a+t,i=a;i<r;i++)n+=this.tag.getRule(i)+"/*!sc*/\n";return n},e}(),S=new Map,C=new Map,I=1,R=function(e){if(S.has(e))return S.get(e);for(;C.has(I);)I++;var n=I++;return S.set(e,n),C.set(n,e),n},k=function(e){return C.get(e)},A=function(e,n){n>=I&&(I=n+1),S.set(e,n),C.set(n,e)},E="style["+O+'][data-styled-version="5.3.3"]',M=new RegExp("^"+O+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),P=function(e,n,t){for(var a,r=t.split(","),i=0,s=r.length;i<s;i++)(a=r[i])&&e.registerName(n,a)},F=function(e,n){for(var t=(n.textContent||"").split("/*!sc*/\n"),a=[],r=0,i=t.length;r<i;r++){var s=t[r].trim();if(s){var o=s.match(M);if(o){var c=0|parseInt(o[1],10),d=o[2];0!==c&&(A(d,c),P(e,d,o[3]),e.getTag().insertRules(c,a)),a.length=0}else a.push(s)}}},N=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},D=function(e){var n=document.head,t=e||n,a=document.createElement("style"),r=function(e){for(var n=e.childNodes,t=n.length;t>=0;t--){var a=n[t];if(a&&1===a.nodeType&&a.hasAttribute(O))return a}}(t),i=void 0!==r?r.nextSibling:null;a.setAttribute(O,"active"),a.setAttribute("data-styled-version","5.3.3");var s=N();return s&&a.setAttribute("nonce",s),t.insertBefore(a,i),a},B=function(){function e(e){var n=this.element=D(e);n.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var n=document.styleSheets,t=0,a=n.length;t<a;t++){var r=n[t];if(r.ownerNode===e)return r}j(17)}(n),this.length=0}var n=e.prototype;return n.insertRule=function(e,n){try{return this.sheet.insertRule(n,e),this.length++,!0}catch(e){return!1}},n.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},n.getRule=function(e){var n=this.sheet.cssRules[e];return void 0!==n&&"string"==typeof n.cssText?n.cssText:""},e}(),q=function(){function e(e){var n=this.element=D(e);this.nodes=n.childNodes,this.length=0}var n=e.prototype;return n.insertRule=function(e,n){if(e<=this.length&&e>=0){var t=document.createTextNode(n),a=this.nodes[e];return this.element.insertBefore(t,a||null),this.length++,!0}return!1},n.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},n.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U=function(){function e(e){this.rules=[],this.length=0}var n=e.prototype;return n.insertRule=function(e,n){return e<=this.length&&(this.rules.splice(e,0,n),this.length++,!0)},n.deleteRule=function(e){this.rules.splice(e,1),this.length--},n.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),L=w,z={isServer:!w,useCSSOMInjection:!T},H=function(){function e(e,n,t){void 0===e&&(e=h),void 0===n&&(n={}),this.options=f({},z,{},e),this.gs=n,this.names=new Map(t),this.server=!!e.isServer,!this.server&&w&&L&&(L=!1,function(e){for(var n=document.querySelectorAll(E),t=0,a=n.length;t<a;t++){var r=n[t];r&&"active"!==r.getAttribute(O)&&(F(e,r),r.parentNode&&r.parentNode.removeChild(r))}}(this))}e.registerId=function(e){return R(e)};var n=e.prototype;return n.reconstructWithOptions=function(n,t){return void 0===t&&(t=!0),new e(f({},this.options,{},n),this.gs,t&&this.names||void 0)},n.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},n.getTag=function(){return this.tag||(this.tag=(t=(n=this.options).isServer,a=n.useCSSOMInjection,r=n.target,e=t?new U(r):a?new B(r):new q(r),new x(e)));var e,n,t,a,r},n.hasNameForId=function(e,n){return this.names.has(e)&&this.names.get(e).has(n)},n.registerName=function(e,n){if(R(e),this.names.has(e))this.names.get(e).add(n);else{var t=new Set;t.add(n),this.names.set(e,t)}},n.insertRules=function(e,n,t){this.registerName(e,n),this.getTag().insertRules(R(e),t)},n.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},n.clearRules=function(e){this.getTag().clearGroup(R(e)),this.clearNames(e)},n.clearTag=function(){this.tag=void 0},n.toString=function(){return function(e){for(var n=e.getTag(),t=n.length,a="",r=0;r<t;r++){var i=k(r);if(void 0!==i){var s=e.names.get(i),o=n.getGroup(r);if(s&&o&&s.size){var c=O+".g"+r+'[id="'+i+'"]',d="";void 0!==s&&s.forEach((function(e){e.length>0&&(d+=e+",")})),a+=""+o+c+'{content:"'+d+'"}/*!sc*/\n'}}}return a}(this)},e}(),W=/(a)(d)/gi,K=function(e){return String.fromCharCode(e+(e>25?39:97))};function V(e){var n,t="";for(n=Math.abs(e);n>52;n=n/52|0)t=K(n%52)+t;return(K(n%52)+t).replace(W,"$1-$2")}var Y=function(e,n){for(var t=n.length;t;)e=33*e^n.charCodeAt(--t);return e},X=function(e){return Y(5381,e)};function G(e){for(var n=0;n<e.length;n+=1){var t=e[n];if(g(t)&&!_(t))return!1}return!0}var $=X("5.3.3"),J=function(){function e(e,n,t){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===t||t.isStatic)&&G(e),this.componentId=n,this.baseHash=Y($,n),this.baseStyle=t,H.registerId(n)}return e.prototype.generateAndInjectStyles=function(e,n,t){var a=this.componentId,r=[];if(this.baseStyle&&r.push(this.baseStyle.generateAndInjectStyles(e,n,t)),this.isStatic&&!t.hash)if(this.staticRulesId&&n.hasNameForId(a,this.staticRulesId))r.push(this.staticRulesId);else{var i=me(this.rules,e,n,t).join(""),s=V(Y(this.baseHash,i)>>>0);if(!n.hasNameForId(a,s)){var o=t(i,"."+s,void 0,a);n.insertRules(a,s,o)}r.push(s),this.staticRulesId=s}else{for(var c=this.rules.length,d=Y(this.baseHash,t.hash),b="",u=0;u<c;u++){var l=this.rules[u];if("string"==typeof l)b+=l;else if(l){var f=me(l,e,n,t),p=Array.isArray(f)?f.join(""):f;d=Y(d,p+u),b+=p}}if(b){var m=V(d>>>0);if(!n.hasNameForId(a,m)){var y=t(b,"."+m,void 0,a);n.insertRules(a,m,y)}r.push(m)}}return r.join(" ")},e}(),Z=/^\s*\/\/.*$/gm,Q=[":","[",".","#"];function ee(e){var n,t,a,r,i=void 0===e?h:e,s=i.options,o=void 0===s?h:s,d=i.plugins,b=void 0===d?y:d,u=new c.a(o),l=[],f=function(e){function n(n){if(n)try{e(n+"}")}catch(e){}}return function(t,a,r,i,s,o,c,d,b,u){switch(t){case 1:if(0===b&&64===a.charCodeAt(0))return e(a+";"),"";break;case 2:if(0===d)return a+"/*|*/";break;case 3:switch(d){case 102:case 112:return e(r[0]+a),"";default:return a+(0===u?"/*|*/":"")}case-2:a.split("/*|*/}").forEach(n)}}}((function(e){l.push(e)})),p=function(e,a,i){return 0===a&&-1!==Q.indexOf(i[t.length])||i.match(r)?e:"."+n};function m(e,i,s,o){void 0===o&&(o="&");var c=e.replace(Z,""),d=i&&s?s+" "+i+" { "+c+" }":c;return n=o,t=i,a=new RegExp("\\"+t+"\\b","g"),r=new RegExp("(\\"+t+"\\b){2,}"),u(s||!i?"":i,d)}return u.use([].concat(b,[function(e,n,r){2===e&&r.length&&r[0].lastIndexOf(t)>0&&(r[0]=r[0].replace(a,p))},f,function(e){if(-2===e){var n=l;return l=[],n}}])),m.hash=b.length?b.reduce((function(e,n){return n.name||j(15),Y(e,n.name)}),5381).toString():"",m}var ne=i.a.createContext(),te=(ne.Consumer,i.a.createContext()),ae=(te.Consumer,new H),re=ee();function ie(){return Object(r.useContext)(ne)||ae}function se(){return Object(r.useContext)(te)||re}function oe(e){var n=Object(r.useState)(e.stylisPlugins),t=n[0],a=n[1],s=ie(),c=Object(r.useMemo)((function(){var n=s;return e.sheet?n=e.sheet:e.target&&(n=n.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(n=n.reconstructWithOptions({useCSSOMInjection:!1})),n}),[e.disableCSSOMInjection,e.sheet,e.target]),d=Object(r.useMemo)((function(){return ee({options:{prefix:!e.disableVendorPrefixes},plugins:t})}),[e.disableVendorPrefixes,t]);return Object(r.useEffect)((function(){o()(t,e.stylisPlugins)||a(e.stylisPlugins)}),[e.stylisPlugins]),i.a.createElement(ne.Provider,{value:c},i.a.createElement(te.Provider,{value:d},e.children))}var ce=function(){function e(e,n){var t=this;this.inject=function(e,n){void 0===n&&(n=re);var a=t.name+n.hash;e.hasNameForId(t.id,a)||e.insertRules(t.id,a,n(t.rules,a,"@keyframes"))},this.toString=function(){return j(12,String(t.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=n}return e.prototype.getName=function(e){return void 0===e&&(e=re),this.name+e.hash},e}(),de=/([A-Z])/,be=/([A-Z])/g,ue=/^ms-/,le=function(e){return"-"+e.toLowerCase()};function fe(e){return de.test(e)?e.replace(be,le).replace(ue,"-ms-"):e}var pe=function(e){return null==e||!1===e||""===e};function me(e,n,t,a){if(Array.isArray(e)){for(var r,i=[],s=0,o=e.length;s<o;s+=1)""!==(r=me(e[s],n,t,a))&&(Array.isArray(r)?i.push.apply(i,r):i.push(r));return i}return pe(e)?"":_(e)?"."+e.styledComponentId:g(e)?"function"!=typeof(c=e)||c.prototype&&c.prototype.isReactComponent||!n?e:me(e(n),n,t,a):e instanceof ce?t?(e.inject(t,a),e.getName(a)):e:m(e)?function e(n,t){var a,r,i=[];for(var s in n)n.hasOwnProperty(s)&&!pe(n[s])&&(Array.isArray(n[s])&&n[s].isCss||g(n[s])?i.push(fe(s)+":",n[s],";"):m(n[s])?i.push.apply(i,e(n[s],s)):i.push(fe(s)+": "+(a=s,(null==(r=n[s])||"boolean"==typeof r||""===r?"":"number"!=typeof r||0===r||a in d.a?String(r).trim():r+"px")+";")));return t?[t+" {"].concat(i,["}"]):i}(e):e.toString();var c}var ye=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function he(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),a=1;a<n;a++)t[a-1]=arguments[a];return g(e)||m(e)?ye(me(p(y,[e].concat(t)))):0===t.length&&1===e.length&&"string"==typeof e[0]?e:ye(me(p(e,t)))}new Set;var ge=function(e,n,t){return void 0===t&&(t=h),e.theme!==t.theme&&e.theme||n||t.theme},ve=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,_e=/(^-|-$)/g;function Oe(e){return e.replace(ve,"-").replace(_e,"")}var we=function(e){return V(X(e)>>>0)};function Te(e){return"string"==typeof e&&!0}var je=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},xe=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Se(e,n,t){var a=e[t];je(n)&&je(a)?Ce(a,n):e[t]=n}function Ce(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),a=1;a<n;a++)t[a-1]=arguments[a];for(var r=0,i=t;r<i.length;r++){var s=i[r];if(je(s))for(var o in s)xe(o)&&Se(e,s[o],o)}return e}var Ie=i.a.createContext();Ie.Consumer;var Re={};function ke(e,n,t){var a=_(e),s=!Te(e),o=n.attrs,c=void 0===o?y:o,d=n.componentId,u=void 0===d?function(e,n){var t="string"!=typeof e?"sc":Oe(e);Re[t]=(Re[t]||0)+1;var a=t+"-"+we("5.3.3"+t+Re[t]);return n?n+"-"+a:a}(n.displayName,n.parentComponentId):d,p=n.displayName,m=void 0===p?function(e){return Te(e)?"styled."+e:"Styled("+v(e)+")"}(e):p,O=n.displayName&&n.componentId?Oe(n.displayName)+"-"+n.componentId:n.componentId||u,w=a&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,T=n.shouldForwardProp;a&&e.shouldForwardProp&&(T=n.shouldForwardProp?function(t,a,r){return e.shouldForwardProp(t,a,r)&&n.shouldForwardProp(t,a,r)}:e.shouldForwardProp);var j,x=new J(t,O,a?e.componentStyle:void 0),S=x.isStatic&&0===c.length,C=function(e,n){return function(e,n,t,a){var i=e.attrs,s=e.componentStyle,o=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,u=e.styledComponentId,l=e.target,p=function(e,n,t){void 0===e&&(e=h);var a=f({},n,{theme:e}),r={};return t.forEach((function(e){var n,t,i,s=e;for(n in g(s)&&(s=s(a)),s)a[n]=r[n]="className"===n?(t=r[n],i=s[n],t&&i?t+" "+i:t||i):s[n]})),[a,r]}(ge(n,Object(r.useContext)(Ie),o)||h,n,i),m=p[0],y=p[1],v=function(e,n,t,a){var r=ie(),i=se();return n?e.generateAndInjectStyles(h,r,i):e.generateAndInjectStyles(t,r,i)}(s,a,m),_=t,O=y.$as||n.$as||y.as||n.as||l,w=Te(O),T=y!==n?f({},n,{},y):n,j={};for(var x in T)"$"!==x[0]&&"as"!==x&&("forwardedAs"===x?j.as=T[x]:(d?d(x,b.a,O):!w||Object(b.a)(x))&&(j[x]=T[x]));return n.style&&y.style!==n.style&&(j.style=f({},n.style,{},y.style)),j.className=Array.prototype.concat(c,u,v!==u?v:null,n.className,y.className).filter(Boolean).join(" "),j.ref=_,Object(r.createElement)(O,j)}(j,e,n,S)};return C.displayName=m,(j=i.a.forwardRef(C)).attrs=w,j.componentStyle=x,j.displayName=m,j.shouldForwardProp=T,j.foldedComponentIds=a?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):y,j.styledComponentId=O,j.target=a?e.target:e,j.withComponent=function(e){var a=n.componentId,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(n,["componentId"]),i=a&&a+"-"+(Te(e)?e:Oe(v(e)));return ke(e,f({},r,{attrs:w,componentId:i}),t)},Object.defineProperty(j,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(n){this._foldedDefaultProps=a?Ce({},e.defaultProps,n):n}}),j.toString=function(){return"."+j.styledComponentId},s&&l()(j,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),j}var Ae=function(e){return function e(n,t,r){if(void 0===r&&(r=h),!Object(a.isValidElementType)(t))return j(1,String(t));var i=function(){return n(t,r,he.apply(void 0,arguments))};return i.withConfig=function(a){return e(n,t,f({},r,{},a))},i.attrs=function(a){return e(n,t,f({},r,{attrs:Array.prototype.concat(r.attrs,a).filter(Boolean)}))},i}(ke,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){Ae[e]=Ae(e)}));!function(){function e(e,n){this.rules=e,this.componentId=n,this.isStatic=G(e),H.registerId(this.componentId+1)}var n=e.prototype;n.createStyles=function(e,n,t,a){var r=a(me(this.rules,n,t,a).join(""),""),i=this.componentId+e;t.insertRules(i,i,r)},n.removeStyles=function(e,n){n.clearRules(this.componentId+e)},n.renderStyles=function(e,n,t,a){e>2&&H.registerId(this.componentId+e),this.removeStyles(e,t),this.createStyles(e,n,t,a)}}();!function(){function e(){var e=this;this._emitSheetCSS=function(){var n=e.instance.toString();if(!n)return"";var t=N();return"<style "+[t&&'nonce="'+t+'"',O+'="true"','data-styled-version="5.3.3"'].filter(Boolean).join(" ")+">"+n+"</style>"},this.getStyleTags=function(){return e.sealed?j(2):e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)return j(2);var t=((n={})[O]="",n["data-styled-version"]="5.3.3",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),a=N();return a&&(t.nonce=a),[i.a.createElement("style",f({},t,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new H({isServer:!0}),this.sealed=!1}var n=e.prototype;n.collectStyles=function(e){return this.sealed?j(2):i.a.createElement(oe,{sheet:this.instance},e)},n.interleaveWithNodeStream=function(e){return j(3)}}();n.a=Ae}).call(this,t(30))},1983:function(e,n){e.exports=function(e,n,t,a){var r=t?t.call(a,e,n):void 0;if(void 0!==r)return!!r;if(e===n)return!0;if("object"!==typeof e||!e||"object"!==typeof n||!n)return!1;var i=Object.keys(e),s=Object.keys(n);if(i.length!==s.length)return!1;for(var o=Object.prototype.hasOwnProperty.bind(n),c=0;c<i.length;c++){var d=i[c];if(!o(d))return!1;var b=e[d],u=n[d];if(!1===(r=t?t.call(a,b,u,d):void 0)||void 0===r&&b!==u)return!1}return!0}},1984:function(e,n,t){"use strict";n.a=function(e){function n(e,a,c,d,l){for(var f,p,m,y,_,w=0,T=0,j=0,x=0,S=0,E=0,P=m=f=0,N=0,D=0,B=0,q=0,U=c.length,L=U-1,z="",H="",W="",K="";N<U;){if(p=c.charCodeAt(N),N===L&&0!==T+x+j+w&&(0!==T&&(p=47===T?10:47),x=j=w=0,U++,L++),0===T+x+j+w){if(N===L&&(0<D&&(z=z.replace(u,"")),0<z.trim().length)){switch(p){case 32:case 9:case 59:case 13:case 10:break;default:z+=c.charAt(N)}p=59}switch(p){case 123:for(f=(z=z.trim()).charCodeAt(0),m=1,q=++N;N<U;){switch(p=c.charCodeAt(N)){case 123:m++;break;case 125:m--;break;case 47:switch(p=c.charCodeAt(N+1)){case 42:case 47:e:{for(P=N+1;P<L;++P)switch(c.charCodeAt(P)){case 47:if(42===p&&42===c.charCodeAt(P-1)&&N+2!==P){N=P+1;break e}break;case 10:if(47===p){N=P+1;break e}}N=P}}break;case 91:p++;case 40:p++;case 34:case 39:for(;N++<L&&c.charCodeAt(N)!==p;);}if(0===m)break;N++}if(m=c.substring(q,N),0===f&&(f=(z=z.replace(b,"").trim()).charCodeAt(0)),64===f){switch(0<D&&(z=z.replace(u,"")),p=z.charCodeAt(1)){case 100:case 109:case 115:case 45:D=a;break;default:D=A}if(q=(m=n(a,D,m,p,l+1)).length,0<M&&(_=o(3,m,D=t(A,z,B),a,I,C,q,p,l,d),z=D.join(""),void 0!==_&&0===(q=(m=_.trim()).length)&&(p=0,m="")),0<q)switch(p){case 115:z=z.replace(O,s);case 100:case 109:case 45:m=z+"{"+m+"}";break;case 107:m=(z=z.replace(h,"$1 $2"))+"{"+m+"}",m=1===k||2===k&&i("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=z+m,112===d&&(H+=m,m="")}else m=""}else m=n(a,t(a,z,B),m,d,l+1);W+=m,m=B=D=P=f=0,z="",p=c.charCodeAt(++N);break;case 125:case 59:if(1<(q=(z=(0<D?z.replace(u,""):z).trim()).length))switch(0===P&&(f=z.charCodeAt(0),45===f||96<f&&123>f)&&(q=(z=z.replace(" ",":")).length),0<M&&void 0!==(_=o(1,z,a,e,I,C,H.length,d,l,d))&&0===(q=(z=_.trim()).length)&&(z="\0\0"),f=z.charCodeAt(0),p=z.charCodeAt(1),f){case 0:break;case 64:if(105===p||99===p){K+=z+c.charAt(N);break}default:58!==z.charCodeAt(q-1)&&(H+=r(z,f,p,z.charCodeAt(2)))}B=D=P=f=0,z="",p=c.charCodeAt(++N)}}switch(p){case 13:case 10:47===T?T=0:0===1+f&&107!==d&&0<z.length&&(D=1,z+="\0"),0<M*F&&o(0,z,a,e,I,C,H.length,d,l,d),C=1,I++;break;case 59:case 125:if(0===T+x+j+w){C++;break}default:switch(C++,y=c.charAt(N),p){case 9:case 32:if(0===x+w+T)switch(S){case 44:case 58:case 9:case 32:y="";break;default:32!==p&&(y=" ")}break;case 0:y="\\0";break;case 12:y="\\f";break;case 11:y="\\v";break;case 38:0===x+T+w&&(D=B=1,y="\f"+y);break;case 108:if(0===x+T+w+R&&0<P)switch(N-P){case 2:112===S&&58===c.charCodeAt(N-3)&&(R=S);case 8:111===E&&(R=E)}break;case 58:0===x+T+w&&(P=N);break;case 44:0===T+j+x+w&&(D=1,y+="\r");break;case 34:case 39:0===T&&(x=x===p?0:0===x?p:x);break;case 91:0===x+T+j&&w++;break;case 93:0===x+T+j&&w--;break;case 41:0===x+T+w&&j--;break;case 40:if(0===x+T+w){if(0===f)if(2*S+3*E===533);else f=1;j++}break;case 64:0===T+j+x+w+P+m&&(m=1);break;case 42:case 47:if(!(0<x+w+j))switch(T){case 0:switch(2*p+3*c.charCodeAt(N+1)){case 235:T=47;break;case 220:q=N,T=42}break;case 42:47===p&&42===S&&q+2!==N&&(33===c.charCodeAt(q+2)&&(H+=c.substring(q,N+1)),y="",T=0)}}0===T&&(z+=y)}E=S,S=p,N++}if(0<(q=H.length)){if(D=a,0<M&&(void 0!==(_=o(2,H,D,e,I,C,q,d,l,d))&&0===(H=_).length))return K+H+W;if(H=D.join(",")+"{"+H+"}",0!==k*R){switch(2!==k||i(H,2)||(R=0),R){case 111:H=H.replace(v,":-moz-$1")+H;break;case 112:H=H.replace(g,"::-webkit-input-$1")+H.replace(g,"::-moz-$1")+H.replace(g,":-ms-input-$1")+H}R=0}}return K+H+W}function t(e,n,t){var r=n.trim().split(m);n=r;var i=r.length,s=e.length;switch(s){case 0:case 1:var o=0;for(e=0===s?"":e[0]+" ";o<i;++o)n[o]=a(e,n[o],t).trim();break;default:var c=o=0;for(n=[];o<i;++o)for(var d=0;d<s;++d)n[c++]=a(e[d]+" ",r[o],t).trim()}return n}function a(e,n,t){var a=n.charCodeAt(0);switch(33>a&&(a=(n=n.trim()).charCodeAt(0)),a){case 38:return n.replace(y,"$1"+e.trim());case 58:return e.trim()+n.replace(y,"$1"+e.trim());default:if(0<1*t&&0<n.indexOf("\f"))return n.replace(y,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+n}function r(e,n,t,a){var s=e+";",o=2*n+3*t+4*a;if(944===o){e=s.indexOf(":",9)+1;var c=s.substring(e,s.length-1).trim();return c=s.substring(0,e).trim()+c+";",1===k||2===k&&i(c,1)?"-webkit-"+c+c:c}if(0===k||2===k&&!i(s,1))return s;switch(o){case 1015:return 97===s.charCodeAt(10)?"-webkit-"+s+s:s;case 951:return 116===s.charCodeAt(3)?"-webkit-"+s+s:s;case 963:return 110===s.charCodeAt(5)?"-webkit-"+s+s:s;case 1009:if(100!==s.charCodeAt(4))break;case 969:case 942:return"-webkit-"+s+s;case 978:return"-webkit-"+s+"-moz-"+s+s;case 1019:case 983:return"-webkit-"+s+"-moz-"+s+"-ms-"+s+s;case 883:if(45===s.charCodeAt(8))return"-webkit-"+s+s;if(0<s.indexOf("image-set(",11))return s.replace(S,"$1-webkit-$2")+s;break;case 932:if(45===s.charCodeAt(4))switch(s.charCodeAt(5)){case 103:return"-webkit-box-"+s.replace("-grow","")+"-webkit-"+s+"-ms-"+s.replace("grow","positive")+s;case 115:return"-webkit-"+s+"-ms-"+s.replace("shrink","negative")+s;case 98:return"-webkit-"+s+"-ms-"+s.replace("basis","preferred-size")+s}return"-webkit-"+s+"-ms-"+s+s;case 964:return"-webkit-"+s+"-ms-flex-"+s+s;case 1023:if(99!==s.charCodeAt(8))break;return"-webkit-box-pack"+(c=s.substring(s.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+s+"-ms-flex-pack"+c+s;case 1005:return f.test(s)?s.replace(l,":-webkit-")+s.replace(l,":-moz-")+s:s;case 1e3:switch(n=(c=s.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(n)){case 226:c=s.replace(_,"tb");break;case 232:c=s.replace(_,"tb-rl");break;case 220:c=s.replace(_,"lr");break;default:return s}return"-webkit-"+s+"-ms-"+c+s;case 1017:if(-1===s.indexOf("sticky",9))break;case 975:switch(n=(s=e).length-10,o=(c=(33===s.charCodeAt(n)?s.substring(0,n):s).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(111>c.charCodeAt(8))break;case 115:s=s.replace(c,"-webkit-"+c)+";"+s;break;case 207:case 102:s=s.replace(c,"-webkit-"+(102<o?"inline-":"")+"box")+";"+s.replace(c,"-webkit-"+c)+";"+s.replace(c,"-ms-"+c+"box")+";"+s}return s+";";case 938:if(45===s.charCodeAt(5))switch(s.charCodeAt(6)){case 105:return c=s.replace("-items",""),"-webkit-"+s+"-webkit-box-"+c+"-ms-flex-"+c+s;case 115:return"-webkit-"+s+"-ms-flex-item-"+s.replace(T,"")+s;default:return"-webkit-"+s+"-ms-flex-line-pack"+s.replace("align-content","").replace(T,"")+s}break;case 973:case 989:if(45!==s.charCodeAt(3)||122===s.charCodeAt(4))break;case 931:case 953:if(!0===x.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),n,t,a).replace(":fill-available",":stretch"):s.replace(c,"-webkit-"+c)+s.replace(c,"-moz-"+c.replace("fill-",""))+s;break;case 962:if(s="-webkit-"+s+(102===s.charCodeAt(5)?"-ms-"+s:"")+s,211===t+a&&105===s.charCodeAt(13)&&0<s.indexOf("transform",10))return s.substring(0,s.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+s}return s}function i(e,n){var t=e.indexOf(1===n?":":"{"),a=e.substring(0,3!==n?t:10);return t=e.substring(t+1,e.length-1),P(2!==n?a:a.replace(j,"$1"),t,n)}function s(e,n){var t=r(n,n.charCodeAt(0),n.charCodeAt(1),n.charCodeAt(2));return t!==n+";"?t.replace(w," or ($1)").substring(4):"("+n+")"}function o(e,n,t,a,r,i,s,o,c,b){for(var u,l=0,f=n;l<M;++l)switch(u=E[l].call(d,e,f,t,a,r,i,s,o,c,b)){case void 0:case!1:case!0:case null:break;default:f=u}if(f!==n)return f}function c(e){return void 0!==(e=e.prefix)&&(P=null,e?"function"!==typeof e?k=1:(k=2,P=e):k=0),c}function d(e,t){var a=e;if(33>a.charCodeAt(0)&&(a=a.trim()),a=[a],0<M){var r=o(-1,t,a,a,I,C,0,0,0,0);void 0!==r&&"string"===typeof r&&(t=r)}var i=n(A,a,t,0,0);return 0<M&&(void 0!==(r=o(-2,i,a,a,I,C,i.length,0,0,0))&&(i=r)),"",R=0,C=I=1,i}var b=/^\0+/g,u=/[\0\r\f]/g,l=/: */g,f=/zoo|gra/,p=/([,: ])(transform)/g,m=/,\r+?/g,y=/([\t\r\n ])*\f?&/g,h=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,v=/:(read-only)/g,_=/[svh]\w+-[tblr]{2}/,O=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,T=/-self|flex-/g,j=/[^]*?(:[rp][el]a[\w-]+)[^]*/,x=/stretch|:\s*\w+\-(?:conte|avail)/,S=/([^-])(image-set\()/,C=1,I=1,R=0,k=1,A=[],E=[],M=0,P=null,F=0;return d.use=function e(n){switch(n){case void 0:case null:M=E.length=0;break;default:if("function"===typeof n)E[M++]=n;else if("object"===typeof n)for(var t=0,a=n.length;t<a;++t)e(n[t]);else F=0|!!n}return e},d.set=c,void 0!==e&&c(e),d}},2063:function(e,n,t){"use strict";var a=t(4),r=t(16),i=t(0),s=t(22),o=t(1759),c=t(33),d=t(42),b=t(1778),u=t(1705),l=t(1760);function f(e){return Object(u.a)("MuiCard",e)}Object(l.a)("MuiCard",["root"]);var p=t(2),m=["className","raised"],y=Object(c.a)(b.a,{name:"MuiCard",slot:"Root",overridesResolver:function(e,n){return n.root}})((function(){return{overflow:"hidden"}})),h=i.forwardRef((function(e,n){var t=Object(d.a)({props:e,name:"MuiCard"}),i=t.className,c=t.raised,b=void 0!==c&&c,u=Object(r.a)(t,m),l=Object(a.a)({},t,{raised:b}),h=function(e){var n=e.classes;return Object(o.a)({root:["root"]},f,n)}(l);return Object(p.jsx)(y,Object(a.a)({className:Object(s.default)(h.root,i),elevation:b?8:void 0,ref:n,ownerState:l},u))}));n.a=h},2065:function(e,n,t){"use strict";t(0);var a=t(8),r=t(33),i=Object(r.a)("label")((function(e){var n=e.theme;return{position:"relative",display:"inline-block",width:50,height:24,"& input":{opacity:0,width:0,height:0,"&:checked + .slider":{backgroundImage:"linear-gradient(38deg,#00ff36 -10%,#00ee57 3%,#00c5ad 32%,#00a4f1 53%,#0b18fc 102%,#0d00ff 111%)"},"&:focus + .slider":{boxShadow:"0 0 1px #2196F3"},"&:checked + .slider:before":{WebkitTransform:"translateX(22px)",MsTransform:"translateX(22px)",transform:"translateX(22px)"}},"& .slider":Object(a.a)(Object(a.a)({position:"absolute",cursor:"pointer",top:0,left:0,right:0,bottom:0,WebkitTransition:"0.4s",transition:"0.4s"},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.dark}:{backgroundColor:n.palette.primary.main}),{},{"&::before":{position:"absolute",content:'""',height:16,width:16,left:6,bottom:4,backgroundColor:"white",WebkitTransition:"0.4s",transition:"0.4s"},"&.round":{borderRadius:9},"&.round:before":{borderRadius:"50%"}})}})),s=t(2);n.a=function(e){var n=e.onChange;return Object(s.jsxs)(i,{children:[Object(s.jsx)("input",{type:"checkbox","aria-checked":"false",onChange:function(e){n(e)}}),Object(s.jsx)("span",{className:"slider round"})]})}},2067:function(e,n,t){"use strict";var a=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,r=function(e){var n={};return function(t){return void 0===n[t]&&(n[t]=e(t)),n[t]}}((function(e){return a.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));n.a=r},2088:function(e,n,t){"use strict";t.r(n);var a,r=t(21),i=t(230),s=t(0),o=t(1982),c=t(2),d="/loadingNFT.gif",b=o.a.img(a||(a=Object(i.a)(["\n\t@keyframes loaded {\n\t\t0% {\n\t\t\topacity: 0.1;\n\t\t}\n\t\t25% {\n\t\t\topacity: 0.25;\n\t\t}\n\t\t50% {\n\t\t\topacity: 0.5;\n\t\t}\n\t\t75% {\n\t\t\topacity: 0.75;\n\t\t}\n\t\t100% {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t&.loaded:not(.has-error) {\n\t\tanimation: loaded 500ms ease-in-out;\n\t}\n\n\t&.has-error {\n\t\tcontent: url(",");\n\t}\n"])),d);function u(e){var n=e.src,t=e.alt,a=e.style,i=Object(s.useState)(d),o=Object(r.a)(i,2),u=o[0],l=o[1],f=Object(s.useState)(),p=Object(r.a)(f,2),m=p[0],y=p[1];return Object(s.useEffect)((function(){var e=null,t=!1;return m&&u!==n&&(IntersectionObserver?(e=new IntersectionObserver((function(a){a.forEach((function(a){!t&&(a.intersectionRatio>0||a.isIntersecting)&&(l(n),e.unobserve(m))}))}),{threshold:.01,rootMargin:"75%"})).observe(m):l(n)),function(){t=!0,e&&e.unobserve&&e.unobserve(m)}}),[n,u,m]),Object(c.jsx)(b,{loading:"lazy",style:a,ref:y,src:u,alt:t,onLoad:function(e){e.target.classList.add("loaded")},onError:function(e){e.target.classList.add("has-error")}})}n.default=Object(s.memo)(u)},2621:function(e,n,t){"use strict";t.r(n);var a=t(8),r=t(35),i=t(21),s=t(1),o=t.n(s),c=t(0),d=t(164),b=t(34),u=t(79),l=t(446),f=t(447),p=t(461),m=t(74),y=t(1981),h=t(1913),g=t(1790),v=t(1789),_=t(1912),O=t(450),w=t(1833),T=t(1876),j=t(1874),x=t(19),S=t(33),C=t(1776),I=t(1761),R=Object(S.a)(C.a)({fontSize:"2.5rem",fontWeight:700,padding:"1.5rem 0"}),k=Object(S.a)(C.a)((function(e){e.theme;return{fontSize:"1.2rem",fontWeight:600}})),A=Object(S.a)(C.a)({fontSize:"0.9rem",opacity:.5,fontWeight:600}),E=Object(S.a)(I.a)({width:40,marginRight:10,flexShrink:0}),M=(Object(S.a)(I.a)((function(e){e.theme;return{}})),Object(S.a)(I.a)((function(e){e.theme;return{marginTop:40}}))),P=Object(S.a)(C.a)((function(e){e.theme;return{color:"red",fontStyle:"italic",fontSize:14,marginTop:3,"&::before":{content:'"*"'}}})),F=Object(S.a)("span")((function(e){e.theme;return{color:"red","&::before":{content:'"*"',fontSize:18}}})),N=Object(S.a)(I.a)((function(e){var n=e.theme;return Object(x.a)({display:"flex",alignItems:"start",justifyContent:"space-between",gap:40,minHeight:400},n.breakpoints.down(765),{display:"block"})})),D=Object(S.a)(I.a)((function(e){var n=e.theme;return Object(x.a)({width:320,flexShrink:0},n.breakpoints.down(765),{width:"auto"})})),B=t(165),q=t(1762),U=t(1844),L=t(444),z=t(1787),H=t(2065),W=t(1810),K=t(1831),V=t(1811),Y=t.n(V),X=t(1854),G=t.n(X),$=t(1791),J=t(2088),Z=Object(S.a)(I.a)({maxWidth:320}),Q=Object(S.a)(I.a)({width:"100%",height:380,display:"flex",justifyContent:"center",alignItems:"center"}),ee=t(1814),ne=t(1815),te=t(1816),ae=t(1817),re=t(479),ie=t(126),se=t(1820),oe=t(72),ce=t(2);function de(e){var n=e.media,t=e.thumbnail,a=e.name,r="light"===Object(B.a)().palette.mode,s=Object(c.useState)(""),o=Object(i.a)(s,2),d=o[0],b=o[1],l=Object(u.c)(oe.h);Object(c.useEffect)((function(){n&&b(Object(ie.s)(n))}),[n]);Object(c.useMemo)((function(){return Object(ce.jsx)($.c,{sx:{background:"".concat(Object(ie.r)(re.b))}})}),[]);return Object(ce.jsxs)(I.a,{children:[Object(ce.jsx)(k,{children:"Preview"}),Object(ce.jsx)(Z,{children:Object(ce.jsx)($.e,{children:Object(ce.jsx)(I.a,{sx:{p:1.5},children:n?Object(ce.jsxs)(c.Fragment,{children:[Object(ce.jsxs)($.g,{children:["mp3"===d&&t&&Object(ce.jsxs)(c.Fragment,{children:[Object(ce.jsx)(J.default,{src:G()(t)?t:t.preview,alt:"item"}),Object(ce.jsx)(se.a,{url:G()(n)?n:n.preview,name:""})]}),"mp4"===d&&Object(ce.jsx)($.i,{children:Object(ce.jsx)(Y.a,{url:G()(n)?n:n.preview,className:"react-player",muted:!0,playing:!0,loop:!0,width:"100%",height:"100%"})}),"mp3"!==d&&"mp4"!==d&&Object(ce.jsx)(J.default,{src:G()(n)?n:n.preview,alt:"item",style:{borderRadius:"10px"}})]}),Object(ce.jsx)(I.a,{sx:{width:"100%",height:"100%",py:1},children:Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",justifyContent:"space-between",spacing:1,children:[Object(ce.jsx)(I.a,{sx:{width:"70%"},children:Object(ce.jsx)(C.a,{variant:"h6",noWrap:!0,children:a})}),Object(ce.jsx)($.d,{})]})}),Object(ce.jsx)($.f,{children:Object(ce.jsxs)(q.a,{direction:"row",justifyContent:"space-between",alignItems:"center",spacing:2,sx:{padding:"8px 14px"},children:[Object(ce.jsxs)(q.a,{direction:"row",children:[Object(ce.jsx)($.a,{sx:{marginLeft:"-10px",zIndex:1},children:Object(ce.jsx)(K.a,{sx:{width:25,height:25},src:null===l||void 0===l?void 0:l.avatar,alt:"creator"})}),Object(ce.jsx)($.a,{sx:{marginLeft:"-10px",zIndex:1},children:Object(ce.jsx)(K.a,{sx:{width:25,height:25},src:null===l||void 0===l?void 0:l.avatar,alt:"creator"})})]}),Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",spacing:1.5,children:[r?Object(ce.jsx)("img",{src:te.a,height:18,width:20,alt:"icon twitter"}):Object(ce.jsx)("img",{src:ee.a,height:18,width:20,alt:"icon twitter"}),Object(ce.jsx)(q.a,{direction:"row",alignItems:"center",spacing:.5,children:Object(ce.jsx)(I.a,{children:r?Object(ce.jsx)("img",{src:ae.a,height:18.35,width:20,alt:"icon favorite"}):Object(ce.jsx)("img",{src:ne.a,height:18.35,width:20,alt:"icon favorite"})})})]})]})})]}):Object(ce.jsx)(Q,{children:Object(ce.jsx)(C.a,{children:"Upload file to preview your NFT"})})})})})]})}var be=t(1875);var ue=function(e){var n,t,r,s,o,d,u,l,f,p,m=e.isEdit,y=e.currentItem,h=e.listCollectionTemp,g=e.handleChangeFreezeOption,v=e.onSubmit,_=Object(b.g)().collectionId,O=Object(B.a)(),x=Object(c.useState)(null),S=Object(i.a)(x,2),K=S[0],V=S[1],Y=Object(c.useState)(null),X=Object(i.a)(Y,2),G=X[0],$=X[1],J=Object(c.useState)(""),Z=Object(i.a)(J,2),Q=Z[0],ee=Z[1],ne="light"===O.palette.mode,te=Object(c.useState)(),ae=Object(i.a)(te,2),re=ae[0],se=ae[1],oe=h.map((function(e){return{name:e.collectionName,value:e.collectionId,image:e.logo}}));Object(c.useEffect)((function(){m&&y?(me("itemMedia",y.itemMedia),me("itemThumbnail",y.itemPreviewMedia),me("itemName",y.itemName),me("description",y.description),me("collectionId",y.collectionId),V(y.itemMedia),$(y.itemPreviewMedia),ee(y.itemName)):ve()}),[y]),Object(c.useEffect)((function(){if(m&&y){var e=h.find((function(e){return e.collectionId===y.collectionId}));e&&se({name:e.collectionName,value:e.collectionId,image:e.logo})}}),[h]);var ue=j.c({itemMedia:j.a().required().test("require a file","File is required!",(function(e){return Boolean(0!==(null===e||void 0===e?void 0:e.length))})),itemThumbnail:j.a().test("require a file","File is required",(function(e){return!!K&&!("mp3"===Object(ie.s)(K)&&!G)})),itemName:j.d().required(),description:j.d().required(),collectionId:j.d().required("Collection is required!")}).required(),le=Object(w.d)({resolver:Object(T.a)(ue)}),fe=le.register,pe=le.handleSubmit,me=le.setValue,ye=le.formState,he=ye.errors,ge=ye.isSubmitting,ve=le.reset;Object(c.useEffect)((function(){if(!m&&_){me("collectionId",_);var e=oe.find((function(e){return e.value===_}));e&&se(e)}}),[h]);var _e=Object(c.useCallback)((function(e){var n=e[0];n&&(me("itemMedia",Object(a.a)(Object(a.a)({},n),{},{preview:URL.createObjectURL(n),raw:n})),V(Object(a.a)(Object(a.a)({},n),{},{preview:URL.createObjectURL(n)})),"mp3"!==Object(ie.s)(n)&&$(null))}),[me]),Oe=Object(c.useCallback)((function(e){var n=e[0];n&&(me("itemThumbnail",Object(a.a)(Object(a.a)({},n),{},{preview:URL.createObjectURL(n),raw:n})),$(Object(a.a)(Object(a.a)({},n),{},{preview:URL.createObjectURL(n)})))}),[me]);return Object(ce.jsxs)("form",{onSubmit:pe(v),children:[Object(ce.jsx)(R,{children:m?"Edit Item":"Create New Item"}),Object(ce.jsxs)(N,{children:[Object(ce.jsxs)(I.a,{children:[Object(ce.jsxs)(k,{children:["Image, Video, Audio, or 3D Model ",Object(ce.jsx)(F,{})]}),Object(ce.jsx)(A,{children:"Recommended file types: JPG, PNG, GIF, SVG, WEBM, MP4, MP3. Max size: 50 MB."}),Object(ce.jsxs)(I.a,{sx:{maxWidth:320},children:[Object(ce.jsx)(I.a,{sx:Object(a.a)({position:"relative",margin:"1.5rem 0",width:"100%"},"mp3"===Object(ie.s)(K)?{height:"120px"}:{paddingBottom:"100%"}),children:Object(ce.jsx)(be.a,{file:K,maxSize:52428800,onDrop:_e,error:Boolean(he.itemMedia),sx:{position:"absolute",top:0,left:0,width:"100%",height:"100%",borderRadius:"12px",padding:1,border:"3px dashed",objectFit:"contain"}})}),(null===(n=he.itemMedia)||void 0===n?void 0:n.message)&&Object(ce.jsx)(P,{children:null===(t=he.itemMedia)||void 0===t?void 0:t.message})]}),K&&"mp3"===Object(ie.s)(K)&&Object(ce.jsxs)(c.Fragment,{children:[Object(ce.jsxs)(k,{children:["Preview Image ",Object(ce.jsx)(F,{})]}),Object(ce.jsx)(A,{children:"Provide an image (PNG, JPG, or GIF) for the card display of your item."}),Object(ce.jsx)(I.a,{sx:{maxWidth:320},children:Object(ce.jsxs)(I.a,{sx:{position:"relative",margin:"1.5rem 0",width:"100%",paddingBottom:"100%"},children:[Object(ce.jsx)(be.a,{accept:{"image/*":[".png",".gif",".jpeg",".jpg"]},file:G,maxSize:52428800,onDrop:Oe,error:Boolean(he.itemThumbnail),sx:{position:"absolute",top:0,left:0,width:"100%",height:"100%",borderRadius:"12px",padding:1,border:"3px dashed",objectFit:"contain"}}),(null===(r=he.itemThumbnail)||void 0===r?void 0:r.message)&&Object(ce.jsx)(P,{children:null===(s=he.itemThumbnail)||void 0===s?void 0:s.message})]})})]})]}),Object(ce.jsx)(D,{children:Object(ce.jsx)(de,{media:K,thumbnail:G,name:Q})})]}),Object(ce.jsxs)(M,{sx:{marginTop:5},children:[Object(ce.jsxs)(k,{children:["Name ",Object(ce.jsx)(F,{})]}),Object(ce.jsx)(z.default,{id:"item-name",type:"text",registerHookForm:Object(a.a)({},fe("itemName")),placeholder:"Item name",onChange:function(e){return ee(e.target.value)}}),(null===(o=he.itemName)||void 0===o?void 0:o.message)&&Object(ce.jsx)(P,{children:null===(d=he.itemName)||void 0===d?void 0:d.message})]}),Object(ce.jsxs)(M,{children:[Object(ce.jsxs)(k,{children:["Description ",Object(ce.jsx)(F,{})]}),Object(ce.jsx)(z.default,{id:"item-description",type:"text",registerHookForm:Object(a.a)({},fe("description")),placeholder:"Provide a detailed description of your item"}),(null===(u=he.description)||void 0===u?void 0:u.message)&&Object(ce.jsx)(P,{children:null===(l=he.description)||void 0===l?void 0:l.message})]}),Object(ce.jsxs)(M,{children:[Object(ce.jsxs)(k,{children:["Collection ",Object(ce.jsx)(F,{})]}),Object(ce.jsx)(A,{children:"This is the collection where your item belongs to."}),Object(ce.jsx)(W.a,{currentItem:re,listItem:oe,onChange:function(e){e?(me("collectionId",String(e.value)),se(e)):(me("collectionId",""),se(void 0))},placeholder:"Collection name...",disabled:m,sx:Object(a.a)({},ne?{backgroundColor:O.palette.primaryLight.main}:{backgroundColor:O.palette.primary.dark})}),(null===(f=he.collectionId)||void 0===f?void 0:f.message)&&Object(ce.jsx)(P,{children:null===(p=he.collectionId)||void 0===p?void 0:p.message})]}),Object(ce.jsx)(M,{children:Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",justifyContent:"space-between",spacing:2,children:[Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",children:[Object(ce.jsx)(E,{children:Object(ce.jsx)("img",{src:"/atom-light.png",alt:"atom icon"})}),Object(ce.jsxs)(I.a,{children:[Object(ce.jsx)(k,{children:"Unlockable Content"}),Object(ce.jsx)(A,{children:"Include unlockable content that can only be revealed by the owner of the item. In alpha release this field is set by default."})]})]}),Object(ce.jsx)(I.a,{children:Object(ce.jsx)(H.a,{onChange:function(e){}})})]})}),Object(ce.jsx)(M,{children:Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",justifyContent:"space-between",spacing:2,children:[Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",children:[Object(ce.jsx)(E,{children:Object(ce.jsx)("img",{src:"/atom-light.png",alt:"atom light"})}),Object(ce.jsxs)(I.a,{children:[Object(ce.jsx)(k,{children:"Explicit & Sensitive Content"}),Object(ce.jsx)(A,{children:"This item is set as explicit and sensitive content by default."})]})]}),Object(ce.jsx)(I.a,{children:Object(ce.jsx)(H.a,{onChange:function(e){}})})]})}),Object(ce.jsx)(M,{children:Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",justifyContent:"space-between",spacing:2,children:[Object(ce.jsxs)(q.a,{direction:"row",alignItems:"center",children:[Object(ce.jsx)(E,{children:Object(ce.jsx)("img",{src:"/atom-light.png",alt:"atom icon"})}),Object(ce.jsxs)(I.a,{children:[Object(ce.jsx)(k,{children:"Freeze Metadata"}),Object(ce.jsx)(A,{children:"Freeze your item metadata to the blockchain and no one can edit or delete it. (Feel free because you can freeze this item later)"})]})]}),Object(ce.jsx)(I.a,{children:Object(ce.jsx)(H.a,{onChange:g})})]})}),Object(ce.jsxs)(M,{children:[Object(ce.jsx)(k,{children:"Supply"}),Object(ce.jsx)(A,{children:"The number of items that can be minted. In alpha release only non-fungible token is supported associated to artwork and its relative."}),Object(ce.jsx)(z.default,{id:"item-supply",type:"number",registerHookForm:{},placeholder:"1"})]}),Object(ce.jsx)(I.a,{sx:{marginTop:8,width:"150px"},children:Object(ce.jsx)(L.a,{type:"submit",disabled:ge,children:Object(ce.jsxs)(q.a,{direction:"row",justifyContent:"center",alignItems:"center",spacing:1,children:[ge&&Object(ce.jsx)(U.a,{sx:{color:"white"},size:25}),Object(ce.jsx)(C.a,{sx:{fontSize:"18px"},children:m?ge?"Updating...":"Update":ge?"Creating...":"Create"})]})})})]})},le=t(460),fe=t(1779),pe=t(2629),me=t(2647),ye=t(2625),he=t(2648),ge=t(1818),ve=t(230),_e=t(16),Oe=t(4),we=t(22),Te=t(1759),je=t(155),xe=t(749),Se=t(32),Ce=t(42),Ie=t(1705),Re=t(1760);function ke(e){return Object(Ie.a)("MuiLinearProgress",e)}Object(Re.a)("MuiLinearProgress",["root","colorPrimary","colorSecondary","determinate","indeterminate","buffer","query","dashed","dashedColorPrimary","dashedColorSecondary","bar","barColorPrimary","barColorSecondary","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer"]);var Ae,Ee,Me,Pe,Fe,Ne,De,Be,qe,Ue,Le,ze,He=["className","color","value","valueBuffer","variant"],We=Object(je.c)(De||(De=Ae||(Ae=Object(ve.a)(["\n  0% {\n    left: -35%;\n    right: 100%;\n  }\n\n  60% {\n    left: 100%;\n    right: -90%;\n  }\n\n  100% {\n    left: 100%;\n    right: -90%;\n  }\n"])))),Ke=Object(je.c)(Be||(Be=Ee||(Ee=Object(ve.a)(["\n  0% {\n    left: -200%;\n    right: 100%;\n  }\n\n  60% {\n    left: 107%;\n    right: -8%;\n  }\n\n  100% {\n    left: 107%;\n    right: -8%;\n  }\n"])))),Ve=Object(je.c)(qe||(qe=Me||(Me=Object(ve.a)(["\n  0% {\n    opacity: 1;\n    background-position: 0 -23px;\n  }\n\n  60% {\n    opacity: 0;\n    background-position: 0 -23px;\n  }\n\n  100% {\n    opacity: 1;\n    background-position: -200px -23px;\n  }\n"])))),Ye=function(e,n){return"inherit"===n?"currentColor":"light"===e.palette.mode?Object(xe.d)(e.palette[n].main,.62):Object(xe.b)(e.palette[n].main,.5)},Xe=Object(S.a)("span",{name:"MuiLinearProgress",slot:"Root",overridesResolver:function(e,n){var t=e.ownerState;return[n.root,n["color".concat(Object(Se.a)(t.color))],n[t.variant]]}})((function(e){var n=e.ownerState,t=e.theme;return Object(Oe.a)({position:"relative",overflow:"hidden",display:"block",height:4,zIndex:0,"@media print":{colorAdjust:"exact"},backgroundColor:Ye(t,n.color)},"inherit"===n.color&&"buffer"!==n.variant&&{backgroundColor:"none","&::before":{content:'""',position:"absolute",left:0,top:0,right:0,bottom:0,backgroundColor:"currentColor",opacity:.3}},"buffer"===n.variant&&{backgroundColor:"transparent"},"query"===n.variant&&{transform:"rotate(180deg)"})})),Ge=Object(S.a)("span",{name:"MuiLinearProgress",slot:"Dashed",overridesResolver:function(e,n){var t=e.ownerState;return[n.dashed,n["dashedColor".concat(Object(Se.a)(t.color))]]}})((function(e){var n=e.ownerState,t=e.theme,a=Ye(t,n.color);return Object(Oe.a)({position:"absolute",marginTop:0,height:"100%",width:"100%"},"inherit"===n.color&&{opacity:.3},{backgroundImage:"radial-gradient(".concat(a," 0%, ").concat(a," 16%, transparent 42%)"),backgroundSize:"10px 10px",backgroundPosition:"0 -23px"})}),Object(je.b)(Ue||(Ue=Pe||(Pe=Object(ve.a)(["\n    animation: "," 3s infinite linear;\n  "]))),Ve)),$e=Object(S.a)("span",{name:"MuiLinearProgress",slot:"Bar1",overridesResolver:function(e,n){var t=e.ownerState;return[n.bar,n["barColor".concat(Object(Se.a)(t.color))],("indeterminate"===t.variant||"query"===t.variant)&&n.bar1Indeterminate,"determinate"===t.variant&&n.bar1Determinate,"buffer"===t.variant&&n.bar1Buffer]}})((function(e){var n=e.ownerState,t=e.theme;return Object(Oe.a)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",backgroundColor:"inherit"===n.color?"currentColor":t.palette[n.color].main},"determinate"===n.variant&&{transition:"transform .".concat(4,"s linear")},"buffer"===n.variant&&{zIndex:1,transition:"transform .".concat(4,"s linear")})}),(function(e){var n=e.ownerState;return("indeterminate"===n.variant||"query"===n.variant)&&Object(je.b)(Le||(Le=Fe||(Fe=Object(ve.a)(["\n      width: auto;\n      animation: "," 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n    "]))),We)})),Je=Object(S.a)("span",{name:"MuiLinearProgress",slot:"Bar2",overridesResolver:function(e,n){var t=e.ownerState;return[n.bar,n["barColor".concat(Object(Se.a)(t.color))],("indeterminate"===t.variant||"query"===t.variant)&&n.bar2Indeterminate,"buffer"===t.variant&&n.bar2Buffer]}})((function(e){var n=e.ownerState,t=e.theme;return Object(Oe.a)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},"buffer"!==n.variant&&{backgroundColor:"inherit"===n.color?"currentColor":t.palette[n.color].main},"inherit"===n.color&&{opacity:.3},"buffer"===n.variant&&{backgroundColor:Ye(t,n.color),transition:"transform .".concat(4,"s linear")})}),(function(e){var n=e.ownerState;return("indeterminate"===n.variant||"query"===n.variant)&&Object(je.b)(ze||(ze=Ne||(Ne=Object(ve.a)(["\n      width: auto;\n      animation: "," 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;\n    "]))),Ke)})),Ze=c.forwardRef((function(e,n){var t=Object(Ce.a)({props:e,name:"MuiLinearProgress"}),a=t.className,r=t.color,i=void 0===r?"primary":r,s=t.value,o=t.valueBuffer,c=t.variant,d=void 0===c?"indeterminate":c,b=Object(_e.a)(t,He),u=Object(Oe.a)({},t,{color:i,variant:d}),l=function(e){var n=e.classes,t=e.variant,a=e.color,r={root:["root","color".concat(Object(Se.a)(a)),t],dashed:["dashed","dashedColor".concat(Object(Se.a)(a))],bar1:["bar","barColor".concat(Object(Se.a)(a)),("indeterminate"===t||"query"===t)&&"bar1Indeterminate","determinate"===t&&"bar1Determinate","buffer"===t&&"bar1Buffer"],bar2:["bar","buffer"!==t&&"barColor".concat(Object(Se.a)(a)),"buffer"===t&&"color".concat(Object(Se.a)(a)),("indeterminate"===t||"query"===t)&&"bar2Indeterminate","buffer"===t&&"bar2Buffer"]};return Object(Te.a)(r,ke,n)}(u),f=Object(B.a)(),p={},m={bar1:{},bar2:{}};if("determinate"===d||"buffer"===d)if(void 0!==s){p["aria-valuenow"]=Math.round(s),p["aria-valuemin"]=0,p["aria-valuemax"]=100;var y=s-100;"rtl"===f.direction&&(y=-y),m.bar1.transform="translateX(".concat(y,"%)")}else 0;if("buffer"===d)if(void 0!==o){var h=(o||0)-100;"rtl"===f.direction&&(h=-h),m.bar2.transform="translateX(".concat(h,"%)")}else 0;return Object(ce.jsxs)(Xe,Object(Oe.a)({className:Object(we.default)(l.root,a),ownerState:u,role:"progressbar"},p,{ref:n},b,{children:["buffer"===d?Object(ce.jsx)(Ge,{className:l.dashed,ownerState:u}):null,Object(ce.jsx)($e,{className:l.bar1,ownerState:u,style:m.bar1}),"determinate"===d?null:Object(ce.jsx)(Je,{className:l.bar2,ownerState:u,style:m.bar2})]}))}));function Qe(e){var n=e.isCompleted,t=c.useState(0),a=Object(i.a)(t,2),r=a[0],s=a[1],o=c.useState(10),d=Object(i.a)(o,2),b=d[0],u=d[1],l=c.useRef((function(){}));return c.useEffect((function(){l.current=function(){if(n)if(r>100)s(0),u(10);else{var e=5*Math.random(),t=5*Math.random();s(r+e),u(r+e+t)}else s(100),u(100)}})),c.useEffect((function(){var e=setInterval((function(){l.current()}),500);return function(){clearInterval(e)}}),[]),Object(ce.jsx)(I.a,{sx:{width:"100%"},children:Object(ce.jsx)(Ze,{variant:"buffer",value:r,valueBuffer:b})})}var en=t(485),nn=Object(y.a)(),tn=nn.MintItem,an=nn.FreezeItem,rn={isChecking:!1,isExecuting:!1,isCompleted:!1};n.default=function(){var e=Object(b.e)().pathname.includes("edit"),n=Object(b.g)().itemId,t=Object(b.f)(),s=Object(u.b)(),y=Object(c.useState)(!1),w=Object(i.a)(y,2),T=w[0],j=w[1],x=Object(c.useState)(!1),S=Object(i.a)(x,2),R=S[0],k=S[1],A=Object(c.useState)([]),E=Object(i.a)(A,2),M=E[0],P=E[1],F=Object(c.useState)(!1),N=Object(i.a)(F,2),D=N[0],B=N[1],z=Object(c.useState)(null),H=Object(i.a)(z,2),W=H[0],K=H[1],V=Object(c.useState)(!1),Y=Object(i.a)(V,2),X=Y[0],G=Y[1],$=Object(c.useState)(rn),J=Object(i.a)($,2),Z=J[0],Q=J[1],ee=Object(c.useState)(rn),ne=Object(i.a)(ee,2),te=ne[0],ae=ne[1],re=Object(c.useState)(rn),ie=Object(i.a)(re,2),se=ie[0],oe=ie[1],de=Object(c.useState)(0),be=Object(i.a)(de,2),ve=be[0],_e=be[1],Oe=Object(u.c)(l.e),we=Object(u.c)(m.c),Te=Object(u.c)(m.e),je=Object(u.c)(l.d),xe=Object(u.c)(f.p),Se=Object(u.c)(p.j),Ce=Object(u.c)(m.f);Object(c.useEffect)((function(){e&&n&&s(Object(h.a)(n,Ie))}),[Te]),Object(c.useEffect)((function(){we&&Te&&s(Object(ge.a)({pageSize:9999,page:1},{userAddress:we},!0,Re))}),[s,we,Te]),Object(c.useEffect)((function(){Z.isCompleted&&(_e(1),te.isCompleted&&(_e(2),se.isCompleted&&_e(3)))}),[Z,te,se]);var Ie=function(e){e.nftItem.isSuccess||j(!0)},Re=function(){var e=Object(r.a)(o.a.mark((function e(n){var t,a;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((t=n.collection).isSuccess){e.next=5;break}d.b.error("Some error occur when getting your collections!"+t.errorMessage),e.next=20;break;case 5:if(!(t.listCollections.length<=0)){e.next=10;break}k(!0),P([]),e.next=20;break;case 10:return e.prev=10,e.next=13,Promise.all(t.listCollections.map(function(){var e=Object(r.a)(o.a.mark((function e(n,t){var a;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v.a.getCollectionById(n._id);case 2:return a=e.sent,e.abrupt("return",a);case 4:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}()));case 13:a=e.sent,P(a),e.next=20;break;case 17:e.prev=17,e.t0=e.catch(10),d.b.error("Some error occur when getting your collections!");case 20:case"end":return e.stop()}}),e,null,[[10,17]])})));return function(n){return e.apply(this,arguments)}}(),ke=function(){var t=Object(r.a)(o.a.mark((function t(r){var i,s,c,b,u,l,f,p,m,y,h;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(G(!0),i="",t.prev=2,Q(Object(a.a)(Object(a.a)({},Z),{},{isExecuting:!0})),s=r.itemMedia,c=r.itemThumbnail,b={itemMedia:"",itemOriginMedia:""},u={itemMedia:"",itemOriginMedia:""},console.log(c),"string"!==typeof s){t.next=13;break}b.itemMedia=s,t.next=18;break;case 13:return(l=new FormData).append("file",s.raw),t.next=17,_.a.uploadItemMedia(l);case 17:b=t.sent;case 18:if(!c){t.next=28;break}if("string"!==typeof c){t.next=23;break}u.itemMedia=c,t.next=28;break;case 23:return(f=new FormData).append("file",c.raw),t.next=27,_.a.uploadItemMedia(f);case 27:u=t.sent;case 28:if(e){t.next=37;break}return p=Object(a.a)(Object(a.a)({},r),{},{itemMedia:b.itemMedia,itemPreviewMedia:u.itemMedia,itemOriginMedia:b.itemOriginMedia,userAddress:we,creator:we,chainId:Te}),t.next=32,g.a.createNft(p,Te);case 32:m=t.sent,i=m.itemId,d.b.success("Create item success!!"),t.next=43;break;case 37:if(!Oe||!n){t.next=43;break}return y=Object(a.a)(Object(a.a)(Object(a.a)({},Oe),r),{},{itemMedia:b.itemMedia,itemPreviewMedia:u.itemMedia,itemOriginMedia:b.itemOriginMedia}),t.next=41,g.a.updateNftByItemId(y,we,n);case 41:i=n,d.b.success("Update item success!!");case 43:return t.next=45,g.a.getDetailNftItemById(i);case 45:return h=t.sent,K(h),Q(Object(a.a)(Object(a.a)({},Z),{},{isExecuting:!1})),t.next=50,Object(en.a)(1e3);case 50:Q(Object(a.a)(Object(a.a)({},Z),{},{isCompleted:!0})),D&&Ae(h,!0),t.next=58;break;case 54:t.prev=54,t.t0=t.catch(2),d.b.error(t.t0.message),G(!1);case 58:case"end":return t.stop()}}),t,null,[[2,54]])})));return function(e){return t.apply(this,arguments)}}(),Ae=function(){var e=Object(r.a)(o.a.mark((function e(n,t){var r,i;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n&&n.collection&&we){e.next=3;break}return console.log("Missing Field Step 2"),e.abrupt("return");case 3:return ae(t?Object(a.a)(Object(a.a)({},te),{},{isChecking:!0}):Object(a.a)(Object(a.a)({},te),{},{isExecuting:!0})),r={itemTokenId:n.itemTokenId,itemStandard:n.standard,collectionAddress:n.collection.collectionAddress,userAddress:we,web3:Ce},e.next=7,tn(r,t);case 7:i=e.sent,ae(t?Object(a.a)(Object(a.a)({},te),{},{isChecking:!1}):Object(a.a)(Object(a.a)({},te),{},{isExecuting:!1})),ae(i?Object(a.a)(Object(a.a)({},te),{},{isCompleted:!0}):Object(a.a)(Object(a.a)({},te),{},{isCompleted:!1}));case 10:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),Ee=function(){var e=Object(r.a)(o.a.mark((function e(){var n,t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(W&&W.collection&&we){e.next=3;break}return console.log("Missing Field Step 3"),e.abrupt("return");case 3:return oe(Object(a.a)(Object(a.a)({},se),{},{isExecuting:!0})),n={itemId:W.itemId,itemStandard:W.standard,collectionAddress:W.collection.collectionAddress,userAddress:we},e.next=7,an(n);case 7:t=e.sent,oe(Object(a.a)(Object(a.a)({},se),{},{isExecuting:!1})),oe(t?Object(a.a)(Object(a.a)({},se),{},{isCompleted:!0}):Object(a.a)(Object(a.a)({},se),{},{isCompleted:!1}));case 10:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return Object(ce.jsx)(ce.Fragment,{children:je||xe||Se?Object(ce.jsx)(le.default,{}):Object(ce.jsxs)(fe.a,{children:[Object(ce.jsx)(I.a,{children:Object(ce.jsx)(ue,{isEdit:e,currentItem:Oe,listCollectionTemp:M,handleChangeFreezeOption:function(e){B(e.target.checked)},onSubmit:ke})}),Object(ce.jsx)(O.a,{onOpen:X,allowClose:!1,mainHeader:e?"Edit item":"Create item",style:{maxWidth:"450px",overflowY:"auto"},children:Object(ce.jsxs)(pe.a,{activeStep:ve,orientation:"vertical",sx:{mb:2},children:[Object(ce.jsxs)(me.a,{children:[Object(ce.jsx)(ye.a,{optional:Object(ce.jsx)(C.a,{variant:"caption",children:"No gas fees"}),children:"Upload media"}),Object(ce.jsxs)(he.a,{children:[Object(ce.jsx)(C.a,{children:"We are uploading your media to our store."}),Object(ce.jsx)(Qe,{isCompleted:Z.isExecuting})]})]}),D&&Object(ce.jsxs)(me.a,{children:[Object(ce.jsx)(ye.a,{optional:Object(ce.jsx)(C.a,{variant:"caption",children:"Recurring fees"}),children:"Mint item"}),Object(ce.jsxs)(he.a,{children:[Object(ce.jsx)(C.a,{children:"Recurring fees are incurred whenever doing actions on blockchain."}),Object(ce.jsx)(I.a,{sx:{mb:2,mt:1},children:Object(ce.jsxs)(L.a,{onClick:function(){Ae(W,!1)},disabled:te.isChecking||te.isExecuting,sx:{width:"180px"},children:[(te.isChecking||te.isExecuting)&&Object(ce.jsx)(U.a,{sx:{color:"white",mr:1},size:16}),Object(ce.jsx)(C.a,{variant:"button",children:te.isChecking?"Checking...":te.isExecuting?"Executing...":"Mint"})]})})]})]}),D&&Object(ce.jsxs)(me.a,{children:[Object(ce.jsx)(ye.a,{optional:Object(ce.jsx)(C.a,{variant:"caption",children:"Recurring fees"}),children:"Freeze item"}),Object(ce.jsxs)(he.a,{children:[Object(ce.jsx)(C.a,{children:"Freeze data to blockchain."}),Object(ce.jsx)(I.a,{sx:{mb:2},children:Object(ce.jsxs)(L.a,{onClick:function(){Ee()},disabled:se.isChecking||se.isExecuting,sx:{width:"180px",mt:1},children:[(se.isChecking||se.isExecuting)&&Object(ce.jsx)(U.a,{sx:{color:"white",mr:1},size:16}),Object(ce.jsx)(C.a,{variant:"button",children:se.isChecking?"Checking...":se.isExecuting?"Executing...":"Freeze"})]})})]})]}),Object(ce.jsxs)(me.a,{children:[Object(ce.jsxs)(ye.a,{optional:null,children:[e?"Update":"Create"," Successfully"]}),Object(ce.jsxs)(he.a,{children:[Object(ce.jsx)(C.a,{children:e?"Your item is updated!":"Your item is online!"}),Object(ce.jsx)(I.a,{sx:{mb:2},children:Object(ce.jsx)(L.a,{onClick:function(){t("/detail/".concat(null===W||void 0===W?void 0:W.itemId))},sx:{width:"180px",mt:1},children:Object(ce.jsx)(C.a,{variant:"button",children:"View now"})})})]})]})]})}),e&&T?Object(ce.jsx)(O.a,{onOpen:T,mainHeader:"Can not find item!",onClose:function(){t("/my-info-account")},children:Object(ce.jsx)(C.a,{sx:{pb:2,textAlign:"center"},children:"We can not find this item!"})}):"",!e&&R?Object(ce.jsx)(O.a,{onOpen:R,mainHeader:"You have no collection yet!",onClose:function(){t("/my-info-account")},style:{maxWidth:"400px"},children:Object(ce.jsxs)(I.a,{sx:{width:"100%",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column",paddingBottom:"1.5rem"},children:[Object(ce.jsx)(C.a,{children:"Item must be in one specified collection!"}),Object(ce.jsx)(q.a,{alignItems:"center",sx:{mt:2},children:Object(ce.jsx)(L.a,{onClick:function(){t("/collections/create-collection")},sx:{width:"fit-content"},children:"Create A Collection"})})]})}):""]})})}}}]);
//# sourceMappingURL=24.41391d74.chunk.js.map