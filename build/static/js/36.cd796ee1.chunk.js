(this["webpackJsonpforbitswap-nfts-interface-v2"]=this["webpackJsonpforbitswap-nfts-interface-v2"]||[]).push([[36,77,78],{1787:function(e,n,t){"use strict";t.r(n);var a=t(8),r=t(33),i=Object(r.a)("input")((function(e){var n=e.theme;return Object(a.a)(Object(a.a)({display:"block",border:"none",borderRadius:"12px",padding:"15px",outline:"none",width:"100%",fontSize:"16px",fontWeight:500,lineHeight:"16px",color:n.palette.text.primary},"light"===n.palette.mode?{background:n.palette.primaryLight.main}:{background:n.palette.primary.dark}),{},{"&::placeholder":{color:"light"===n.palette.mode?"#000":"#fff",fontSize:"16px",fontWeight:500,opacity:.4}})})),s=t(2);function d(e){e.id;var n=e.type,t=e.registerHookForm,r=e.placeholder,d=e.value,b=e.onChange,o=e.className,c=e.readOnly,u=e.sx,f=e.otherProps;return Object(s.jsx)(i,Object(a.a)(Object(a.a)({type:n,step:"any",className:o},t),{},{placeholder:r,value:d,onChange:b,sx:u,readOnly:c,autoComplete:"off",autoCorrect:"off"},f))}d.defaultProps={onChange:function(e){}};n.default=d},1791:function(e,n,t){"use strict";t.d(n,"e",(function(){return b})),t.d(n,"g",(function(){return o})),t.d(n,"l",(function(){return c})),t.d(n,"k",(function(){return u})),t.d(n,"d",(function(){return f})),t.d(n,"f",(function(){return l})),t.d(n,"a",(function(){return p})),t.d(n,"c",(function(){return m})),t.d(n,"i",(function(){return y})),t.d(n,"j",(function(){return h})),t.d(n,"h",(function(){return g})),t.d(n,"b",(function(){return _}));var a=t(8),r=t(33),i=t(2063),s=t(1761),d=t(1776),b=Object(r.a)(i.a)((function(e){var n=e.theme;return Object(a.a)(Object(a.a)({WebkitTransition:"0.2s all ease-out",MozTransition:"0.2s all ease-out",OTransition:"0.2s all ease-out",transition:"0.2s all ease-out"},"light"===n.palette.mode?{boxShadow:n.customShadows.cardLight}:{border:"2px solid",borderColor:n.palette.primary.main,background:n.palette.gradients.fourth}),{},{"&:hover":Object(a.a)({},"light"===n.palette.mode?{boxShadow:n.customShadows.cardLightHover,transform:"scale(1.01)"}:{background:n.palette.gradients.third})})})),o=Object(r.a)(s.a)((function(e){e.theme;return{position:"relative",width:"100%",paddingTop:"100%",borderRadius:"10px",overflow:"hidden",img:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",maxHeight:"100%"}}})),c=Object(r.a)(d.a)((function(e){return{color:e.theme.palette.text.special}})),u=Object(r.a)(d.a)((function(e){e.theme;return{fontStyle:"italic"}})),f=Object(r.a)(s.a)((function(e){e.theme;return{width:20,height:20,borderRadius:"50%",overflow:"hidden",img:{width:"100%",height:"100%"}}})),l=Object(r.a)(s.a)((function(e){var n=e.theme;return{borderRadius:n.shape.borderRadiusSm,overflow:"hidden",position:"relative",marginTop:2,"&::before":Object(a.a)({content:'""',position:"absolute",height:"100%",width:"100%",opacity:.2,zIndex:-1},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.darker}:{backgroundColor:n.palette.primary.light})}})),p=(Object(r.a)(s.a)((function(e){return{position:"absolute",height:"2.5rem",width:"60%",zIndex:"2",top:"calc(100% - 2.5rem)",left:"0",borderRadius:e.theme.shape.borderRadiusMd,padding:"0.5rem",border:"1px solid #ffffff",backgroundImage:"linear-gradient(52deg,rgb(0, 255, 54) 7%,rgb(0, 238, 87) 17%,rgb(0, 197, 173) 37%,rgb(0, 164, 241) 52%,rgb(11, 24, 252) 88%,rgb(13, 0, 255) 94%)"}})),Object(r.a)(s.a)((function(e){e.theme;return{transition:"all 0.6s ease",cursor:"pointer",":hover":{zIndex:3,transform:"translateY(-5px)"}}}))),m=Object(r.a)(s.a)({borderRadius:"50%",width:25,height:25}),y=Object(r.a)(s.a)({video:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",maxHeight:"100%"}}),h=Object(r.a)(s.a)((function(e){var n=e.theme;return Object(a.a)({position:"absolute",bottom:0,left:0,zIndex:2,borderRadius:"50%",width:32,height:32,display:"flex",alignItems:"center",justifyContent:"center"},"light"===n.palette.mode?{backgroundColor:"#D8D8D8","&:hover":{backgroundColor:"#BBBBBB"}}:{backgroundColor:"rgb(53, 56, 64)","&:hover":{backgroundColor:"#595B64"}})})),g=Object(r.a)(s.a)({width:"100%",height:"100%",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",padding:10,textAlign:"center"}),_=Object(r.a)(s.a)({width:"100%",height:"100%",display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",padding:10,textAlign:"center"})},1793:function(e,n,t){"use strict";n.a=t.p+"static/media/no-offers.294ed349.webp"},1794:function(e,n,t){"use strict";t.r(n);t(0);var a=t(1713),r=t(33),i=t(1762),s=t(1761),d=t(1776),b=Object(r.a)(i.a)((function(e){e.theme;return{alignItems:"center",width:"100%",padding:33}})),o=Object(r.a)(s.a)((function(e){e.theme;return{width:170,height:170,borderRadius:"50%",position:"relative",boxShadow:"0px 0px 15px rgba(0, 0,0,0.2)","&::before":{content:'""',position:"absolute",top:0,left:0,width:"100%",height:"100%",background:"rgba(255, 255, 255, 0.05)",borderRadius:"50%"}}})),c=Object(r.a)(i.a)((function(e){e.theme;return{alignItems:"center",position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}})),u=Object(r.a)(s.a)((function(e){e.theme;return{width:50,height:50,img:{width:"100%",height:"100%"}}})),f=Object(r.a)(d.a)((function(e){e.theme;return{marginTop:12,whiteSpace:"nowrap"}})),l=t(167),p=t(2),m={repeat:1/0,ease:"linear",duration:10};n.default=function(e){var n=e.title,t=e.image;return Object(p.jsx)(b,{className:"b",children:Object(p.jsxs)(o,{children:[Object(p.jsxs)(a.a.div,{style:{position:"absolute",height:170,width:170,borderRadius:"50%"},animate:{rotate:360},transition:m,children:[Object(p.jsx)(l.d,{sx:{left:"50%",backgroundColor:"#00BBDC",width:"12px",height:"12px"}}),Object(p.jsx)(l.d,{sx:{left:"10%",bottom:"20%",backgroundColor:"#46FE96",width:"12px",height:"12px"}}),Object(p.jsx)(l.d,{sx:{right:"10%",bottom:"20%",backgroundColor:"#C2EAFF",width:"12px",height:"12px"}})]}),Object(p.jsxs)(c,{className:"a",children:[Object(p.jsx)(u,{children:Object(p.jsx)("img",{src:t,alt:"no item"})}),Object(p.jsx)(f,{variant:"body2",children:n})]})]})})}},1849:function(e){e.exports=JSON.parse('{"address":"0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a","abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"address","name":"_proxyRegistryAddress","type":"address"},{"internalType":"string","name":"_templateURI","type":"string"},{"internalType":"address","name":"_migrationAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":true,"internalType":"address","name":"_creator","type":"address"}],"name":"CreatorChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"userAddress","type":"address"},{"indexed":false,"internalType":"address payable","name":"relayerAddress","type":"address"},{"indexed":false,"internalType":"bytes","name":"functionSignature","type":"bytes"}],"name":"MetaTransactionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"PermanentURI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_uri","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ERC712_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"addSharedProxyAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_quantities","type":"uint256[]"}],"name":"batchBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_quantities","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"creator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"disableMigrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"bytes","name":"functionSignature","type":"bytes"},{"internalType":"bytes32","name":"sigR","type":"bytes32"},{"internalType":"bytes32","name":"sigS","type":"bytes32"},{"internalType":"uint8","name":"sigV","type":"uint8"}],"name":"executeMetaTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDomainSeperator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"isOperator","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"isPermanentURI","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"internalType":"struct ForbitswapNFTSAssetShared.Ownership[]","name":"_ownerships","type":"tuple[]"}],"name":"migrate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"migrationTarget","outputs":[{"internalType":"contract ForbitswapNFTSAssetShared","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_quantity","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proxyRegistryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"removeSharedProxyAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"address","name":"_to","type":"address"}],"name":"setCreator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"setPermanentURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"setProxyRegistryAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_uri","type":"string"}],"name":"setTemplateURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_uri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"sharedProxyAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"supportsFactoryInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"templateURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0","receipt":{"to":null,"from":"0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8","contractAddress":"0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a","transactionIndex":0,"gasUsed":"3753980","logsBloom":"0xblockHash":"0x56ce0865f9030d9a9a50ea36867649aa1393d4d2acfd36b65572beafaa9e7c6d","transactionHash":"0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0","logs":[{"transactionIndex":0,"blockNumber":10331052,"transactionHash":"0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0","address":"0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x00000000000000000000000000b91b2f8afe87fcdc2b3ffa9ee2278cd1e4ddf8"],"data":"0x","logIndex":0,"blockHash":"0x56ce0865f9030d9a9a50ea36867649aa1393d4d2acfd36b65572beafaa9e7c6d"}],"blockNumber":10331052,"cumulativeGasUsed":"3753980","status":1,"byzantium":true},"args":["Forbit Migration contracts","FMC","0x14aFCbb771B02743234aF08e7DDd8647f42A5b58","","0x12F571d5Cd4D20C9D83D0D222516Dfb3299Ff29D"],"solcInputHash":"98c15b4f3559a23f2599202e42791894","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"_name\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_symbol\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_proxyRegistryAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_templateURI\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_migrationAddress\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"_creator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"CreatorChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"userAddress\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address payable\\",\\"name\\":\\"relayerAddress\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"functionSignature\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"MetaTransactionExecuted\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Paused\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"_value\\",\\"type\\":\\"string\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"PermanentURI\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ids\\",\\"type\\":\\"uint256[]\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"values\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"TransferBatch\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"TransferSingle\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"URI\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unpaused\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"ERC712_VERSION\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addSharedProxyAddress\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"accounts\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ids\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"balanceOfBatch\\",\\"outputs\\":[{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"\\",\\"type\\":\\"uint256[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_ids\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_quantities\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"batchBurn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_ids\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_quantities\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"batchMint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_quantity\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"burn\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"creator\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"disableMigrate\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"userAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"functionSignature\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"sigR\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"sigS\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint8\\",\\"name\\":\\"sigV\\",\\"type\\":\\"uint8\\"}],\\"name\\":\\"executeMetaTransaction\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"exists\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getChainId\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"getDomainSeperator\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"user\\",\\"type\\":\\"address\\"}],\\"name\\":\\"getNonce\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"nonce\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"isOperator\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"isPermanentURI\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"maxSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"components\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"internalType\\":\\"struct ForbitswapNFTSAssetShared.Ownership[]\\",\\"name\\":\\"_ownerships\\",\\"type\\":\\"tuple[]\\"}],\\"name\\":\\"migrate\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"migrationTarget\\",\\"outputs\\":[{\\"internalType\\":\\"contract ForbitswapNFTSAssetShared\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_quantity\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"paused\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"proxyRegistryAddress\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"removeSharedProxyAddress\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_ids\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"_amounts\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeBatchTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"_data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setCreator\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setPermanentURI\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setProxyRegistryAddress\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setTemplateURI\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"_uri\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setURI\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"sharedProxyAddresses\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"supportsFactoryInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"pure\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceId\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"templateURI\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"unpause\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"uri\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"balanceOfBatch(address[],uint256[])\\":{\\"details\\":\\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\\"},\\"batchBurn(address,uint256[],uint256[])\\":{\\"details\\":\\"Burns tokens for each id in _ids\\",\\"params\\":{\\"_from\\":\\"The address to burn tokens from\\",\\"_ids\\":\\"Array of token ids to burn\\",\\"_quantities\\":\\"Array of the amount to be burned\\"}},\\"batchMint(address,uint256[],uint256[],bytes)\\":{\\"details\\":\\"Mint tokens for each id in _ids\\",\\"params\\":{\\"_data\\":\\"Data to pass if receiver is contract\\",\\"_ids\\":\\"Array of ids to mint\\",\\"_quantities\\":\\"Array of amounts of tokens to mint per id\\",\\"_to\\":\\"The address to mint tokens to\\"}},\\"burn(address,uint256,uint256)\\":{\\"details\\":\\"Burns amount of a given token id\\",\\"params\\":{\\"_from\\":\\"The address to burn tokens from\\",\\"_id\\":\\"Token ID to burn\\",\\"_quantity\\":\\"Amount to burn\\"}},\\"exists(uint256)\\":{\\"details\\":\\"Returns whether the specified token is minted\\"},\\"mint(address,uint256,uint256,bytes)\\":{\\"details\\":\\"Mints some amount of tokens to an address\\",\\"params\\":{\\"_data\\":\\"Data to pass if receiver is contract\\",\\"_id\\":\\"Token ID to mint\\",\\"_quantity\\":\\"Amount of tokens to mint\\",\\"_to\\":\\"Address of the future owner of the token\\"}},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"paused()\\":{\\"details\\":\\"Return true if the contract is paused, and false otherwise\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC1155-setApprovalForAll}.\\"},\\"supportsInterface(bytes4)\\":{\\"details\\":\\"See {IERC165-supportsInterface}.\\"},\\"totalSupply(uint256)\\":{\\"details\\":\\"Returns the total quantity for a token ID\\",\\"params\\":{\\"_id\\":\\"Id of token to query\\"},\\"returns\\":{\\"_0\\":\\"Amount of token in existence\\"}},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/collectible/ForbitswapNFTSAssetShared.sol\\":\\"ForbitswapNFTSAssetShared\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{\\":__CACHE_BREAKER__\\":\\"0x00000000d41867734bbee4c6863d9255b2b06ac1\\"},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(\\\\n        address indexed previousOwner,\\\\n        address indexed newOwner\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _setOwner(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _setOwner(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(\\\\n            newOwner != address(0),\\\\n            \\\\\\"Ownable: new owner is the zero address\\\\\\"\\\\n        );\\\\n        _setOwner(newOwner);\\\\n    }\\\\n\\\\n    function _setOwner(address newOwner) private {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5c8ae508c9208b232eada2cf40a774371336fad5b9f3a921fdfdaa007bf23c5e\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/ERC1155Custom.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"../token/ERC1155/ERC1155.sol\\\\\\";\\\\nimport \\\\\\"../utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"../utils/libraries/Strings.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./meta-transaction/ContextMixin.sol\\\\\\";\\\\nimport \\\\\\"./meta-transaction/NativeMetaTransaction.sol\\\\\\";\\\\nimport \\\\\\"../utils/Pausable.sol\\\\\\";\\\\n// import \\\\\\"../market/ProxyRegistry.sol\\\\\\";\\\\n\\\\ncontract OwnableDelegateProxy {}\\\\n\\\\ncontract ProxyRegistry {\\\\n  mapping(address => OwnableDelegateProxy) public proxies;\\\\n}\\\\n\\\\ncontract ERC1155Custom is ContextMixin, ERC1155, NativeMetaTransaction, Ownable, Pausable {\\\\n  using Address for address;\\\\n\\\\n  address public proxyRegistryAddress;\\\\n  string public name;\\\\n  string public symbol;\\\\n\\\\n  mapping(uint256 => mapping(address => uint256)) private balances;\\\\n  mapping(uint256 => uint256) private _supply;\\\\n\\\\n  event URI(string _uri, uint256 indexed _id);\\\\n\\\\n  modifier onlyOwnerOrProxy() {\\\\n    require(\\\\n      _isOwnerOrProxy(_msgSender()),\\\\n      \\\\\\"ERC1155Trandable: CALLER_IS_NOT_OWNER\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  modifier onlyApproved(address _from) {\\\\n    require(\\\\n      _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\\\\n      \\\\\\"ERC1155Trandable: CALLER_NOT_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  constructor(\\\\n    string memory _name,\\\\n    string memory _symbol,\\\\n    string memory _uri,\\\\n    address _proxyRegistryAddress\\\\n  ) ERC1155(_uri) {\\\\n    name = _name;\\\\n    symbol = _symbol;\\\\n    proxyRegistryAddress = _proxyRegistryAddress;\\\\n    _initializeEIP712(name);\\\\n  }\\\\n\\\\n  function _isOwnerOrProxy(address _address) internal view returns (bool) {\\\\n    return owner() == _address || _isProxyForUser(owner(), _address);\\\\n  }\\\\n\\\\n  function pause() external onlyOwnerOrProxy {\\\\n    _pause();\\\\n  }\\\\n\\\\n  function unpause() external onlyOwnerOrProxy {\\\\n    _unpause();\\\\n  }\\\\n\\\\n  function balanceOf(address account, uint256 id)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (uint256)\\\\n  {\\\\n    require(account != address(0), \\\\\\"ERC1155: balance query for the zero address\\\\\\");\\\\n    return balances[id][account];\\\\n  }\\\\n\\\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (uint256[] memory)\\\\n  {\\\\n    require(\\\\n      accounts.length == ids.length,\\\\n      \\\\\\"ERC1155: accounts and ids length mismatch\\\\\\"\\\\n    );\\\\n\\\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\\\n\\\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\\\n    }\\\\n\\\\n    return batchBalances;\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Returns the total quantity for a token ID\\\\n   * @param _id Id of token to query\\\\n   * @return Amount of token in existence\\\\n   */\\\\n  function totalSupply(uint256 _id) public view returns (uint256) {\\\\n    return _supply[_id];\\\\n  }\\\\n\\\\n  function isApprovedForAll(address _owner, address _operator)\\\\n    public\\\\n    view\\\\n    override\\\\n    returns (bool isOperator)\\\\n  {\\\\n    if (_isProxyForUser(_owner, _operator)) {\\\\n      return true;\\\\n    }\\\\n\\\\n    return super.isApprovedForAll(_owner, _operator);\\\\n  }\\\\n\\\\n  function safeTransferFrom(\\\\n    address from,\\\\n    address to,\\\\n    uint256 id,\\\\n    uint256 amount,\\\\n    bytes memory data\\\\n  ) public virtual override whenNotPaused onlyApproved(from) {\\\\n    require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(\\\\n      operator,\\\\n      from,\\\\n      to,\\\\n      asSingletonArray(id),\\\\n      asSingletonArray(amount),\\\\n      data\\\\n    );\\\\n\\\\n    uint256 fromBalance = balances[id][from];\\\\n    require(\\\\n      fromBalance >= amount,\\\\n      \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n    );\\\\n    balances[id][from] = fromBalance - amount;\\\\n    balances[id][to] += amount;\\\\n\\\\n    emit TransferSingle(operator, from, to, id, amount);\\\\n\\\\n    doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\\\n  }\\\\n\\\\n  function safeBatchTransferFrom(\\\\n    address from,\\\\n    address to,\\\\n    uint256[] memory ids,\\\\n    uint256[] memory amounts,\\\\n    bytes memory data\\\\n  ) public virtual override whenNotPaused onlyApproved(from) {\\\\n    require(\\\\n      ids.length == amounts.length,\\\\n      \\\\\\"ERC1155: IDS_AMOUNTS_LENGTH_MISMATCH\\\\\\"\\\\n    );\\\\n    require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\\\n\\\\n    for (uint256 i = 0; i < ids.length; ++i) {\\\\n      uint256 id = ids[i];\\\\n      uint256 amount = amounts[i];\\\\n\\\\n      uint256 fromBalance = balances[id][from];\\\\n      require(\\\\n        fromBalance >= amount,\\\\n        \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n      );\\\\n      balances[id][from] = fromBalance - amount;\\\\n      balances[id][to] += amount;\\\\n    }\\\\n\\\\n    emit TransferBatch(operator, from, to, ids, amounts);\\\\n\\\\n    doSafeBatchTransferAcceptanceCheck(\\\\n      operator,\\\\n      from,\\\\n      to,\\\\n      ids,\\\\n      amounts,\\\\n      data\\\\n    );\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Hook called before minting\\\\n   * @param _id Token ID to mint\\\\n   * @param _quantity Amount of tokens to mint\\\\n   */\\\\n  function _beforeMint(uint256 _id, uint256 _quantity) internal virtual {}\\\\n\\\\n  /**\\\\n   * @dev Mints some amount of tokens to an address\\\\n   * @param _to Address of the future owner of the token\\\\n   * @param _id Token ID to mint\\\\n   * @param _quantity Amount of tokens to mint\\\\n   * @param _data Data to pass if receiver is contract\\\\n   */\\\\n  function mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _quantity,\\\\n    bytes memory _data\\\\n  ) public virtual onlyOwnerOrProxy {\\\\n    _mint(_to, _id, _quantity, _data);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Mint tokens for each id in _ids\\\\n   * @param _to The address to mint tokens to\\\\n   * @param _ids Array of ids to mint\\\\n   * @param _quantities Array of amounts of tokens to mint per id\\\\n   * @param _data Data to pass if receiver is contract\\\\n   */\\\\n  function batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities,\\\\n    bytes memory _data\\\\n  ) public virtual onlyOwnerOrProxy {\\\\n    _batchMint(_to, _ids, _quantities, _data);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Burns amount of a given token id\\\\n   * @param _from The address to burn tokens from\\\\n   * @param _id Token ID to burn\\\\n   * @param _quantity Amount to burn\\\\n   */\\\\n  function burn(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) public virtual onlyApproved(_from) {\\\\n    _burn(_from, _id, _quantity);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Burns tokens for each id in _ids\\\\n   * @param _from The address to burn tokens from\\\\n   * @param _ids Array of token ids to burn\\\\n   * @param _quantities Array of the amount to be burned\\\\n   */\\\\n  function batchBurn(\\\\n    address _from,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities\\\\n  ) public virtual onlyApproved(_from) {\\\\n    _burnBatch(_from, _ids, _quantities);\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Returns whether the specified token is minted\\\\n   */\\\\n  function exists(uint256 _id) public view returns (bool) {\\\\n    return _supply[_id] > 0;\\\\n  }\\\\n\\\\n  function _mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _amount,\\\\n    bytes memory _data\\\\n  ) internal virtual override whenNotPaused {\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(\\\\n      operator,\\\\n      address(0),\\\\n      _to,\\\\n      asSingletonArray(_id),\\\\n      asSingletonArray(_amount),\\\\n      _data\\\\n    );\\\\n\\\\n    _beforeMint(_id, _amount);\\\\n\\\\n    balances[_id][_to] += _amount;\\\\n    _supply[_id] += _amount;\\\\n\\\\n    emit TransferSingle(operator, address(0), _to, _id, _amount);\\\\n\\\\n    doSafeTransferAcceptanceCheck(\\\\n      operator,\\\\n      address(0),\\\\n      _to,\\\\n      _id,\\\\n      _amount,\\\\n      _data\\\\n    );\\\\n  }\\\\n\\\\n  function _batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _amounts,\\\\n    bytes memory _data\\\\n  ) internal virtual whenNotPaused {\\\\n    require(\\\\n      _ids.length == _amounts.length,\\\\n      \\\\\\"INVALID_ARRAYS_LENGTH\\\\\\"\\\\n    );\\\\n\\\\n    uint256 nMint = _ids.length;\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(operator, address(0), _to, _ids, _amounts, _data);\\\\n\\\\n    for (uint256 i = 0; i < nMint; i++) {\\\\n      uint256 id = _ids[i];\\\\n      uint256 amount = _amounts[i];\\\\n      _beforeMint(id, amount);\\\\n      balances[id][_to] += amount;\\\\n      _supply[id] += amount;\\\\n    }\\\\n\\\\n    emit TransferBatch(operator, address(0), _to, _ids, _amounts);\\\\n\\\\n    doSafeBatchTransferAcceptanceCheck(\\\\n      operator,\\\\n      address(0),\\\\n      _to,\\\\n      _ids,\\\\n      _amounts,\\\\n      _data\\\\n    );\\\\n  }\\\\n\\\\n  function _burn(\\\\n    address account,\\\\n    uint256 id,\\\\n    uint256 amount\\\\n  ) internal override whenNotPaused {\\\\n    require(account != address(0), \\\\\\"BURN_FROM_ZERO_ADDRESS\\\\\\");\\\\n    require(amount > 0, \\\\\\"AMOUNT_LESS_THAN_ONE\\\\\\");\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(\\\\n      operator,\\\\n      account,\\\\n      address(0),\\\\n      asSingletonArray(id),\\\\n      asSingletonArray(amount),\\\\n      \\\\\\"\\\\\\"\\\\n    );\\\\n\\\\n    uint256 accountBalance = balances[id][account];\\\\n    require(\\\\n      accountBalance >= amount,\\\\n      \\\\\\"AMOUNT_EXCEEDS_BALANCE\\\\\\"\\\\n    );\\\\n    balances[id][account] = accountBalance - amount;\\\\n    _supply[id] -= amount;\\\\n\\\\n    emit TransferSingle(operator, account, address(0), id, amount);\\\\n  }\\\\n\\\\n  function _burnBatch(\\\\n    address account,\\\\n    uint256[] memory ids,\\\\n    uint256[] memory amounts\\\\n  ) internal override whenNotPaused {\\\\n    require(account != address(0), \\\\\\"BURN_FROM_ZERO_ADDRESS\\\\\\");\\\\n    require(\\\\n      ids.length == amounts.length,\\\\n      \\\\\\"IDS_AMOUNTS_LENGTH_MISMATCH\\\\\\"\\\\n    );\\\\n\\\\n    address operator = _msgSender();\\\\n\\\\n    _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\\\\"\\\\\\");\\\\n\\\\n    for (uint256 i = 0; i < ids.length; i++) {\\\\n      uint256 id = ids[i];\\\\n      uint256 amount = amounts[i];\\\\n\\\\n      uint256 accountBalance = balances[id][account];\\\\n      require(\\\\n        accountBalance >= amount,\\\\n        \\\\\\"AMOUNT_EXCEEDS_BALANCE\\\\\\"\\\\n      );\\\\n      balances[id][account] = accountBalance - amount;\\\\n      _supply[id] -= amount;\\\\n    }\\\\n\\\\n    emit TransferBatch(operator, account, address(0), ids, amounts);\\\\n  }\\\\n\\\\n  function _isProxyForUser(address _user, address _address)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    returns (bool)\\\\n  {\\\\n    if (!proxyRegistryAddress.isContract()) {\\\\n      return false;\\\\n    }\\\\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\\\n    return address(proxyRegistry.proxies(_user)) == _address;\\\\n  }\\\\n\\\\n  function doSafeTransferAcceptanceCheck(\\\\n    address operator,\\\\n    address from,\\\\n    address to,\\\\n    uint256 id,\\\\n    uint256 amount,\\\\n    bytes memory data\\\\n  ) private {\\\\n    if (to.isContract()) {\\\\n      try\\\\n        IERC1155Receiver(to).onERC1155Received(\\\\n          operator,\\\\n          from,\\\\n          id,\\\\n          amount,\\\\n          data\\\\n        )\\\\n      returns (bytes4 response) {\\\\n        if (\\\\n          response != IERC1155Receiver(to).onERC1155Received.selector\\\\n        ) {\\\\n          revert(\\\\\\"ERC1155Receiver rejected tokens\\\\\\");\\\\n        }\\\\n      } catch Error(string memory reason) {\\\\n        revert(reason);\\\\n      } catch {\\\\n        revert(\\\\\\"Transfer to non ERC1155Receiver\\\\\\");\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function doSafeBatchTransferAcceptanceCheck(\\\\n    address operator,\\\\n    address from,\\\\n    address to,\\\\n    uint256[] memory ids,\\\\n    uint256[] memory amounts,\\\\n    bytes memory data\\\\n  ) internal {\\\\n    if (to.isContract()) {\\\\n      try\\\\n        IERC1155Receiver(to).onERC1155BatchReceived(\\\\n          operator,\\\\n          from,\\\\n          ids,\\\\n          amounts,\\\\n          data\\\\n        )\\\\n      returns (bytes4 response) {\\\\n        if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\\\n          revert(\\\\\\"ERC1155Receiver rejected tokens\\\\\\");\\\\n        }\\\\n      } catch Error(string memory reason) {\\\\n        revert(reason);\\\\n      } catch {\\\\n        revert(\\\\\\"Transfer to non ERC1155Receiver\\\\\\");\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function asSingletonArray(uint256 element)\\\\n    private\\\\n    pure\\\\n    returns (uint256[] memory)\\\\n  {\\\\n    uint256[] memory array = new uint256[](1);\\\\n    array[0] = element;\\\\n    return array;\\\\n  }\\\\n\\\\n  function _msgSender() internal view override returns (address sender) {\\\\n    return ContextMixin.msgSender();\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0xc5c99f65388b09e780b27c07915a897a30b676fe2307a30023c156b528155c01\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/ForbitswapNFTSAsset.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ERC1155Custom.sol\\\\\\";\\\\n\\\\ncontract ForbitswapNFTSAsset is ERC1155Custom {\\\\n  uint256 constant TOKEN_SUPPLY_CAP = 1;\\\\n  string public templateURI;\\\\n\\\\n  mapping(uint256 => string) private _tokenURI;\\\\n  mapping(uint256 => bool) private _isPermanentURI;\\\\n\\\\n  event PermanentURI(string _value, uint256 indexed _id);\\\\n\\\\n  modifier onlyTokenAmountOwned(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) {\\\\n    require(\\\\n      _ownsTokenAmount(_from, _id, _quantity),\\\\n      \\\\\\"ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  modifier onlyImpermanentURI(uint256 id) {\\\\n    require(\\\\n      !isPermanentURI(id),\\\\n      \\\\\\"URI_CANNOT_BE_CHANGED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  constructor(\\\\n    string memory _name,\\\\n    string memory _symbol,\\\\n    address _proxyRegistryAddress,\\\\n    string memory _templateURI\\\\n  ) ERC1155Custom(_name, _symbol, \\\\\\"\\\\\\", _proxyRegistryAddress) {\\\\n    if (bytes(_templateURI).length > 0) {\\\\n      setTemplateURI(_templateURI);\\\\n    }\\\\n  }\\\\n\\\\n  function _ownsTokenAmount(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) internal view returns (bool) {\\\\n    return balanceOf(_from, _id) >= _quantity;\\\\n  }\\\\n\\\\n  function supportsFactoryInterface() public pure returns (bool) {\\\\n    return true;\\\\n  }\\\\n\\\\n  function setTemplateURI(string memory _uri) public onlyOwnerOrProxy {\\\\n    templateURI = _uri;\\\\n  }\\\\n\\\\n  function setURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    virtual\\\\n    onlyOwnerOrProxy\\\\n    onlyImpermanentURI(_id)\\\\n  {\\\\n    _setURI(_id, _uri);\\\\n  }\\\\n\\\\n  function setPermanentURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    virtual\\\\n    onlyOwnerOrProxy\\\\n    onlyImpermanentURI(_id)\\\\n  {\\\\n    _setPermanentURI(_id, _uri);\\\\n  }\\\\n\\\\n  function isPermanentURI(uint256 _id) public view returns (bool) {\\\\n    return _isPermanentURI[_id];\\\\n  }\\\\n\\\\n  function uri(uint256 _id) public view override returns (string memory) {\\\\n    string memory tokenUri = _tokenURI[_id];\\\\n    if (bytes(tokenUri).length != 0) {\\\\n      return tokenUri;\\\\n    }\\\\n    return templateURI;\\\\n  }\\\\n\\\\n  function balanceOf(address _owner, uint256 _id)\\\\n    public\\\\n    view\\\\n    virtual\\\\n    override\\\\n    returns (uint256)\\\\n  {\\\\n    uint256 balance = super.balanceOf(_owner, _id);\\\\n    return \\\\n      _isCreatorOrProxy(_owner)\\\\n        ? balance + _remainingSupply(_id)\\\\n        : balance;\\\\n  }\\\\n\\\\n  function safeTransferFrom(\\\\n    address _from,\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _amount,\\\\n    bytes memory _data\\\\n  ) public override {\\\\n    uint256 mintedBalance = super.balanceOf(_from, _id);\\\\n    if (mintedBalance < _amount) {\\\\n      mint(_to, _id, _amount - mintedBalance, _data);\\\\n      if (mintedBalance > 0) {\\\\n        super.safeTransferFrom(_from, _to, _id, mintedBalance, _data);\\\\n      }\\\\n    } else {\\\\n      super.safeTransferFrom(_from, _to, _id, _amount, _data);\\\\n    }\\\\n  }\\\\n\\\\n  function safeBatchTransferFrom(\\\\n    address _from,\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _amounts,\\\\n    bytes memory _data\\\\n  ) public override {\\\\n    require(\\\\n      _ids.length == _amounts.length,\\\\n      \\\\\\"INVALID_ARRAYS_LENGTH\\\\\\"\\\\n    );\\\\n    for (uint256 i = 0; i < _ids.length; i++) {\\\\n      safeTransferFrom(_from, _to, _ids[i], _amounts[i], _data);\\\\n    }\\\\n  }\\\\n\\\\n  function _beforeMint(uint256 _id, uint256 _quantity)\\\\n    internal\\\\n    view\\\\n    override\\\\n  {\\\\n    require(\\\\n      _quantity <= _remainingSupply(_id),\\\\n      \\\\\\"QUANTITY_EXCEEDS_TOKEN_SUPPLY_CAP\\\\\\"\\\\n    );\\\\n  }\\\\n\\\\n  function burn(\\\\n    address _from,\\\\n    uint256 _id,\\\\n    uint256 _quantity\\\\n  ) public override onlyTokenAmountOwned(_from, _id, _quantity) {\\\\n    super.burn(_from, _id, _quantity);\\\\n  }\\\\n\\\\n  function batchBurn(\\\\n    address _from,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities\\\\n  ) public override {\\\\n    for (uint256 i = 0; i < _ids.length; i++) {\\\\n      require(\\\\n        _ownsTokenAmount(_from, _ids[i], _quantities[i]),\\\\n        \\\\\\"ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\\\\"\\\\n      );\\\\n    }\\\\n    super.batchBurn(_from, _ids, _quantities);\\\\n  }\\\\n\\\\n  function _mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _quantity,\\\\n    bytes memory _data\\\\n  ) internal override {\\\\n    super._mint(_to, _id, _quantity, _data);\\\\n    if (_data.length > 1) {\\\\n      _setURI(_id, string(_data));\\\\n    }\\\\n  }\\\\n\\\\n  function _isCreatorOrProxy(address _address)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    returns (bool)\\\\n  {\\\\n    return _isOwnerOrProxy(_address);\\\\n  }\\\\n\\\\n  function _remainingSupply(uint256 _id)\\\\n    internal\\\\n    view\\\\n    virtual\\\\n    returns (uint256)\\\\n  {\\\\n    return TOKEN_SUPPLY_CAP - totalSupply(_id);\\\\n  }\\\\n\\\\n  function _origin() internal view virtual returns (address) {\\\\n    return owner();\\\\n  }\\\\n\\\\n  function _batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities,\\\\n    bytes memory _data\\\\n  ) internal virtual override {\\\\n    super._batchMint(_to, _ids, _quantities, _data);\\\\n    if (_data.length > 1) {\\\\n      for (uint256 i = 0; i < _ids.length; i++) {\\\\n        _setURI(_ids[i], string(_data));\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function _setURI(uint256 _id, string memory _uri) internal {\\\\n    _tokenURI[_id] = _uri;\\\\n    emit URI(_uri, _id);\\\\n  }\\\\n\\\\n  function _setPermanentURI(uint256 _id, string memory _uri)\\\\n    internal\\\\n    virtual\\\\n  {\\\\n    require(\\\\n      bytes(_uri).length > 0,\\\\n      \\\\\\"ONLY_VALID_URI\\\\\\"\\\\n    );\\\\n    _isPermanentURI[_id] = true;\\\\n    _setURI(_id, _uri);\\\\n    emit PermanentURI(_uri, _id);\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x9afcb43aa9e8d90ae405e08e8081a3091aa6315cdc84cf4643a8568cb243def1\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/ForbitswapNFTSAssetShared.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./ForbitswapNFTSAsset.sol\\\\\\";\\\\nimport \\\\\\"./TokenIdentifiers.sol\\\\\\";\\\\nimport \\\\\\"../utils/ReentrancyGuard.sol\\\\\\";\\\\n\\\\ncontract ForbitswapNFTSAssetShared is ForbitswapNFTSAsset, ReentrancyGuard {\\\\n  using TokenIdentifiers for uint256;\\\\n\\\\n  ForbitswapNFTSAssetShared public migrationTarget;\\\\n\\\\n  mapping(address => bool) public sharedProxyAddresses;\\\\n\\\\n  struct Ownership {\\\\n    uint256 id;\\\\n    address owner;\\\\n  }\\\\n\\\\n  mapping(uint256 => address) internal _creatorOverride;\\\\n\\\\n  event CreatorChanged(uint256 indexed _id, address indexed _creator);\\\\n\\\\n  modifier creatorOnly(uint256 _id) {\\\\n    require(\\\\n      _isCreatorOrProxy(_id, _msgSender()),\\\\n      \\\\\\"ONLY_CREATOR_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  modifier onlyFullTokenOwner(uint256 _id) {\\\\n    require(\\\\n      _ownsTokenAmount(_msgSender(), _id, _id.tokenMaxSupply()),\\\\n      \\\\\\"ONLY_FULL_TOKEN_OWNER_ALLOWED\\\\\\"\\\\n    );\\\\n    _;\\\\n  }\\\\n\\\\n  constructor(\\\\n    string memory _name,\\\\n    string memory _symbol,\\\\n    address _proxyRegistryAddress,\\\\n    string memory _templateURI,\\\\n    address _migrationAddress\\\\n  ) ForbitswapNFTSAsset(_name, _symbol, _proxyRegistryAddress, _templateURI) {\\\\n    migrationTarget = ForbitswapNFTSAssetShared(_migrationAddress);\\\\n  }\\\\n\\\\n  function setProxyRegistryAddress(address _address) public onlyOwnerOrProxy {\\\\n    proxyRegistryAddress = _address;\\\\n  }\\\\n\\\\n  function addSharedProxyAddress(address _address) public onlyOwnerOrProxy {\\\\n    sharedProxyAddresses[_address] = true;\\\\n  }\\\\n\\\\n  function removeSharedProxyAddress(address _address) public onlyOwnerOrProxy {\\\\n    delete sharedProxyAddresses[_address];\\\\n  }\\\\n\\\\n  function disableMigrate() public onlyOwnerOrProxy {\\\\n    migrationTarget = ForbitswapNFTSAssetShared(address(0));\\\\n  }\\\\n\\\\n  function migrate(Ownership[] memory _ownerships) public onlyOwnerOrProxy {\\\\n    ForbitswapNFTSAssetShared _migrationTarget = migrationTarget;\\\\n    require(\\\\n      _migrationTarget != ForbitswapNFTSAssetShared(address(0)),\\\\n      \\\\\\"MIGRATE_DISABLED\\\\\\"\\\\n    );\\\\n\\\\n    string memory _migrationTargetTemplateURI = _migrationTarget.templateURI();\\\\n\\\\n    for (uint256 i = 0; i < _ownerships.length; ++i) {\\\\n      uint256 id = _ownerships[i].id;\\\\n      address owner = _ownerships[i].owner;\\\\n\\\\n      require(\\\\n        owner != address(0),\\\\n        \\\\\\"ZERO_ADDRESS_NOT_ALLOWED\\\\\\"\\\\n      );\\\\n\\\\n      uint256 previousAmount = _migrationTarget.balanceOf(owner, id);\\\\n\\\\n      if (previousAmount == 0) {\\\\n        continue;\\\\n      }\\\\n\\\\n      _mint(owner, id, previousAmount, \\\\\\"\\\\\\");\\\\n\\\\n      if (\\\\n        keccak256(bytes(_migrationTarget.uri(id))) !=\\\\n        keccak256(bytes(_migrationTargetTemplateURI))\\\\n      ) {\\\\n        _setPermanentURI(id, _migrationTarget.uri(id));\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  function mint(\\\\n    address _to,\\\\n    uint256 _id,\\\\n    uint256 _quantity,\\\\n    bytes memory _data\\\\n  ) public override nonReentrant creatorOnly(_id) {\\\\n    _mint(_to, _id, _quantity, _data);\\\\n  }\\\\n\\\\n  function batchMint(\\\\n    address _to,\\\\n    uint256[] memory _ids,\\\\n    uint256[] memory _quantities,\\\\n    bytes memory _data\\\\n  ) public override nonReentrant {\\\\n    for (uint256 i = 0; i < _ids.length; i++) {\\\\n      require(\\\\n        _isCreatorOrProxy(_ids[i], _msgSender()),\\\\n        \\\\\\"ONLY_CREATOR_ALLOWED\\\\\\"\\\\n      );\\\\n    }\\\\n    _batchMint(_to, _ids, _quantities, _data);\\\\n  }\\\\n\\\\n  function setURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    override\\\\n    creatorOnly(_id)\\\\n    onlyFullTokenOwner(_id)\\\\n  {\\\\n    _setURI(_id, _uri);\\\\n  }\\\\n\\\\n  function setPermanentURI(uint256 _id, string memory _uri)\\\\n    public\\\\n    override\\\\n    creatorOnly(_id)\\\\n    onlyImpermanentURI(_id)\\\\n    onlyFullTokenOwner(_id)\\\\n  {\\\\n    _setPermanentURI(_id, _uri);\\\\n  }\\\\n\\\\n  function setCreator(uint256 _id, address _to) public creatorOnly(_id) {\\\\n    require(\\\\n      _to != address(0),\\\\n      \\\\\\"INVALID_ADDRESS\\\\\\"\\\\n    );\\\\n    _creatorOverride[_id] = _to;\\\\n    emit CreatorChanged(_id, _to);\\\\n  }\\\\n\\\\n  function creator(uint256 _id) public view returns (address) {\\\\n    if (_creatorOverride[_id] != address(0)) {\\\\n      return _creatorOverride[_id];\\\\n    } else {\\\\n      return _id.tokenCreator();\\\\n    }\\\\n  }\\\\n\\\\n  function maxSupply(uint256 _id) public pure returns (uint256) {\\\\n    return _id.tokenMaxSupply();\\\\n  }\\\\n\\\\n  function _origin(uint256 _id) internal pure returns (address) {\\\\n    return _id.tokenCreator();\\\\n  }\\\\n\\\\n  function _requireMintable(address _address, uint256 _id) internal view {\\\\n    require(\\\\n      _isCreatorOrProxy(_id, _address),\\\\n      \\\\\\"ONLY_CREATOR_ALLOWED\\\\\\"\\\\n    );\\\\n  }\\\\n\\\\n  function _remainingSupply(uint256 _id)\\\\n    internal\\\\n    view\\\\n    override\\\\n    returns (uint256)\\\\n  {\\\\n    return maxSupply(_id) - totalSupply(_id);\\\\n  }\\\\n\\\\n  function _isCreatorOrProxy(uint256 _id, address _address)\\\\n    internal\\\\n    view\\\\n    returns (bool)\\\\n  {\\\\n    address creator_ = creator(_id);\\\\n    return creator_ == _address || _isProxyForUser(creator_, _address);\\\\n  }\\\\n\\\\n  function _isProxyForUser(address _user, address _address)\\\\n    internal\\\\n    view\\\\n    override\\\\n    returns (bool)\\\\n  {\\\\n    if (sharedProxyAddresses[_address]) {\\\\n      return true;\\\\n    }\\\\n    return super._isProxyForUser(_user, _address);\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x12d34744cd0fa115da821f599cb0f1d3b34f69fd0a0b01862c634fdfaae98c53\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/TokenIdentifiers.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary TokenIdentifiers {\\\\n  uint8 constant ADDRESS_BITS = 160;\\\\n  uint8 constant INDEX_BITS = 56;\\\\n  uint8 constant SUPPLY_BITS = 40;\\\\n\\\\n  uint256 constant SUPPLY_MASK = (uint256(1) << SUPPLY_BITS) - 1;\\\\n  uint256 constant INDEX_MASK = ((uint256(1) << INDEX_BITS) - 1) ^ SUPPLY_MASK;\\\\n\\\\n  function tokenMaxSupply(uint256 _id) internal pure returns (uint256) {\\\\n    return _id & SUPPLY_MASK;\\\\n  }\\\\n\\\\n  function tokenIndex(uint256 _id) internal pure returns (uint256) {\\\\n    return _id & INDEX_MASK;\\\\n  }\\\\n\\\\n  function tokenCreator(uint256 _id) internal pure returns (address) {\\\\n    return address(uint160(_id >> (INDEX_BITS + SUPPLY_BITS)));\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x9161ff1b0d82ca545d46d1daec0e410980884d5979e10afec8d172b3008da6dd\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/ContextMixin.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract ContextMixin {\\\\n    function msgSender()\\\\n        internal\\\\n        view\\\\n        returns (address payable sender)\\\\n    {\\\\n        if (msg.sender == address(this)) {\\\\n            bytes memory array = msg.data;\\\\n            uint256 index = msg.data.length;\\\\n            assembly {\\\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\\\n                sender := and(\\\\n                    mload(add(array, index)),\\\\n                    0xffffffffffffffffffffffffffffffffffffffff\\\\n                )\\\\n            }\\\\n        } else {\\\\n            sender = payable(msg.sender);\\\\n        }\\\\n        return sender;\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x75cc75d416c24a59b695e8418abacc91fe6da7a1e76d791b660e7e6a8e89aa7e\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/EIP712Base.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./Initializable.sol\\\\\\";\\\\n\\\\ncontract EIP712Base is Initializable {\\\\n    struct EIP712Domain {\\\\n        string name;\\\\n        string version;\\\\n        address verifyingContract;\\\\n        bytes32 salt;\\\\n    }\\\\n\\\\n    string public constant ERC712_VERSION = \\\\\\"1\\\\\\";\\\\n\\\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\\\n        bytes(\\\\n            \\\\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\\\\"\\\\n        )\\\\n    );\\\\n    bytes32 internal domainSeperator;\\\\n\\\\n    function _initializeEIP712(\\\\n        string memory name\\\\n    )\\\\n        internal\\\\n        initializer\\\\n    {\\\\n        _setDomainSeperator(name);\\\\n    }\\\\n\\\\n    function _setDomainSeperator(string memory name) internal {\\\\n        domainSeperator = keccak256(\\\\n            abi.encode(\\\\n                EIP712_DOMAIN_TYPEHASH,\\\\n                keccak256(bytes(name)),\\\\n                keccak256(bytes(ERC712_VERSION)),\\\\n                address(this),\\\\n                bytes32(getChainId())\\\\n            )\\\\n        );\\\\n    }\\\\n\\\\n    function getDomainSeperator() public view returns (bytes32) {\\\\n        return domainSeperator;\\\\n    }\\\\n\\\\n    function getChainId() public view returns (uint256) {\\\\n        uint256 id;\\\\n        assembly {\\\\n            id := chainid()\\\\n        }\\\\n        return id;\\\\n    }\\\\n\\\\n    function toTypedMessageHash(bytes32 messageHash)\\\\n        internal\\\\n        view\\\\n        returns (bytes32)\\\\n    {\\\\n        return\\\\n            keccak256(\\\\n                abi.encodePacked(\\\\\\"\\\\\\\\x19\\\\\\\\x01\\\\\\", getDomainSeperator(), messageHash)\\\\n            );\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x41fab0b43922c8e3134341e79d4f4f83bf441b4476ce4a303bfebb9e3ff887d8\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/Initializable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\ncontract Initializable {\\\\n  bool inited = false;\\\\n\\\\n  modifier initializer() {\\\\n    require(!inited, \\\\\\"already inited\\\\\\");\\\\n    _;\\\\n    inited = true;\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0x1936400e518e73dfe924a655b68a2533efc0758e24b71e212f03c11fce2bd1c9\\",\\"license\\":\\"MIT\\"},\\"contracts/collectible/meta-transaction/NativeMetaTransaction.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./EIP712Base.sol\\\\\\";\\\\n\\\\ncontract NativeMetaTransaction is EIP712Base {\\\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\\\n        bytes(\\\\n            \\\\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\\\\"\\\\n        )\\\\n    );\\\\n\\\\n    struct MetaTransaction {\\\\n        uint256 nonce;\\\\n        address from;\\\\n        bytes functionSignature;\\\\n    }\\\\n    \\\\n    event MetaTransactionExecuted(\\\\n        address userAddress,\\\\n        address payable relayerAddress,\\\\n        bytes functionSignature\\\\n    );\\\\n    mapping(address => uint256) nonces;\\\\n\\\\n    function executeMetaTransaction(\\\\n        address userAddress,\\\\n        bytes memory functionSignature,\\\\n        bytes32 sigR,\\\\n        bytes32 sigS,\\\\n        uint8 sigV\\\\n    ) public payable returns (bytes memory) {\\\\n        MetaTransaction memory metaTx = MetaTransaction({\\\\n            nonce: nonces[userAddress],\\\\n            from: userAddress,\\\\n            functionSignature: functionSignature\\\\n        });\\\\n\\\\n        require(\\\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\\\n            \\\\\\"Signer and signature do not match\\\\\\"\\\\n        );\\\\n\\\\n        nonces[userAddress] = nonces[userAddress] + 1;\\\\n\\\\n        emit MetaTransactionExecuted(\\\\n            userAddress,\\\\n            payable(msg.sender),\\\\n            functionSignature\\\\n        );\\\\n\\\\n        (bool success, bytes memory returnData) = address(this).call(\\\\n            abi.encodePacked(functionSignature, userAddress)\\\\n        );\\\\n        require(success, \\\\\\"Function call not successful\\\\\\");\\\\n\\\\n        return returnData;\\\\n    }\\\\n\\\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\\\n        internal\\\\n        pure\\\\n        returns (bytes32)\\\\n    {\\\\n        return\\\\n            keccak256(\\\\n                abi.encode(\\\\n                    META_TRANSACTION_TYPEHASH,\\\\n                    metaTx.nonce,\\\\n                    metaTx.from,\\\\n                    keccak256(metaTx.functionSignature)\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    function getNonce(address user) public view returns (uint256 nonce) {\\\\n        nonce = nonces[user];\\\\n    }\\\\n\\\\n    function verify(\\\\n        address signer,\\\\n        MetaTransaction memory metaTx,\\\\n        bytes32 sigR,\\\\n        bytes32 sigS,\\\\n        uint8 sigV\\\\n    ) internal view returns (bool) {\\\\n        require(signer != address(0), \\\\\\"NativeMetaTransaction: INVALID_SIGNER\\\\\\");\\\\n        return\\\\n            signer ==\\\\n            ecrecover(\\\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\\\n                sigV,\\\\n                sigR,\\\\n                sigS\\\\n            );\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x2fe0d0f279a758d3893b7d7c8ee2e9a6e1780a74fc5d00e5e1ebfc453e2360f6\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/ERC1155.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC1155.sol\\\\\\";\\\\nimport \\\\\\"../../utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"./IERC1155Receiver.sol\\\\\\";\\\\nimport \\\\\\"./IERC1155MetadataURI.sol\\\\\\";\\\\nimport \\\\\\"../../utils/libraries/Address.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\nimport \\\\\\"../../utils/introspection/ERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the basic standard multi-token.\\\\n * See https://eips.ethereum.org/EIPS/eip-1155\\\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\\\n    using Address for address;\\\\n    using SafeMath for uint256;\\\\n\\\\n    // Mapping from token ID to account balances\\\\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\\\\n\\\\n    // Mapping from account to operator approvals\\\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\\\n\\\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\\\n    string private _uri;\\\\n\\\\n    /**\\\\n     * @dev See {_setURI}.\\\\n     */\\\\n    constructor(string memory uri_) {\\\\n        _setURI(uri_);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override(ERC165, IERC165)\\\\n        returns (bool)\\\\n    {\\\\n        return\\\\n            interfaceId == type(IERC1155).interfaceId ||\\\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155MetadataURI-uri}.\\\\n     *\\\\n     * This implementation returns the same URI for *all* token types. It relies\\\\n     * on the token type ID substitution mechanism\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\\\n     *\\\\n     * Clients calling this function must replace the `\\\\\\\\{id\\\\\\\\}` substring with the\\\\n     * actual token type ID.\\\\n     */\\\\n    function uri(uint256) public view virtual override returns (string memory) {\\\\n        return _uri;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-balanceOf}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function balanceOf(address account, uint256 id)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (uint256)\\\\n    {\\\\n        require(\\\\n            account != address(0),\\\\n            \\\\\\"ERC1155: balance query for the zero address\\\\\\"\\\\n        );\\\\n        return _balances[id][account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-balanceOfBatch}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `accounts` and `ids` must have the same length.\\\\n     */\\\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (uint256[] memory)\\\\n    {\\\\n        require(\\\\n            accounts.length == ids.length,\\\\n            \\\\\\"ERC1155: accounts and ids length mismatch\\\\\\"\\\\n        );\\\\n\\\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\\\n\\\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\\\n        }\\\\n\\\\n        return batchBalances;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-setApprovalForAll}.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved)\\\\n        public\\\\n        virtual\\\\n        override\\\\n    {\\\\n        require(\\\\n            _msgSender() != operator,\\\\n            \\\\\\"ERC1155: setting approval status for self\\\\\\"\\\\n        );\\\\n\\\\n        _operatorApprovals[_msgSender()][operator] = approved;\\\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-isApprovedForAll}.\\\\n     */\\\\n    function isApprovedForAll(address account, address operator)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        return _operatorApprovals[account][operator];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) public virtual override {\\\\n        require(\\\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\\\n            \\\\\\"ERC1155: caller is not owner nor approved\\\\\\"\\\\n        );\\\\n        _safeTransferFrom(from, to, id, amount, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\\\n     */\\\\n    function safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) public virtual override {\\\\n        require(\\\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\\\n            \\\\\\"ERC1155: transfer caller is not owner nor approved\\\\\\"\\\\n        );\\\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(\\\\n            operator,\\\\n            from,\\\\n            to,\\\\n            _asSingletonArray(id),\\\\n            _asSingletonArray(amount),\\\\n            data\\\\n        );\\\\n\\\\n        uint256 fromBalance = _balances[id][from];\\\\n        require(\\\\n            fromBalance >= amount,\\\\n            \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n        );\\\\n        unchecked {\\\\n            _balances[id][from] = fromBalance - amount;\\\\n        }\\\\n        _balances[id][to] += amount;\\\\n\\\\n        emit TransferSingle(operator, from, to, id, amount);\\\\n\\\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\\\n     *\\\\n     * Emits a {TransferBatch} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(\\\\n            ids.length == amounts.length,\\\\n            \\\\\\"ERC1155: ids and amounts length mismatch\\\\\\"\\\\n        );\\\\n        require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\\\n\\\\n        for (uint256 i = 0; i < ids.length; ++i) {\\\\n            uint256 id = ids[i];\\\\n            uint256 amount = amounts[i];\\\\n\\\\n            uint256 fromBalance = _balances[id][from];\\\\n            require(\\\\n                fromBalance >= amount,\\\\n                \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n            );\\\\n            unchecked {\\\\n                _balances[id][from] = fromBalance - amount;\\\\n            }\\\\n            _balances[id][to] += amount;\\\\n        }\\\\n\\\\n        emit TransferBatch(operator, from, to, ids, amounts);\\\\n\\\\n        _doSafeBatchTransferAcceptanceCheck(\\\\n            operator,\\\\n            from,\\\\n            to,\\\\n            ids,\\\\n            amounts,\\\\n            data\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\\\n     * substitution mechanism\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\\\n     *\\\\n     * By this mechanism, any occurrence of the `\\\\\\\\{id\\\\\\\\}` substring in either the\\\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\\\n     * clients with the token type ID.\\\\n     *\\\\n     * For example, the `https://token-cdn-domain/\\\\\\\\{id\\\\\\\\}.json` URI would be\\\\n     * interpreted by clients as\\\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\\\n     * for token type ID 0x4cce0.\\\\n     *\\\\n     * See {uri}.\\\\n     *\\\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\\\n     * this function emits no events.\\\\n     */\\\\n    function _setURI(string memory newuri) internal virtual {\\\\n        _uri = newuri;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _mint(\\\\n        address account,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC1155: mint to the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(\\\\n            operator,\\\\n            address(0),\\\\n            account,\\\\n            _asSingletonArray(id),\\\\n            _asSingletonArray(amount),\\\\n            data\\\\n        );\\\\n\\\\n        _balances[id][account] += amount;\\\\n        emit TransferSingle(operator, address(0), account, id, amount);\\\\n\\\\n        _doSafeTransferAcceptanceCheck(\\\\n            operator,\\\\n            address(0),\\\\n            account,\\\\n            id,\\\\n            amount,\\\\n            data\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function _mintBatch(\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) internal virtual {\\\\n        require(to != address(0), \\\\\\"ERC1155: mint to the zero address\\\\\\");\\\\n        require(\\\\n            ids.length == amounts.length,\\\\n            \\\\\\"ERC1155: ids and amounts length mismatch\\\\\\"\\\\n        );\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\\\n\\\\n        for (uint256 i = 0; i < ids.length; i++) {\\\\n            _balances[ids[i]][to] += amounts[i];\\\\n        }\\\\n\\\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\\\n\\\\n        _doSafeBatchTransferAcceptanceCheck(\\\\n            operator,\\\\n            address(0),\\\\n            to,\\\\n            ids,\\\\n            amounts,\\\\n            data\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens of token type `id`.\\\\n     */\\\\n    function _burn(\\\\n        address account,\\\\n        uint256 id,\\\\n        uint256 amount\\\\n    ) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC1155: burn from the zero address\\\\\\");\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(\\\\n            operator,\\\\n            account,\\\\n            address(0),\\\\n            _asSingletonArray(id),\\\\n            _asSingletonArray(amount),\\\\n            \\\\\\"\\\\\\"\\\\n        );\\\\n\\\\n        uint256 accountBalance = _balances[id][account];\\\\n        require(\\\\n            accountBalance >= amount,\\\\n            \\\\\\"ERC1155: burn amount exceeds balance\\\\\\"\\\\n        );\\\\n        unchecked {\\\\n            _balances[id][account] = accountBalance - amount;\\\\n        }\\\\n\\\\n        emit TransferSingle(operator, account, address(0), id, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     */\\\\n    function _burnBatch(\\\\n        address account,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts\\\\n    ) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC1155: burn from the zero address\\\\\\");\\\\n        require(\\\\n            ids.length == amounts.length,\\\\n            \\\\\\"ERC1155: ids and amounts length mismatch\\\\\\"\\\\n        );\\\\n\\\\n        address operator = _msgSender();\\\\n\\\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\\\\"\\\\\\");\\\\n\\\\n        for (uint256 i = 0; i < ids.length; i++) {\\\\n            uint256 id = ids[i];\\\\n            uint256 amount = amounts[i];\\\\n\\\\n            uint256 accountBalance = _balances[id][account];\\\\n            require(\\\\n                accountBalance >= amount,\\\\n                \\\\\\"ERC1155: burn amount exceeds balance\\\\\\"\\\\n            );\\\\n            unchecked {\\\\n                _balances[id][account] = accountBalance - amount;\\\\n            }\\\\n        }\\\\n\\\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any token transfer. This includes minting\\\\n     * and burning, as well as batched variants.\\\\n     *\\\\n     * The same hook is called on both single and batched variants. For single\\\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\\\n     *\\\\n     * Calling conditions (for each `id` and `amount` pair):\\\\n     *\\\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * of token type `id` will be  transferred to `to`.\\\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\\\n     * for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens of token type `id`\\\\n     * will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     * - `ids` and `amounts` have the same, non-zero length.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    // solhint-disable no-empty-blocks\\\\n    function _beforeTokenTransfer(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) internal virtual {}\\\\n\\\\n    function _doSafeTransferAcceptanceCheck(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) private {\\\\n        if (to.isContract()) {\\\\n            try\\\\n                IERC1155Receiver(to).onERC1155Received(\\\\n                    operator,\\\\n                    from,\\\\n                    id,\\\\n                    amount,\\\\n                    data\\\\n                )\\\\n            returns (bytes4 response) {\\\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\\\n                    revert(\\\\\\"ERC1155: ERC1155Receiver rejected tokens\\\\\\");\\\\n                }\\\\n            } catch Error(string memory reason) {\\\\n                revert(reason);\\\\n            } catch {\\\\n                revert(\\\\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\\\\");\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _doSafeBatchTransferAcceptanceCheck(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) private {\\\\n        if (to.isContract()) {\\\\n            try\\\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\\\n                    operator,\\\\n                    from,\\\\n                    ids,\\\\n                    amounts,\\\\n                    data\\\\n                )\\\\n            returns (bytes4 response) {\\\\n                if (\\\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\\\n                ) {\\\\n                    revert(\\\\\\"ERC1155: ERC1155Receiver rejected tokens\\\\\\");\\\\n                }\\\\n            } catch Error(string memory reason) {\\\\n                revert(reason);\\\\n            } catch {\\\\n                revert(\\\\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\\\\");\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _asSingletonArray(uint256 element)\\\\n        private\\\\n        pure\\\\n        returns (uint256[] memory)\\\\n    {\\\\n        uint256[] memory array = new uint256[](1);\\\\n        array[0] = element;\\\\n\\\\n        return array;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x56a626cd1da960493a39226f22c772cff647d2c204e7848282963087dc008573\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/IERC1155.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ninterface IERC1155 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\\\n     */\\\\n    event TransferSingle(\\\\n        address indexed operator,\\\\n        address indexed from,\\\\n        address indexed to,\\\\n        uint256 id,\\\\n        uint256 value\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\\\n     * transfers.\\\\n     */\\\\n    event TransferBatch(\\\\n        address indexed operator,\\\\n        address indexed from,\\\\n        address indexed to,\\\\n        uint256[] ids,\\\\n        uint256[] values\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\\\n     * `approved`.\\\\n     */\\\\n    event ApprovalForAll(\\\\n        address indexed account,\\\\n        address indexed operator,\\\\n        bool approved\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\\\n     *\\\\n     * If an {URI} event was emitted for `id`, the standard\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\\\n     * returned by {IERC1155MetadataURI-uri}.\\\\n     */\\\\n    // event URI(string value, uint256 indexed id);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function balanceOf(address account, uint256 id)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `accounts` and `ids` must have the same length.\\\\n     */\\\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\\\n        external\\\\n        view\\\\n        returns (uint256[] memory);\\\\n\\\\n    /**\\\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\'s tokens, according to `approved`,\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `operator` cannot be the caller.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns true if `operator` is approved to transfer ``account``\'s tokens.\\\\n     *\\\\n     * See {setApprovalForAll}.\\\\n     */\\\\n    function isApprovedForAll(address account, address operator)\\\\n        external\\\\n        view\\\\n        returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\'s tokens via {setApprovalForAll}.\\\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes calldata data\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\\\n     *\\\\n     * Emits a {TransferBatch} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] calldata ids,\\\\n        uint256[] calldata amounts,\\\\n        bytes calldata data\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5f99788b7ddbfdc0fbd6f8e1072f3648a12b0a19771eea9261c8b65b8ac1d1da\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/IERC1155MetadataURI.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC1155.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ninterface IERC1155MetadataURI is IERC1155 {\\\\n    /**\\\\n     * @dev Returns the URI for token type `id`.\\\\n     *\\\\n     * If the `\\\\\\\\{id\\\\\\\\}` substring is present in the URI, it must be replaced by\\\\n     * clients with the actual token type ID.\\\\n     */\\\\n    function uri(uint256 id) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x98f51fcfa39b58ed90352217aa4900ec770f83a9fdec91780a45d61de4ad509e\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC1155/IERC1155Receiver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev _Available since v3.1._\\\\n */\\\\ninterface IERC1155Receiver is IERC165 {\\\\n    /**\\\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\\\n        To accept the transfer, this must return\\\\n        `bytes4(keccak256(\\\\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\\\\"))`\\\\n        (i.e. 0xf23a6e61, or its own function selector).\\\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\\\n        @param from The address which previously owned the token\\\\n        @param id The ID of the token being transferred\\\\n        @param value The amount of tokens being transferred\\\\n        @param data Additional data with no specified format\\\\n        @return `bytes4(keccak256(\\\\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\\\\"))` if transfer is allowed\\\\n    */\\\\n    function onERC1155Received(\\\\n        address operator,\\\\n        address from,\\\\n        uint256 id,\\\\n        uint256 value,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n\\\\n    /**\\\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\\\n        been updated. To accept the transfer(s), this must return\\\\n        `bytes4(keccak256(\\\\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\\\\"))`\\\\n        (i.e. 0xbc197c81, or its own function selector).\\\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\\\n        @param from The address which previously owned the token\\\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\\\n        @param data Additional data with no specified format\\\\n        @return `bytes4(keccak256(\\\\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\\\\"))` if transfer is allowed\\\\n    */\\\\n    function onERC1155BatchReceived(\\\\n        address operator,\\\\n        address from,\\\\n        uint256[] calldata ids,\\\\n        uint256[] calldata values,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/Pausable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./Context.sol\\\\\\";\\\\n\\\\nabstract contract Pausable is Context {\\\\n  bool private _paused;\\\\n\\\\n  event Paused(address account);\\\\n  event Unpaused(address account);\\\\n\\\\n  modifier whenNotPaused() {\\\\n    require(!paused(), \\\\\\"Pausable: paused\\\\\\");\\\\n    _;\\\\n  }\\\\n\\\\n  modifier whenPaused() {\\\\n    require(paused(), \\\\\\"Pausable: not paused\\\\\\");\\\\n    _;\\\\n  }\\\\n\\\\n  constructor() {\\\\n    _paused = false;\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Return true if the contract is paused, and false otherwise\\\\n   */\\\\n  function paused() public virtual returns (bool) {\\\\n    return _paused;\\\\n  }\\\\n\\\\n  function _pause() internal virtual whenNotPaused {\\\\n    _paused = true;\\\\n    emit Paused(_msgSender());\\\\n  }\\\\n\\\\n  /**\\\\n   * @dev Return to normal state\\\\n   */\\\\n  function _unpause() internal virtual whenPaused {\\\\n    _paused = false;\\\\n    emit Unpaused(_msgSender());\\\\n  }\\\\n}\\",\\"keccak256\\":\\"0xf9516df26db7a649f3e4ca083cc38b752049819c325e7e596f697880cc792f28\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Contract module that helps prevent reentrant calls to a function.\\\\n */\\\\n\\\\nabstract contract ReentrancyGuard {\\\\n    uint256 private constant _NOT_ENTERED = 1;\\\\n    uint256 private constant _ENTERED = 2;\\\\n\\\\n    uint256 private _status;\\\\n\\\\n    constructor() {\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n\\\\n    modifier nonReentrant() {\\\\n        require(_status != _ENTERED, \\\\\\"ReentrancyGuard: reentrant call\\\\\\");\\\\n        _status = _ENTERED;\\\\n        _;\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xda940c3f1f364a990f37f0b5bb62f6410ff58666104d3fe712d42f7d82952f57\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/introspection/ERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n *\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId)\\\\n        public\\\\n        view\\\\n        virtual\\\\n        override\\\\n        returns (bool)\\\\n    {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x93b1ce940e4e905752730be86b74d5f915097747868f7876e1de9af86afa6ad4\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/introspection/IERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/libraries/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(\\\\n            address(this).balance >= amount,\\\\n            \\\\\\"Address: insufficient balance\\\\\\"\\\\n        );\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(\\\\n            success,\\\\n            \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data)\\\\n        internal\\\\n        returns (bytes memory)\\\\n    {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return\\\\n            functionCallWithValue(\\\\n                target,\\\\n                data,\\\\n                value,\\\\n                \\\\\\"Address: low-level call with value failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(\\\\n            address(this).balance >= value,\\\\n            \\\\\\"Address: insufficient balance for call\\\\\\"\\\\n        );\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\\\n            data\\\\n        );\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data)\\\\n        internal\\\\n        view\\\\n        returns (bytes memory)\\\\n    {\\\\n        return\\\\n            functionStaticCall(\\\\n                target,\\\\n                data,\\\\n                \\\\\\"Address: low-level static call failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data)\\\\n        internal\\\\n        returns (bytes memory)\\\\n    {\\\\n        return\\\\n            functionDelegateCall(\\\\n                target,\\\\n                data,\\\\n                \\\\\\"Address: low-level delegate call failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    function _verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) private pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xc7a79a3811a2d5ccd504dfc51074048aa28b2b3ef0ca63db196e70c44fd072a7\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/libraries/Strings.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev String operations.\\\\n */\\\\nlibrary Strings {\\\\n    bytes16 private constant _HEX_SYMBOLS = \\\\\\"0123456789abcdef\\\\\\";\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\\\n     */\\\\n    function toString(uint256 value) internal pure returns (string memory) {\\\\n        // Inspired by OraclizeAPI\'s implementation - MIT licence\\\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\\\n\\\\n        if (value == 0) {\\\\n            return \\\\\\"0\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 digits;\\\\n        while (temp != 0) {\\\\n            digits++;\\\\n            temp /= 10;\\\\n        }\\\\n        bytes memory buffer = new bytes(digits);\\\\n        while (value != 0) {\\\\n            digits -= 1;\\\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\\\n            value /= 10;\\\\n        }\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\\\n     */\\\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\\\n        if (value == 0) {\\\\n            return \\\\\\"0x00\\\\\\";\\\\n        }\\\\n        uint256 temp = value;\\\\n        uint256 length = 0;\\\\n        while (temp != 0) {\\\\n            length++;\\\\n            temp >>= 8;\\\\n        }\\\\n        return toHexString(value, length);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\\\n     */\\\\n    function toHexString(uint256 value, uint256 length)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        bytes memory buffer = new bytes(2 * length + 2);\\\\n        buffer[0] = \\\\\\"0\\\\\\";\\\\n        buffer[1] = \\\\\\"x\\\\\\";\\\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\\\n            value >>= 4;\\\\n        }\\\\n        require(value == 0, \\\\\\"Strings: hex length insufficient\\\\\\");\\\\n        return string(buffer);\\\\n    }\\\\n\\\\n    function strConcat(\\\\n        string memory _a,\\\\n        string memory _b,\\\\n        string memory _c,\\\\n        string memory _d,\\\\n        string memory _e\\\\n    ) internal pure returns (string memory) {\\\\n        bytes memory _ba = bytes(_a);\\\\n        bytes memory _bb = bytes(_b);\\\\n        bytes memory _bc = bytes(_c);\\\\n        bytes memory _bd = bytes(_d);\\\\n        bytes memory _be = bytes(_e);\\\\n        string memory abcde = new string(\\\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\\\n        );\\\\n        bytes memory babcde = bytes(abcde);\\\\n        uint256 k = 0;\\\\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\\\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\\\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\\\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\\\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\\\n        return string(babcde);\\\\n    }\\\\n\\\\n    function strConcat(\\\\n        string memory _a,\\\\n        string memory _b,\\\\n        string memory _c,\\\\n        string memory _d\\\\n    ) internal pure returns (string memory) {\\\\n        return strConcat(_a, _b, _c, _d, \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function strConcat(\\\\n        string memory _a,\\\\n        string memory _b,\\\\n        string memory _c\\\\n    ) internal pure returns (string memory) {\\\\n        return strConcat(_a, _b, _c, \\\\\\"\\\\\\", \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function strConcat(string memory _a, string memory _b)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        return strConcat(_a, _b, \\\\\\"\\\\\\", \\\\\\"\\\\\\", \\\\\\"\\\\\\");\\\\n    }\\\\n\\\\n    function uint2str(uint256 _i)\\\\n        internal\\\\n        pure\\\\n        returns (string memory _uintAsString)\\\\n    {\\\\n        if (_i == 0) {\\\\n            return \\\\\\"0\\\\\\";\\\\n        }\\\\n        uint256 j = _i;\\\\n        uint256 len;\\\\n        while (j != 0) {\\\\n            len++;\\\\n            j /= 10;\\\\n        }\\\\n        bytes memory bstr = new bytes(len);\\\\n        uint256 k = len - 1;\\\\n        while (_i != 0) {\\\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\\\n            _i /= 10;\\\\n        }\\\\n        return string(bstr);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb5125219a0b6640bfd7c22463d63b97d1525e7830eea1bfe6312b6f08437762c\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b)\\\\n        internal\\\\n        pure\\\\n        returns (bool, uint256)\\\\n    {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x860c26edc6958c5c72c482b147921630e311c0b061dc7fd2157d1840653f6839\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040526003805460ff191690553480156200001b57600080fd5b50604051620047d8380380620047d88339810160408190526200003e91620006bd565b8484848483836040518060200160405280600081525084816200006781620001be60201b60201c565b506200007c62000076620001d7565b620001f4565b6006805460ff60a01b1916905583516200009e9060089060208701906200054d565b508251620000b49060099060208601906200054d565b50600780546001600160a01b0319166001600160a01b03831617905560088054620001709190620000e59062000824565b80601f0160208091040260200160405190810160405280929190818152602001828054620001139062000824565b8015620001645780601f10620001385761010080835404028352916020019162000164565b820191906000526020600020905b8154815290600101906020018083116200014657829003601f168201915b50506200024692505050565b505050506000815111156200018a576200018a8162000290565b50506001600f555050601080546001600160a01b0319166001600160a01b0392909216919091179055506200089092505050565b8051620001d39060029060208401906200054d565b5050565b6000620001ee620002d860201b620018fb1760201c565b90505b90565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60035460ff1615620002755760405162461bcd60e51b81526004016200026c90620007fc565b60405180910390fd5b620002808162000336565b506003805460ff19166001179055565b620002a46200029e620001d7565b620003d8565b620002c35760405162461bcd60e51b81526004016200026c90620007b7565b8051620001d390600c9060208401906200054d565b6000333014156200033157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620001f19050565b503390565b6040518060800160405280604f815260200162004789604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc630620003a46200041a565b604051620003ba9594939291906020016200078b565b60408051601f19818403018152919052805160209091012060045550565b60006001600160a01b038216620003ee6200041e565b6001600160a01b03161480620004145750620004146200040d6200041e565b836200042d565b92915050565b4690565b6006546001600160a01b031690565b6001600160a01b03811660009081526011602052604081205460ff1615620004585750600162000414565b6200046f83836200047660201b620019571760201c565b9392505050565b6007546000906200049c906001600160a01b031662000547602090811b62001a1217901c565b620004aa5750600062000414565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c455279190620004e190889060040162000777565b60206040518083038186803b158015620004fa57600080fd5b505afa1580156200050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200053591906200069e565b6001600160a01b031614949350505050565b3b151590565b8280546200055b9062000824565b90600052602060002090601f0160209004810192826200057f5760008555620005ca565b82601f106200059a57805160ff1916838001178555620005ca565b82800160010185558215620005ca579182015b82811115620005ca578251825591602001919060010190620005ad565b50620005d8929150620005dc565b5090565b5b80821115620005d85760008155600101620005dd565b600082601f83011262000604578081fd5b81516001600160401b038082111562000621576200062162000861565b6040516020601f8401601f191682018101838111838210171562000649576200064962000861565b604052838252858401810187101562000660578485fd5b8492505b8383101562000683578583018101518284018201529182019162000664565b838311156200069457848185840101525b5095945050505050565b600060208284031215620006b0578081fd5b81516200046f8162000877565b600080600080600060a08688031215620006d5578081fd5b85516001600160401b0380821115620006ec578283fd5b620006fa89838a01620005f3565b9650602088015191508082111562000710578283fd5b6200071e89838a01620005f3565b955060408801519150620007328262000877565b60608801519194508082111562000747578283fd5b506200075688828901620005f3565b9250506080860151620007698162000877565b809150509295509295909350565b6001600160a01b0391909116815260200190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b6020808252600e908201526d185b1c9958591e481a5b9a5d195960921b604082015260600190565b6002810460018216806200083957607f821691505b602082108114156200085b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200088d57600080fd5b50565b613ee980620008a06000396000f3fe6080604052600436106102665760003560e01c8063731133e911610144578063b48ab8b6116100b6578063e985e9c51161007a578063e985e9c5146106d0578063f242432a146106f0578063f2fde38b14610710578063f5298aca14610730578063f6eb127a14610750578063f923e8c31461077057610266565b8063b48ab8b614610646578063bd85b03914610666578063c311c52314610686578063cd7c03261461069b578063d26ea6c0146106b057610266565b80638da5cb5b116101085780638da5cb5b1461059c57806391686f53146105b157806395d89b41146105d15780639e037eea146105e6578063a22cb46514610606578063a50aa5c31461062657610266565b8063731133e91461050757806373505d35146105275780638456cb5914610547578063862440e21461055c578063869f75941461057c57610266565b80632eb2c2d6116101dd5780634e1273f4116101a15780634e1273f41461044e5780634f558e791461047b578063510b51581461049b5780635b51acff146104c85780635c975abb146104dd578063715018a6146104f257610266565b80632eb2c2d6146103c45780632f1c982c146103e45780633408e470146104045780633588ad7c146104195780633f4ba83a1461043957610266565b80630e89341c1161022f5780630e89341c1461031a5780630f7e59701461033a5780631e7d9dbb1461034f57806320379ee51461036f57806324d88785146103845780632d0335ab146103a457610266565b8062fdd58e1461026b57806301ffc9a7146102a157806306fdde03146102ce5780630bb2465a146102f05780630c53c51c14610307575b600080fd5b34801561027757600080fd5b5061028b610286366004612f09565b610785565b60405161029891906134de565b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004613151565b6107c4565b60405161029891906134d3565b3480156102da57600080fd5b506102e361080c565b6040516102989190613529565b3480156102fc57600080fd5b5061030561089a565b005b6102e3610315366004612e8f565b6108e1565b34801561032657600080fd5b506102e3610335366004613249565b610a61565b34801561034657600080fd5b506102e3610ba2565b34801561035b57600080fd5b506102c161036a366004613249565b610bbf565b34801561037b57600080fd5b5061028b610bd4565b34801561039057600080fd5b5061030561039f3660046131a5565b610bdb565b3480156103b057600080fd5b5061028b6103bf366004612bf3565b610c19565b3480156103d057600080fd5b506103056103df366004612c47565b610c34565b3480156103f057600080fd5b506103056103ff36600461307b565b610cd6565b34801561041057600080fd5b5061028b61101d565b34801561042557600080fd5b5061030561043436600461329d565b611021565b34801561044557600080fd5b506103056110be565b34801561045a57600080fd5b5061046e610469366004612fbc565b6110ef565b604051610298919061349b565b34801561048757600080fd5b506102c1610496366004613249565b61120e565b3480156104a757600080fd5b506104bb6104b6366004613249565b611222565b60405161029891906133ab565b3480156104d457600080fd5b506104bb61126d565b3480156104e957600080fd5b506102c161127c565b3480156104fe57600080fd5b5061030561128c565b34801561051357600080fd5b50610305610522366004612f68565b6112d5565b34801561053357600080fd5b506102c1610542366004612bf3565b61133e565b34801561055357600080fd5b50610305611353565b34801561056857600080fd5b5061030561057736600461329d565b611382565b34801561058857600080fd5b5061028b610597366004613249565b6113dd565b3480156105a857600080fd5b506104bb6113e8565b3480156105bd57600080fd5b506103056105cc366004613279565b6113f7565b3480156105dd57600080fd5b506102e36114a0565b3480156105f257600080fd5b50610305610601366004612bf3565b6114ad565b34801561061257600080fd5b50610305610621366004612e5e565b6114f5565b34801561063257600080fd5b50610305610641366004612bf3565b6115c3565b34801561065257600080fd5b50610305610661366004612dc8565b61160e565b34801561067257600080fd5b5061028b610681366004613249565b6116bb565b34801561069257600080fd5b506102c16116cd565b3480156106a757600080fd5b506104bb6116d2565b3480156106bc57600080fd5b506103056106cb366004612bf3565b6116e1565b3480156106dc57600080fd5b506102c16106eb366004612c0f565b61172a565b3480156106fc57600080fd5b5061030561070b366004612cf0565b611754565b34801561071c57600080fd5b5061030561072b366004612bf3565b6117a4565b34801561073c57600080fd5b5061030561074b366004612f34565b611815565b34801561075c57600080fd5b5061030561076b366004612d56565b61184a565b34801561077c57600080fd5b506102e36118ee565b6000806107928484611a18565b905061079d84611a68565b6107a757806107ba565b6107b083611a73565b6107ba9082613c99565b9150505b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806107f557506001600160e01b031982166303a24d0760e21b145b80610804575061080482611a91565b90505b919050565b6008805461081990613d19565b80601f016020809104026020016040519081016040528092919081815260200182805461084590613d19565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505081565b6108aa6108a5611aaa565b611ab9565b6108cf5760405162461bcd60e51b81526004016108c69061376f565b60405180910390fd5b601080546001600160a01b0319169055565b60408051606081810183526001600160a01b0388166000818152600560209081529085902054845283015291810186905261091f8782878787611aee565b61093b5760405162461bcd60e51b81526004016108c690613a0b565b6001600160a01b03871660009081526005602052604090205461095f906001613c99565b6001600160a01b0388166000908152600560205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b906109af90899033908a906133bf565b60405180910390a1600080306001600160a01b0316888a6040516020016109d7929190613359565b60408051601f19818403018152908290526109f19161333d565b6000604051808303816000865af19150503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b509150915081610a555760405162461bcd60e51b81526004016108c6906136d3565b98975050505050505050565b6000818152600d6020526040812080546060929190610a7f90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610aab90613d19565b8015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b505050505090508051600014610b0f579050610807565b600c8054610b1c90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4890613d19565b8015610b955780601f10610b6a57610100808354040283529160200191610b95565b820191906000526020600020905b815481529060010190602001808311610b7857829003601f168201915b5050505050915050919050565b604051806040016040528060018152602001603160f81b81525081565b6000908152600e602052604090205460ff1690565b6004545b90565b610be66108a5611aaa565b610c025760405162461bcd60e51b81526004016108c69061376f565b8051610c1590600c906020840190612aa2565b5050565b6001600160a01b031660009081526005602052604090205490565b8151835114610c555760405162461bcd60e51b81526004016108c690613978565b60005b8351811015610cce57610cbc8686868481518110610c8657634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610cae57634e487b7160e01b600052603260045260246000fd5b602002602001015186611754565b80610cc681613d54565b915050610c58565b505050505050565b610ce16108a5611aaa565b610cfd5760405162461bcd60e51b81526004016108c69061376f565b6010546001600160a01b031680610d265760405162461bcd60e51b81526004016108c690613a4c565b6000816001600160a01b031663f923e8c36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9d91908101906131d7565b905060005b8351811015611017576000848281518110610dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015190506000858381518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905060006001600160a01b0316816001600160a01b03161415610e3e5760405162461bcd60e51b81526004016108c6906137b4565b604051627eeac760e11b81526000906001600160a01b0387169062fdd58e90610e6d9085908790600401613482565b60206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190613261565b905080610ecc57505050611007565b610ee782848360405180602001604052806000815250611b94565b845160208601206040516303a24d0760e21b81526001600160a01b03881690630e89341c90610f1a9087906004016134de565b60006040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6e91908101906131d7565b80519060200120146110035761100383876001600160a01b0316630e89341c866040518263ffffffff1660e01b8152600401610faa91906134de565b60006040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906131d7565b611bb4565b5050505b61101081613d54565b9050610da2565b50505050565b4690565b816110338161102e611aaa565b611c34565b61104f5760405162461bcd60e51b81526004016108c690613a76565b8261105981610bbf565b156110765760405162461bcd60e51b81526004016108c6906139a7565b83611091611082611aaa565b8261108c84611c67565b611c82565b6110ad5760405162461bcd60e51b81526004016108c690613656565b6110b78585611bb4565b5050505050565b6110c96108a5611aaa565b6110e55760405162461bcd60e51b81526004016108c69061376f565b6110ed611c99565b565b606081518351146111125760405162461bcd60e51b81526004016108c690613b98565b600083516001600160401b0381111561113b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611164578160200160208202803683370190505b50905060005b8451811015611206576111cb85828151811061119657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111be57634e487b7160e01b600052603260045260246000fd5b6020026020010151610785565b8282815181106111eb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526111ff81613d54565b905061116a565b509392505050565b6000908152600b6020526040902054151590565b6000818152601260205260408120546001600160a01b03161561125d57506000818152601260205260409020546001600160a01b0316610807565b61126682611d0a565b9050610807565b6010546001600160a01b031681565b600654600160a01b900460ff1690565b611294611aaa565b6001600160a01b03166112a56113e8565b6001600160a01b0316146112cb5760405162461bcd60e51b81526004016108c6906139d6565b6110ed6000611d24565b6002600f5414156112f85760405162461bcd60e51b81526004016108c690613be1565b6002600f558261130a8161102e611aaa565b6113265760405162461bcd60e51b81526004016108c690613a76565b61133285858585611b94565b50506001600f55505050565b60116020526000908152604090205460ff1681565b61135e6108a5611aaa565b61137a5760405162461bcd60e51b81526004016108c69061376f565b6110ed611d76565b8161138f8161102e611aaa565b6113ab5760405162461bcd60e51b81526004016108c690613a76565b826113b7611082611aaa565b6113d35760405162461bcd60e51b81526004016108c690613656565b6110178484611dd7565b600061080482611c67565b6006546001600160a01b031690565b816114048161102e611aaa565b6114205760405162461bcd60e51b81526004016108c690613a76565b6001600160a01b0382166114465760405162461bcd60e51b81526004016108c69061353c565b60008381526012602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917f39071c63e44267bfdefc7b625c0df99d3ce2e6ff98d9f5e9e8a7ab43cdf5000d9190a3505050565b6009805461081990613d19565b6114b86108a5611aaa565b6114d45760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19169055565b816001600160a01b0316611507611aaa565b6001600160a01b0316141561152e5760405162461bcd60e51b81526004016108c690613b4f565b806001600061153b611aaa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561157f611aaa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b791906134d3565b60405180910390a35050565b6115ce6108a5611aaa565b6115ea5760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19166001179055565b6002600f5414156116315760405162461bcd60e51b81526004016108c690613be1565b6002600f5560005b83518110156116a35761167584828151811061166557634e487b7160e01b600052603260045260246000fd5b602002602001015161102e611aaa565b6116915760405162461bcd60e51b81526004016108c690613a76565b8061169b81613d54565b915050611639565b506116b084848484611e27565b50506001600f555050565b6000908152600b602052604090205490565b600190565b6007546001600160a01b031681565b6116ec6108a5611aaa565b6117085760405162461bcd60e51b81526004016108c69061376f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006117368383611e8c565b15611743575060016107be565b61174d8383611ebf565b9392505050565b60006117608685611a18565b9050828110156117975761177f85856117798487613cd6565b856112d5565b8015611792576117928686868486611eed565b610cce565b610cce8686868686611eed565b6117ac611aaa565b6001600160a01b03166117bd6113e8565b6001600160a01b0316146117e35760405162461bcd60e51b81526004016108c6906139d6565b6001600160a01b0381166118095760405162461bcd60e51b81526004016108c69061368d565b61181281611d24565b50565b828282611823838383611c82565b61183f5760405162461bcd60e51b81526004016108c69061370a565b610cce8686866120ae565b60005b82518110156118dd576118af8484838151811061187a57634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106118a257634e487b7160e01b600052603260045260246000fd5b6020026020010151611c82565b6118cb5760405162461bcd60e51b81526004016108c69061370a565b806118d581613d54565b91505061184d565b506118e9838383612104565b505050565b600c805461081990613d19565b60003330141561195257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610bd89050565b503390565b60075460009061196f906001600160a01b0316611a12565b61197b575060006107be565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906119b09088906004016133ab565b60206040518083038186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613189565b6001600160a01b031614949350505050565b3b151590565b60006001600160a01b038316611a405760405162461bcd60e51b81526004016108c6906135d4565b506000908152600a602090815260408083206001600160a01b03949094168352929052205490565b600061080482611ab9565b6000611a7e826116bb565b611a87836113dd565b6108049190613cd6565b6001600160e01b031981166301ffc9a760e01b14919050565b6000611ab46118fb565b905090565b6000816001600160a01b0316611acd6113e8565b6001600160a01b031614806108045750610804611ae86113e8565b83611e8c565b60006001600160a01b038616611b165760405162461bcd60e51b81526004016108c690613822565b6001611b29611b248761215a565b6121b8565b83868660405160008152602001604052604051611b49949392919061350b565b6020604051602081039080840390855afa158015611b6b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b611ba0848484846121d4565b600181511115611017576110178382611dd7565b6000815111611bd55760405162461bcd60e51b81526004016108c6906138d6565b6000828152600e60205260409020805460ff19166001179055611bf88282611dd7565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720782604051611c289190613529565b60405180910390a25050565b600080611c4084611222565b9050826001600160a01b0316816001600160a01b031614806107ba57506107ba8184611e8c565b6000611c7a600165010000000000613cd6565b909116919050565b600081611c8f8585610785565b1015949350505050565b611ca161127c565b611cbd5760405162461bcd60e51b81526004016108c690613565565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611cf3611aaa565b604051611d0091906133ab565b60405180910390a1565b6000611d1860286038613cb1565b60ff169190911c919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d7e61127c565b15611d9b5760405162461bcd60e51b81526004016108c690613867565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf3611aaa565b6000828152600d602090815260409091208251611df692840190612aa2565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051611c289190613529565b611e33848484846122f1565b6001815111156110175760005b83518110156110b757611e7a848281518110611e6c57634e487b7160e01b600052603260045260246000fd5b602002602001015183611dd7565b80611e8481613d54565b915050611e40565b6001600160a01b03811660009081526011602052604081205460ff1615611eb5575060016107be565b61174d8383611957565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b611ef561127c565b15611f125760405162461bcd60e51b81526004016108c690613867565b84611f1b611aaa565b6001600160a01b0316816001600160a01b03161480611f415750611f41816106eb611aaa565b611f5d5760405162461bcd60e51b81526004016108c690613aa4565b6001600160a01b038516611f835760405162461bcd60e51b81526004016108c690613891565b6000611f8d611aaa565b9050611fad818888611f9e8961249a565b611fa78961249a565b88610cce565b6000858152600a602090815260408083206001600160a01b038b16845290915290205484811015611ff05760405162461bcd60e51b81526004016108c69061392e565b611ffa8582613cd6565b6000878152600a602090815260408083206001600160a01b038d81168552925280832093909355891681529081208054879290612038908490613c99565b92505081905550866001600160a01b0316886001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161208e929190613c18565b60405180910390a46120a48289898989896124f3565b5050505050505050565b826120b7611aaa565b6001600160a01b0316816001600160a01b031614806120dd57506120dd816106eb611aaa565b6120f95760405162461bcd60e51b81526004016108c690613aa4565b61101784848461260a565b8261210d611aaa565b6001600160a01b0316816001600160a01b031614806121335750612133816106eb611aaa565b61214f5760405162461bcd60e51b81526004016108c690613aa4565b6110178484846127a2565b6000604051806080016040528060438152602001613e71604391398051602091820120835184830151604080870151805190860120905161219b95016134e7565b604051602081830303815290604052805190602001209050919050565b60006121c2610bd4565b8260405160200161219b929190613390565b6121dc61127c565b156121f95760405162461bcd60e51b81526004016108c690613867565b6000612203611aaa565b9050612224816000876122158861249a565b61221e8861249a565b87610cce565b61222e84846129a9565b6000848152600a602090815260408083206001600160a01b038916845290915281208054859290612260908490613c99565b90915550506000848152600b602052604081208054859290612283908490613c99565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122da929190613c18565b60405180910390a46110b7816000878787876124f3565b6122f961127c565b156123165760405162461bcd60e51b81526004016108c690613867565b81518351146123375760405162461bcd60e51b81526004016108c690613978565b82516000612343611aaa565b905061235481600088888888610cce565b60005b8281101561243257600086828151811061238157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106123ad57634e487b7160e01b600052603260045260246000fd5b602002602001015190506123c182826129a9565b6000828152600a602090815260408083206001600160a01b038d168452909152812080548392906123f3908490613c99565b90915550506000828152600b602052604081208054839290612416908490613c99565b925050819055505050808061242a90613d54565b915050612357565b50856001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb88886040516124839291906134ae565b60405180910390a4610cce816000888888886129d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124e257634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612505846001600160a01b0316611a12565b15610cce5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061253e908990899088908890889060040161343d565b602060405180830381600087803b15801561255857600080fd5b505af1925050508015612588575060408051601f3d908101601f191682019092526125859181019061316d565b60015b6125d157612594613da1565b8061259f57506125b9565b8060405162461bcd60e51b81526004016108c69190613529565b60405162461bcd60e51b81526004016108c69061361f565b6001600160e01b0319811663f23a6e6160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b50505050505050565b61261261127c565b1561262f5760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166126555760405162461bcd60e51b81526004016108c690613b1f565b600081116126755760405162461bcd60e51b81526004016108c690613741565b600061267f611aaa565b90506126af818560006126918761249a565b61269a8761249a565b60405180602001604052806000815250610cce565b6000838152600a602090815260408083206001600160a01b0388168452909152902054828110156126f25760405162461bcd60e51b81526004016108c6906138fe565b6126fc8382613cd6565b6000858152600a602090815260408083206001600160a01b038a168452825280832093909355868252600b9052908120805485929061273c908490613cd6565b9250508190555060006001600160a01b0316856001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612793929190613c18565b60405180910390a45050505050565b6127aa61127c565b156127c75760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166127ed5760405162461bcd60e51b81526004016108c690613b1f565b805182511461280e5760405162461bcd60e51b81526004016108c690613ae8565b6000612818611aaa565b905061283881856000868660405180602001604052806000815250610cce565b60005b835181101561294a57600084828151811061286657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061289257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082206001600160a01b038c1683529093529190912054909150818110156128e35760405162461bcd60e51b81526004016108c6906138fe565b6128ed8282613cd6565b6000848152600a602090815260408083206001600160a01b038d168452825280832093909355858252600b9052908120805484929061292d908490613cd6565b92505081905550505050808061294290613d54565b91505061283b565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161299b9291906134ae565b60405180910390a450505050565b6129b282611a73565b811115610c155760405162461bcd60e51b81526004016108c690613593565b6129e3846001600160a01b0316611a12565b15610cce5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a1c90899089908890889088906004016133eb565b602060405180830381600087803b158015612a3657600080fd5b505af1925050508015612a66575060408051601f3d908101601f19168201909252612a639181019061316d565b60015b612a7257612594613da1565b6001600160e01b0319811663bc197c8160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b828054612aae90613d19565b90600052602060002090601f016020900481019282612ad05760008555612b16565b82601f10612ae957805160ff1916838001178555612b16565b82800160010185558215612b16579182015b82811115612b16578251825591602001919060010190612afb565b50612b22929150612b26565b5090565b5b80821115612b225760008155600101612b27565b600082601f830112612b4b578081fd5b81356020612b60612b5b83613c4f565b613c26565b8281528181019085830183850287018401881015612b7c578586fd5b855b85811015612b9a57813584529284019290840190600101612b7e565b5090979650505050505050565b600082601f830112612bb7578081fd5b8135612bc5612b5b82613c72565b818152846020838601011115612bd9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c04578081fd5b813561174d81613e45565b60008060408385031215612c21578081fd5b8235612c2c81613e45565b91506020830135612c3c81613e45565b809150509250929050565b600080600080600060a08688031215612c5e578081fd5b8535612c6981613e45565b94506020860135612c7981613e45565b935060408601356001600160401b0380821115612c94578283fd5b612ca089838a01612b3b565b94506060880135915080821115612cb5578283fd5b612cc189838a01612b3b565b93506080880135915080821115612cd6578283fd5b50612ce388828901612ba7565b9150509295509295909350565b600080600080600060a08688031215612d07578283fd5b8535612d1281613e45565b94506020860135612d2281613e45565b9350604086013592506060860135915060808601356001600160401b03811115612d4a578182fd5b612ce388828901612ba7565b600080600060608486031215612d6a578081fd5b8335612d7581613e45565b925060208401356001600160401b0380821115612d90578283fd5b612d9c87838801612b3b565b93506040860135915080821115612db1578283fd5b50612dbe86828701612b3b565b9150509250925092565b60008060008060808587031215612ddd578182fd5b8435612de881613e45565b935060208501356001600160401b0380821115612e03578384fd5b612e0f88838901612b3b565b94506040870135915080821115612e24578384fd5b612e3088838901612b3b565b93506060870135915080821115612e45578283fd5b50612e5287828801612ba7565b91505092959194509250565b60008060408385031215612e70578182fd5b8235612e7b81613e45565b915060208301358015158114612c3c578182fd5b600080600080600060a08688031215612ea6578283fd5b8535612eb181613e45565b945060208601356001600160401b03811115612ecb578384fd5b612ed788828901612ba7565b9450506040860135925060608601359150608086013560ff81168114612efb578182fd5b809150509295509295909350565b60008060408385031215612f1b578182fd5b8235612f2681613e45565b946020939093013593505050565b600080600060608486031215612f48578081fd5b8335612f5381613e45565b95602085013595506040909401359392505050565b60008060008060808587031215612f7d578182fd5b8435612f8881613e45565b9350602085013592506040850135915060608501356001600160401b03811115612fb0578182fd5b612e5287828801612ba7565b60008060408385031215612fce578182fd5b82356001600160401b0380821115612fe4578384fd5b818501915085601f830112612ff7578384fd5b81356020613007612b5b83613c4f565b82815281810190858301838502870184018b1015613023578889fd5b8896505b8487101561304e57803561303a81613e45565b835260019690960195918301918301613027565b5096505086013592505080821115613064578283fd5b5061307185828601612b3b565b9150509250929050565b6000602080838503121561308d578182fd5b82356001600160401b03808211156130a3578384fd5b818501915085601f8301126130b6578384fd5b81356130c4612b5b82613c4f565b818152848101908486016040808502870188018b10156130e2578889fd5b8896505b848710156131425780828c0312156130fc578889fd5b8051818101818110888211171561311557613115613d85565b8252823581528883013561312881613e45565b818a015284526001969096019592870192908101906130e6565b50909998505050505050505050565b600060208284031215613162578081fd5b813561174d81613e5a565b60006020828403121561317e578081fd5b815161174d81613e5a565b60006020828403121561319a578081fd5b815161174d81613e45565b6000602082840312156131b6578081fd5b81356001600160401b038111156131cb578182fd5b6107ba84828501612ba7565b6000602082840312156131e8578081fd5b81516001600160401b038111156131fd578182fd5b8201601f8101841361320d578182fd5b805161321b612b5b82613c72565b81815285602083850101111561322f578384fd5b613240826020830160208601613ced565b95945050505050565b60006020828403121561325a578081fd5b5035919050565b600060208284031215613272578081fd5b5051919050565b6000806040838503121561328b578182fd5b823591506020830135612c3c81613e45565b600080604083850312156132af578182fd5b8235915060208301356001600160401b038111156132cb578182fd5b61307185828601612ba7565b6000815180845260208085019450808401835b83811015613306578151875295820195908201906001016132ea565b509495945050505050565b60008151808452613329816020860160208601613ced565b601f01601f19169290920160200192915050565b6000825161334f818460208701613ced565b9190910192915050565b6000835161336b818460208801613ced565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0384811682528316602082015260606040820181905260009061324090830184613311565b6001600160a01b0386811682528516602082015260a060408201819052600090613417908301866132d7565b828103606084015261342981866132d7565b90508281036080840152610a558185613311565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061347790830184613311565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b60006020825261174d60208301846132d7565b6000604082526134c160408301856132d7565b828103602084015261324081856132d7565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261174d6020830184613311565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526021908201527f5155414e544954595f455843454544535f544f4b454e5f535550504c595f43416040820152600560fc1b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252601f908201527f5472616e7366657220746f206e6f6e2045524331313535526563656976657200604082015260600190565b6020808252601d908201527f4f4e4c595f46554c4c5f544f4b454e5f4f574e45525f414c4c4f574544000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601f908201527f4f4e4c595f544f4b454e5f414d4f554e545f4f574e45445f414c4c4f57454400604082015260600190565b602080825260149082015273414d4f554e545f4c4553535f5448414e5f4f4e4560601b604082015260600190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b60208082526018908201527f5a45524f5f414444524553535f4e4f545f414c4c4f5745440000000000000000604082015260600190565b6020808252601f908201527f4552433131353552656365697665722072656a656374656420746f6b656e7300604082015260600190565b60208082526025908201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360408201526424a3a722a960d91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252600e908201526d4f4e4c595f56414c49445f55524960901b604082015260600190565b602080825260169082015275414d4f554e545f455843454544535f42414c414e434560501b604082015260600190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601590820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b604082015260600190565b60208082526015908201527415549257d0d0539393d517d09157d0d2105391d151605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b60208082526010908201526f135251d490551157d11254d05093115160821b604082015260600190565b60208082526014908201527313d3931657d0d491505513d497d0531313d5d15160621b604082015260600190565b60208082526024908201527f455243313135355472616e6461626c653a2043414c4c45525f4e4f545f414c4c60408201526313d5d15160e21b606082015260800190565b6020808252601b908201527f4944535f414d4f554e54535f4c454e4754485f4d49534d415443480000000000604082015260600190565b6020808252601690820152754255524e5f46524f4d5f5a45524f5f4144445245535360501b604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613c4757613c47613d85565b604052919050565b60006001600160401b03821115613c6857613c68613d85565b5060209081020190565b60006001600160401b03821115613c8b57613c8b613d85565b50601f01601f191660200190565b60008219821115613cac57613cac613d6f565b500190565b600060ff821660ff84168060ff03821115613cce57613cce613d6f565b019392505050565b600082821015613ce857613ce8613d6f565b500390565b60005b83811015613d08578181015183820152602001613cf0565b838111156110175750506000910152565b600281046001821680613d2d57607f821691505b60208210811415613d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d6857613d68613d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613db157610bd8565b600481823e6308c379a0613dc58251613d9b565b14613dcf57610bd8565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613dfe5750505050610bd8565b82840192508251915080821115613e185750505050610bd8565b503d83016020828401011115613e3057505050610bd8565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461181257600080fd5b6001600160e01b03198116811461181257600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220fc1f5aea4eeee2df5db9b9be6c44f54550ede2ce190013367fe005dfc634543b64736f6c63430008000033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429","deployedBytecode":"0x6080604052600436106102665760003560e01c8063731133e911610144578063b48ab8b6116100b6578063e985e9c51161007a578063e985e9c5146106d0578063f242432a146106f0578063f2fde38b14610710578063f5298aca14610730578063f6eb127a14610750578063f923e8c31461077057610266565b8063b48ab8b614610646578063bd85b03914610666578063c311c52314610686578063cd7c03261461069b578063d26ea6c0146106b057610266565b80638da5cb5b116101085780638da5cb5b1461059c57806391686f53146105b157806395d89b41146105d15780639e037eea146105e6578063a22cb46514610606578063a50aa5c31461062657610266565b8063731133e91461050757806373505d35146105275780638456cb5914610547578063862440e21461055c578063869f75941461057c57610266565b80632eb2c2d6116101dd5780634e1273f4116101a15780634e1273f41461044e5780634f558e791461047b578063510b51581461049b5780635b51acff146104c85780635c975abb146104dd578063715018a6146104f257610266565b80632eb2c2d6146103c45780632f1c982c146103e45780633408e470146104045780633588ad7c146104195780633f4ba83a1461043957610266565b80630e89341c1161022f5780630e89341c1461031a5780630f7e59701461033a5780631e7d9dbb1461034f57806320379ee51461036f57806324d88785146103845780632d0335ab146103a457610266565b8062fdd58e1461026b57806301ffc9a7146102a157806306fdde03146102ce5780630bb2465a146102f05780630c53c51c14610307575b600080fd5b34801561027757600080fd5b5061028b610286366004612f09565b610785565b60405161029891906134de565b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004613151565b6107c4565b60405161029891906134d3565b3480156102da57600080fd5b506102e361080c565b6040516102989190613529565b3480156102fc57600080fd5b5061030561089a565b005b6102e3610315366004612e8f565b6108e1565b34801561032657600080fd5b506102e3610335366004613249565b610a61565b34801561034657600080fd5b506102e3610ba2565b34801561035b57600080fd5b506102c161036a366004613249565b610bbf565b34801561037b57600080fd5b5061028b610bd4565b34801561039057600080fd5b5061030561039f3660046131a5565b610bdb565b3480156103b057600080fd5b5061028b6103bf366004612bf3565b610c19565b3480156103d057600080fd5b506103056103df366004612c47565b610c34565b3480156103f057600080fd5b506103056103ff36600461307b565b610cd6565b34801561041057600080fd5b5061028b61101d565b34801561042557600080fd5b5061030561043436600461329d565b611021565b34801561044557600080fd5b506103056110be565b34801561045a57600080fd5b5061046e610469366004612fbc565b6110ef565b604051610298919061349b565b34801561048757600080fd5b506102c1610496366004613249565b61120e565b3480156104a757600080fd5b506104bb6104b6366004613249565b611222565b60405161029891906133ab565b3480156104d457600080fd5b506104bb61126d565b3480156104e957600080fd5b506102c161127c565b3480156104fe57600080fd5b5061030561128c565b34801561051357600080fd5b50610305610522366004612f68565b6112d5565b34801561053357600080fd5b506102c1610542366004612bf3565b61133e565b34801561055357600080fd5b50610305611353565b34801561056857600080fd5b5061030561057736600461329d565b611382565b34801561058857600080fd5b5061028b610597366004613249565b6113dd565b3480156105a857600080fd5b506104bb6113e8565b3480156105bd57600080fd5b506103056105cc366004613279565b6113f7565b3480156105dd57600080fd5b506102e36114a0565b3480156105f257600080fd5b50610305610601366004612bf3565b6114ad565b34801561061257600080fd5b50610305610621366004612e5e565b6114f5565b34801561063257600080fd5b50610305610641366004612bf3565b6115c3565b34801561065257600080fd5b50610305610661366004612dc8565b61160e565b34801561067257600080fd5b5061028b610681366004613249565b6116bb565b34801561069257600080fd5b506102c16116cd565b3480156106a757600080fd5b506104bb6116d2565b3480156106bc57600080fd5b506103056106cb366004612bf3565b6116e1565b3480156106dc57600080fd5b506102c16106eb366004612c0f565b61172a565b3480156106fc57600080fd5b5061030561070b366004612cf0565b611754565b34801561071c57600080fd5b5061030561072b366004612bf3565b6117a4565b34801561073c57600080fd5b5061030561074b366004612f34565b611815565b34801561075c57600080fd5b5061030561076b366004612d56565b61184a565b34801561077c57600080fd5b506102e36118ee565b6000806107928484611a18565b905061079d84611a68565b6107a757806107ba565b6107b083611a73565b6107ba9082613c99565b9150505b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806107f557506001600160e01b031982166303a24d0760e21b145b80610804575061080482611a91565b90505b919050565b6008805461081990613d19565b80601f016020809104026020016040519081016040528092919081815260200182805461084590613d19565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505081565b6108aa6108a5611aaa565b611ab9565b6108cf5760405162461bcd60e51b81526004016108c69061376f565b60405180910390fd5b601080546001600160a01b0319169055565b60408051606081810183526001600160a01b0388166000818152600560209081529085902054845283015291810186905261091f8782878787611aee565b61093b5760405162461bcd60e51b81526004016108c690613a0b565b6001600160a01b03871660009081526005602052604090205461095f906001613c99565b6001600160a01b0388166000908152600560205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b906109af90899033908a906133bf565b60405180910390a1600080306001600160a01b0316888a6040516020016109d7929190613359565b60408051601f19818403018152908290526109f19161333d565b6000604051808303816000865af19150503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b509150915081610a555760405162461bcd60e51b81526004016108c6906136d3565b98975050505050505050565b6000818152600d6020526040812080546060929190610a7f90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610aab90613d19565b8015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b505050505090508051600014610b0f579050610807565b600c8054610b1c90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4890613d19565b8015610b955780601f10610b6a57610100808354040283529160200191610b95565b820191906000526020600020905b815481529060010190602001808311610b7857829003601f168201915b5050505050915050919050565b604051806040016040528060018152602001603160f81b81525081565b6000908152600e602052604090205460ff1690565b6004545b90565b610be66108a5611aaa565b610c025760405162461bcd60e51b81526004016108c69061376f565b8051610c1590600c906020840190612aa2565b5050565b6001600160a01b031660009081526005602052604090205490565b8151835114610c555760405162461bcd60e51b81526004016108c690613978565b60005b8351811015610cce57610cbc8686868481518110610c8657634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610cae57634e487b7160e01b600052603260045260246000fd5b602002602001015186611754565b80610cc681613d54565b915050610c58565b505050505050565b610ce16108a5611aaa565b610cfd5760405162461bcd60e51b81526004016108c69061376f565b6010546001600160a01b031680610d265760405162461bcd60e51b81526004016108c690613a4c565b6000816001600160a01b031663f923e8c36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9d91908101906131d7565b905060005b8351811015611017576000848281518110610dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015190506000858381518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905060006001600160a01b0316816001600160a01b03161415610e3e5760405162461bcd60e51b81526004016108c6906137b4565b604051627eeac760e11b81526000906001600160a01b0387169062fdd58e90610e6d9085908790600401613482565b60206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190613261565b905080610ecc57505050611007565b610ee782848360405180602001604052806000815250611b94565b845160208601206040516303a24d0760e21b81526001600160a01b03881690630e89341c90610f1a9087906004016134de565b60006040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6e91908101906131d7565b80519060200120146110035761100383876001600160a01b0316630e89341c866040518263ffffffff1660e01b8152600401610faa91906134de565b60006040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906131d7565b611bb4565b5050505b61101081613d54565b9050610da2565b50505050565b4690565b816110338161102e611aaa565b611c34565b61104f5760405162461bcd60e51b81526004016108c690613a76565b8261105981610bbf565b156110765760405162461bcd60e51b81526004016108c6906139a7565b83611091611082611aaa565b8261108c84611c67565b611c82565b6110ad5760405162461bcd60e51b81526004016108c690613656565b6110b78585611bb4565b5050505050565b6110c96108a5611aaa565b6110e55760405162461bcd60e51b81526004016108c69061376f565b6110ed611c99565b565b606081518351146111125760405162461bcd60e51b81526004016108c690613b98565b600083516001600160401b0381111561113b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611164578160200160208202803683370190505b50905060005b8451811015611206576111cb85828151811061119657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111be57634e487b7160e01b600052603260045260246000fd5b6020026020010151610785565b8282815181106111eb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526111ff81613d54565b905061116a565b509392505050565b6000908152600b6020526040902054151590565b6000818152601260205260408120546001600160a01b03161561125d57506000818152601260205260409020546001600160a01b0316610807565b61126682611d0a565b9050610807565b6010546001600160a01b031681565b600654600160a01b900460ff1690565b611294611aaa565b6001600160a01b03166112a56113e8565b6001600160a01b0316146112cb5760405162461bcd60e51b81526004016108c6906139d6565b6110ed6000611d24565b6002600f5414156112f85760405162461bcd60e51b81526004016108c690613be1565b6002600f558261130a8161102e611aaa565b6113265760405162461bcd60e51b81526004016108c690613a76565b61133285858585611b94565b50506001600f55505050565b60116020526000908152604090205460ff1681565b61135e6108a5611aaa565b61137a5760405162461bcd60e51b81526004016108c69061376f565b6110ed611d76565b8161138f8161102e611aaa565b6113ab5760405162461bcd60e51b81526004016108c690613a76565b826113b7611082611aaa565b6113d35760405162461bcd60e51b81526004016108c690613656565b6110178484611dd7565b600061080482611c67565b6006546001600160a01b031690565b816114048161102e611aaa565b6114205760405162461bcd60e51b81526004016108c690613a76565b6001600160a01b0382166114465760405162461bcd60e51b81526004016108c69061353c565b60008381526012602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917f39071c63e44267bfdefc7b625c0df99d3ce2e6ff98d9f5e9e8a7ab43cdf5000d9190a3505050565b6009805461081990613d19565b6114b86108a5611aaa565b6114d45760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19169055565b816001600160a01b0316611507611aaa565b6001600160a01b0316141561152e5760405162461bcd60e51b81526004016108c690613b4f565b806001600061153b611aaa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561157f611aaa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b791906134d3565b60405180910390a35050565b6115ce6108a5611aaa565b6115ea5760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19166001179055565b6002600f5414156116315760405162461bcd60e51b81526004016108c690613be1565b6002600f5560005b83518110156116a35761167584828151811061166557634e487b7160e01b600052603260045260246000fd5b602002602001015161102e611aaa565b6116915760405162461bcd60e51b81526004016108c690613a76565b8061169b81613d54565b915050611639565b506116b084848484611e27565b50506001600f555050565b6000908152600b602052604090205490565b600190565b6007546001600160a01b031681565b6116ec6108a5611aaa565b6117085760405162461bcd60e51b81526004016108c69061376f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006117368383611e8c565b15611743575060016107be565b61174d8383611ebf565b9392505050565b60006117608685611a18565b9050828110156117975761177f85856117798487613cd6565b856112d5565b8015611792576117928686868486611eed565b610cce565b610cce8686868686611eed565b6117ac611aaa565b6001600160a01b03166117bd6113e8565b6001600160a01b0316146117e35760405162461bcd60e51b81526004016108c6906139d6565b6001600160a01b0381166118095760405162461bcd60e51b81526004016108c69061368d565b61181281611d24565b50565b828282611823838383611c82565b61183f5760405162461bcd60e51b81526004016108c69061370a565b610cce8686866120ae565b60005b82518110156118dd576118af8484838151811061187a57634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106118a257634e487b7160e01b600052603260045260246000fd5b6020026020010151611c82565b6118cb5760405162461bcd60e51b81526004016108c69061370a565b806118d581613d54565b91505061184d565b506118e9838383612104565b505050565b600c805461081990613d19565b60003330141561195257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610bd89050565b503390565b60075460009061196f906001600160a01b0316611a12565b61197b575060006107be565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906119b09088906004016133ab565b60206040518083038186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613189565b6001600160a01b031614949350505050565b3b151590565b60006001600160a01b038316611a405760405162461bcd60e51b81526004016108c6906135d4565b506000908152600a602090815260408083206001600160a01b03949094168352929052205490565b600061080482611ab9565b6000611a7e826116bb565b611a87836113dd565b6108049190613cd6565b6001600160e01b031981166301ffc9a760e01b14919050565b6000611ab46118fb565b905090565b6000816001600160a01b0316611acd6113e8565b6001600160a01b031614806108045750610804611ae86113e8565b83611e8c565b60006001600160a01b038616611b165760405162461bcd60e51b81526004016108c690613822565b6001611b29611b248761215a565b6121b8565b83868660405160008152602001604052604051611b49949392919061350b565b6020604051602081039080840390855afa158015611b6b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b611ba0848484846121d4565b600181511115611017576110178382611dd7565b6000815111611bd55760405162461bcd60e51b81526004016108c6906138d6565b6000828152600e60205260409020805460ff19166001179055611bf88282611dd7565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720782604051611c289190613529565b60405180910390a25050565b600080611c4084611222565b9050826001600160a01b0316816001600160a01b031614806107ba57506107ba8184611e8c565b6000611c7a600165010000000000613cd6565b909116919050565b600081611c8f8585610785565b1015949350505050565b611ca161127c565b611cbd5760405162461bcd60e51b81526004016108c690613565565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611cf3611aaa565b604051611d0091906133ab565b60405180910390a1565b6000611d1860286038613cb1565b60ff169190911c919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d7e61127c565b15611d9b5760405162461bcd60e51b81526004016108c690613867565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf3611aaa565b6000828152600d602090815260409091208251611df692840190612aa2565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051611c289190613529565b611e33848484846122f1565b6001815111156110175760005b83518110156110b757611e7a848281518110611e6c57634e487b7160e01b600052603260045260246000fd5b602002602001015183611dd7565b80611e8481613d54565b915050611e40565b6001600160a01b03811660009081526011602052604081205460ff1615611eb5575060016107be565b61174d8383611957565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b611ef561127c565b15611f125760405162461bcd60e51b81526004016108c690613867565b84611f1b611aaa565b6001600160a01b0316816001600160a01b03161480611f415750611f41816106eb611aaa565b611f5d5760405162461bcd60e51b81526004016108c690613aa4565b6001600160a01b038516611f835760405162461bcd60e51b81526004016108c690613891565b6000611f8d611aaa565b9050611fad818888611f9e8961249a565b611fa78961249a565b88610cce565b6000858152600a602090815260408083206001600160a01b038b16845290915290205484811015611ff05760405162461bcd60e51b81526004016108c69061392e565b611ffa8582613cd6565b6000878152600a602090815260408083206001600160a01b038d81168552925280832093909355891681529081208054879290612038908490613c99565b92505081905550866001600160a01b0316886001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161208e929190613c18565b60405180910390a46120a48289898989896124f3565b5050505050505050565b826120b7611aaa565b6001600160a01b0316816001600160a01b031614806120dd57506120dd816106eb611aaa565b6120f95760405162461bcd60e51b81526004016108c690613aa4565b61101784848461260a565b8261210d611aaa565b6001600160a01b0316816001600160a01b031614806121335750612133816106eb611aaa565b61214f5760405162461bcd60e51b81526004016108c690613aa4565b6110178484846127a2565b6000604051806080016040528060438152602001613e71604391398051602091820120835184830151604080870151805190860120905161219b95016134e7565b604051602081830303815290604052805190602001209050919050565b60006121c2610bd4565b8260405160200161219b929190613390565b6121dc61127c565b156121f95760405162461bcd60e51b81526004016108c690613867565b6000612203611aaa565b9050612224816000876122158861249a565b61221e8861249a565b87610cce565b61222e84846129a9565b6000848152600a602090815260408083206001600160a01b038916845290915281208054859290612260908490613c99565b90915550506000848152600b602052604081208054859290612283908490613c99565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122da929190613c18565b60405180910390a46110b7816000878787876124f3565b6122f961127c565b156123165760405162461bcd60e51b81526004016108c690613867565b81518351146123375760405162461bcd60e51b81526004016108c690613978565b82516000612343611aaa565b905061235481600088888888610cce565b60005b8281101561243257600086828151811061238157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106123ad57634e487b7160e01b600052603260045260246000fd5b602002602001015190506123c182826129a9565b6000828152600a602090815260408083206001600160a01b038d168452909152812080548392906123f3908490613c99565b90915550506000828152600b602052604081208054839290612416908490613c99565b925050819055505050808061242a90613d54565b915050612357565b50856001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb88886040516124839291906134ae565b60405180910390a4610cce816000888888886129d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124e257634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612505846001600160a01b0316611a12565b15610cce5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061253e908990899088908890889060040161343d565b602060405180830381600087803b15801561255857600080fd5b505af1925050508015612588575060408051601f3d908101601f191682019092526125859181019061316d565b60015b6125d157612594613da1565b8061259f57506125b9565b8060405162461bcd60e51b81526004016108c69190613529565b60405162461bcd60e51b81526004016108c69061361f565b6001600160e01b0319811663f23a6e6160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b50505050505050565b61261261127c565b1561262f5760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166126555760405162461bcd60e51b81526004016108c690613b1f565b600081116126755760405162461bcd60e51b81526004016108c690613741565b600061267f611aaa565b90506126af818560006126918761249a565b61269a8761249a565b60405180602001604052806000815250610cce565b6000838152600a602090815260408083206001600160a01b0388168452909152902054828110156126f25760405162461bcd60e51b81526004016108c6906138fe565b6126fc8382613cd6565b6000858152600a602090815260408083206001600160a01b038a168452825280832093909355868252600b9052908120805485929061273c908490613cd6565b9250508190555060006001600160a01b0316856001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612793929190613c18565b60405180910390a45050505050565b6127aa61127c565b156127c75760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166127ed5760405162461bcd60e51b81526004016108c690613b1f565b805182511461280e5760405162461bcd60e51b81526004016108c690613ae8565b6000612818611aaa565b905061283881856000868660405180602001604052806000815250610cce565b60005b835181101561294a57600084828151811061286657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061289257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082206001600160a01b038c1683529093529190912054909150818110156128e35760405162461bcd60e51b81526004016108c6906138fe565b6128ed8282613cd6565b6000848152600a602090815260408083206001600160a01b038d168452825280832093909355858252600b9052908120805484929061292d908490613cd6565b92505081905550505050808061294290613d54565b91505061283b565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161299b9291906134ae565b60405180910390a450505050565b6129b282611a73565b811115610c155760405162461bcd60e51b81526004016108c690613593565b6129e3846001600160a01b0316611a12565b15610cce5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a1c90899089908890889088906004016133eb565b602060405180830381600087803b158015612a3657600080fd5b505af1925050508015612a66575060408051601f3d908101601f19168201909252612a639181019061316d565b60015b612a7257612594613da1565b6001600160e01b0319811663bc197c8160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b828054612aae90613d19565b90600052602060002090601f016020900481019282612ad05760008555612b16565b82601f10612ae957805160ff1916838001178555612b16565b82800160010185558215612b16579182015b82811115612b16578251825591602001919060010190612afb565b50612b22929150612b26565b5090565b5b80821115612b225760008155600101612b27565b600082601f830112612b4b578081fd5b81356020612b60612b5b83613c4f565b613c26565b8281528181019085830183850287018401881015612b7c578586fd5b855b85811015612b9a57813584529284019290840190600101612b7e565b5090979650505050505050565b600082601f830112612bb7578081fd5b8135612bc5612b5b82613c72565b818152846020838601011115612bd9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c04578081fd5b813561174d81613e45565b60008060408385031215612c21578081fd5b8235612c2c81613e45565b91506020830135612c3c81613e45565b809150509250929050565b600080600080600060a08688031215612c5e578081fd5b8535612c6981613e45565b94506020860135612c7981613e45565b935060408601356001600160401b0380821115612c94578283fd5b612ca089838a01612b3b565b94506060880135915080821115612cb5578283fd5b612cc189838a01612b3b565b93506080880135915080821115612cd6578283fd5b50612ce388828901612ba7565b9150509295509295909350565b600080600080600060a08688031215612d07578283fd5b8535612d1281613e45565b94506020860135612d2281613e45565b9350604086013592506060860135915060808601356001600160401b03811115612d4a578182fd5b612ce388828901612ba7565b600080600060608486031215612d6a578081fd5b8335612d7581613e45565b925060208401356001600160401b0380821115612d90578283fd5b612d9c87838801612b3b565b93506040860135915080821115612db1578283fd5b50612dbe86828701612b3b565b9150509250925092565b60008060008060808587031215612ddd578182fd5b8435612de881613e45565b935060208501356001600160401b0380821115612e03578384fd5b612e0f88838901612b3b565b94506040870135915080821115612e24578384fd5b612e3088838901612b3b565b93506060870135915080821115612e45578283fd5b50612e5287828801612ba7565b91505092959194509250565b60008060408385031215612e70578182fd5b8235612e7b81613e45565b915060208301358015158114612c3c578182fd5b600080600080600060a08688031215612ea6578283fd5b8535612eb181613e45565b945060208601356001600160401b03811115612ecb578384fd5b612ed788828901612ba7565b9450506040860135925060608601359150608086013560ff81168114612efb578182fd5b809150509295509295909350565b60008060408385031215612f1b578182fd5b8235612f2681613e45565b946020939093013593505050565b600080600060608486031215612f48578081fd5b8335612f5381613e45565b95602085013595506040909401359392505050565b60008060008060808587031215612f7d578182fd5b8435612f8881613e45565b9350602085013592506040850135915060608501356001600160401b03811115612fb0578182fd5b612e5287828801612ba7565b60008060408385031215612fce578182fd5b82356001600160401b0380821115612fe4578384fd5b818501915085601f830112612ff7578384fd5b81356020613007612b5b83613c4f565b82815281810190858301838502870184018b1015613023578889fd5b8896505b8487101561304e57803561303a81613e45565b835260019690960195918301918301613027565b5096505086013592505080821115613064578283fd5b5061307185828601612b3b565b9150509250929050565b6000602080838503121561308d578182fd5b82356001600160401b03808211156130a3578384fd5b818501915085601f8301126130b6578384fd5b81356130c4612b5b82613c4f565b818152848101908486016040808502870188018b10156130e2578889fd5b8896505b848710156131425780828c0312156130fc578889fd5b8051818101818110888211171561311557613115613d85565b8252823581528883013561312881613e45565b818a015284526001969096019592870192908101906130e6565b50909998505050505050505050565b600060208284031215613162578081fd5b813561174d81613e5a565b60006020828403121561317e578081fd5b815161174d81613e5a565b60006020828403121561319a578081fd5b815161174d81613e45565b6000602082840312156131b6578081fd5b81356001600160401b038111156131cb578182fd5b6107ba84828501612ba7565b6000602082840312156131e8578081fd5b81516001600160401b038111156131fd578182fd5b8201601f8101841361320d578182fd5b805161321b612b5b82613c72565b81815285602083850101111561322f578384fd5b613240826020830160208601613ced565b95945050505050565b60006020828403121561325a578081fd5b5035919050565b600060208284031215613272578081fd5b5051919050565b6000806040838503121561328b578182fd5b823591506020830135612c3c81613e45565b600080604083850312156132af578182fd5b8235915060208301356001600160401b038111156132cb578182fd5b61307185828601612ba7565b6000815180845260208085019450808401835b83811015613306578151875295820195908201906001016132ea565b509495945050505050565b60008151808452613329816020860160208601613ced565b601f01601f19169290920160200192915050565b6000825161334f818460208701613ced565b9190910192915050565b6000835161336b818460208801613ced565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0384811682528316602082015260606040820181905260009061324090830184613311565b6001600160a01b0386811682528516602082015260a060408201819052600090613417908301866132d7565b828103606084015261342981866132d7565b90508281036080840152610a558185613311565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061347790830184613311565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b60006020825261174d60208301846132d7565b6000604082526134c160408301856132d7565b828103602084015261324081856132d7565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261174d6020830184613311565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526021908201527f5155414e544954595f455843454544535f544f4b454e5f535550504c595f43416040820152600560fc1b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252601f908201527f5472616e7366657220746f206e6f6e2045524331313535526563656976657200604082015260600190565b6020808252601d908201527f4f4e4c595f46554c4c5f544f4b454e5f4f574e45525f414c4c4f574544000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601f908201527f4f4e4c595f544f4b454e5f414d4f554e545f4f574e45445f414c4c4f57454400604082015260600190565b602080825260149082015273414d4f554e545f4c4553535f5448414e5f4f4e4560601b604082015260600190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b60208082526018908201527f5a45524f5f414444524553535f4e4f545f414c4c4f5745440000000000000000604082015260600190565b6020808252601f908201527f4552433131353552656365697665722072656a656374656420746f6b656e7300604082015260600190565b60208082526025908201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360408201526424a3a722a960d91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252600e908201526d4f4e4c595f56414c49445f55524960901b604082015260600190565b602080825260169082015275414d4f554e545f455843454544535f42414c414e434560501b604082015260600190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601590820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b604082015260600190565b60208082526015908201527415549257d0d0539393d517d09157d0d2105391d151605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b60208082526010908201526f135251d490551157d11254d05093115160821b604082015260600190565b60208082526014908201527313d3931657d0d491505513d497d0531313d5d15160621b604082015260600190565b60208082526024908201527f455243313135355472616e6461626c653a2043414c4c45525f4e4f545f414c4c60408201526313d5d15160e21b606082015260800190565b6020808252601b908201527f4944535f414d4f554e54535f4c454e4754485f4d49534d415443480000000000604082015260600190565b6020808252601690820152754255524e5f46524f4d5f5a45524f5f4144445245535360501b604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613c4757613c47613d85565b604052919050565b60006001600160401b03821115613c6857613c68613d85565b5060209081020190565b60006001600160401b03821115613c8b57613c8b613d85565b50601f01601f191660200190565b60008219821115613cac57613cac613d6f565b500190565b600060ff821660ff84168060ff03821115613cce57613cce613d6f565b019392505050565b600082821015613ce857613ce8613d6f565b500390565b60005b83811015613d08578181015183820152602001613cf0565b838111156110175750506000910152565b600281046001821680613d2d57607f821691505b60208210811415613d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d6857613d68613d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613db157610bd8565b600481823e6308c379a0613dc58251613d9b565b14613dcf57610bd8565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613dfe5750505050610bd8565b82840192508251915080821115613e185750505050610bd8565b503d83016020828401011115613e3057505050610bd8565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461181257600080fd5b6001600160e01b03198116811461181257600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220fc1f5aea4eeee2df5db9b9be6c44f54550ede2ce190013367fe005dfc634543b64736f6c63430008000033","libraries":{},"devdoc":{"kind":"dev","methods":{"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"batchBurn(address,uint256[],uint256[])":{"details":"Burns tokens for each id in _ids","params":{"_from":"The address to burn tokens from","_ids":"Array of token ids to burn","_quantities":"Array of the amount to be burned"}},"batchMint(address,uint256[],uint256[],bytes)":{"details":"Mint tokens for each id in _ids","params":{"_data":"Data to pass if receiver is contract","_ids":"Array of ids to mint","_quantities":"Array of amounts of tokens to mint per id","_to":"The address to mint tokens to"}},"burn(address,uint256,uint256)":{"details":"Burns amount of a given token id","params":{"_from":"The address to burn tokens from","_id":"Token ID to burn","_quantity":"Amount to burn"}},"exists(uint256)":{"details":"Returns whether the specified token is minted"},"mint(address,uint256,uint256,bytes)":{"details":"Mints some amount of tokens to an address","params":{"_data":"Data to pass if receiver is contract","_id":"Token ID to mint","_quantity":"Amount of tokens to mint","_to":"Address of the future owner of the token"}},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Return true if the contract is paused, and false otherwise"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply(uint256)":{"details":"Returns the total quantity for a token ID","params":{"_id":"Id of token to query"},"returns":{"_0":"Amount of token in existence"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7145,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":7151,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_operatorApprovals","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":7153,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_uri","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2734,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"inited","offset":0,"slot":"3","type":"t_bool"},{"astId":2642,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"domainSeperator","offset":0,"slot":"4","type":"t_bytes32"},{"astId":2781,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"nonces","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":7,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":9009,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_paused","offset":20,"slot":"6","type":"t_bool"},{"astId":134,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"proxyRegistryAddress","offset":0,"slot":"7","type":"t_address"},{"astId":136,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"name","offset":0,"slot":"8","type":"t_string_storage"},{"astId":138,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"symbol","offset":0,"slot":"9","type":"t_string_storage"},{"astId":144,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"balances","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":148,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_supply","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1341,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"templateURI","offset":0,"slot":"12","type":"t_string_storage"},{"astId":1345,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_tokenURI","offset":0,"slot":"13","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":1349,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_isPermanentURI","offset":0,"slot":"14","type":"t_mapping(t_uint256,t_bool)"},{"astId":9098,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_status","offset":0,"slot":"15","type":"t_uint256"},{"astId":1961,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"migrationTarget","offset":0,"slot":"16","type":"t_contract(ForbitswapNFTSAssetShared)2492"},{"astId":1965,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"sharedProxyAddresses","offset":0,"slot":"17","type":"t_mapping(t_address,t_bool)"},{"astId":1974,"contract":"contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared","label":"_creatorOverride","offset":0,"slot":"18","type":"t_mapping(t_uint256,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(ForbitswapNFTSAssetShared)2492":{"encoding":"inplace","label":"contract ForbitswapNFTSAssetShared","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},1850:function(e){e.exports=JSON.parse('{"address":"0x9249a8B74567ea6010607D4444A97eB5D169a171","abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"baseURI","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_baseTokenURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"tokensOfOwner","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}')},1882:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(35),r=t(1),i=t.n(r),s=t(164),d=t(63),b=t(128),o=t(1915),c=t(1849),u=t(1850),f=t(282),l=t(126),p=function(){var e=Object(a.a)(i.a.mark((function e(n,t){var a,r,f,p,m,y,h,g;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=n.chainId,r=n.userAddress,f=n.collectionAddress,p=n.itemStandard,e.prev=1,m=Object(b.a)(o.abi,d.b[a].REGISTRY),y=null,y=p.includes("1155")?Object(b.a)(c.abi,f):Object(b.a)(u.abi,f),h="",e.next=8,m.methods.proxies(r).call().then((function(e){console.log("proxy",e),h=e}));case 8:if(!Object(l.x)(h)){e.next=17;break}if(!t){e.next=13;break}return e.abrupt("return",!1);case 13:return e.next=15,m.methods.registerProxy().send({from:r}).then((function(e){console.log("receipt for register proxy",e)}));case 15:return e.next=17,m.methods.proxies(r).call().then((function(e){console.log("proxy",e),h=e}));case 17:return g=!1,e.next=20,y.methods.isApprovedForAll(r,h).call().then((function(e){console.log("isApproved",e),g=e}));case 20:if(g){e.next=27;break}if(!t){e.next=25;break}return e.abrupt("return",!1);case 25:return e.next=27,y.methods.setApprovalForAll(h,!0).send({from:r}).then((function(e){console.log("receipt for approved",e)}));case 27:return e.abrupt("return",!0);case 30:return e.prev=30,e.t0=e.catch(1),t?s.b.error("Some error occur when checking your wallet initialize!"):s.b.error("Some error occur when initializing your wallet!"),console.log(e.t0),e.abrupt("return",!1);case 35:case"end":return e.stop()}}),e,null,[[1,30]])})));return function(n,t){return e.apply(this,arguments)}}(),m=function(){var e=Object(a.a)(i.a.mark((function e(n,t){var a,r;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=Object(b.a)(f.abi,d.b[t].EXCHANGE),e.next=3,a.methods.calculateFinalPrice(n.side,n.saleKind,n.basePrice,n.extra,n.listingTime,n.expirationTime).call();case 3:return r=e.sent,e.abrupt("return",r);case 5:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}()},1915:function(e){e.exports=JSON.parse('{"address":"0x14aFCbb771B02743234aF08e7DDd8647f42A5b58","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"DELAY_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"contracts","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"delegateProxyImplementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"endGrantAuthentication","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"authAddress","type":"address"}],"name":"grantInitialAuthentication","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialAddressSet","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"pending","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"proxies","outputs":[{"internalType":"contract OwnableDelegateProxy","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerProxy","outputs":[{"internalType":"contract OwnableDelegateProxy","name":"proxy","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"revokeAuthentication","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"startGrantAuthentication","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x1c73275ca48b8f3489ced760842ee9f4ef862d9b30fb30bbf8c92542130c55d5","receipt":{"to":null,"from":"0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8","contractAddress":"0x14aFCbb771B02743234aF08e7DDd8647f42A5b58","transactionIndex":1,"gasUsed":"1627586","logsBloom":"0xblockHash":"0xe961604cc7bc27945c8ccf5f0aa4bdb0587726692311cc6cb6f2cec8aff9ce04","transactionHash":"0x1c73275ca48b8f3489ced760842ee9f4ef862d9b30fb30bbf8c92542130c55d5","logs":[{"transactionIndex":1,"blockNumber":10331050,"transactionHash":"0x1c73275ca48b8f3489ced760842ee9f4ef862d9b30fb30bbf8c92542130c55d5","address":"0x14aFCbb771B02743234aF08e7DDd8647f42A5b58","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x00000000000000000000000000b91b2f8afe87fcdc2b3ffa9ee2278cd1e4ddf8"],"data":"0x","logIndex":1,"blockHash":"0xe961604cc7bc27945c8ccf5f0aa4bdb0587726692311cc6cb6f2cec8aff9ce04"}],"blockNumber":10331050,"cumulativeGasUsed":"1684415","status":1,"byzantium":true},"args":[],"solcInputHash":"98c15b4f3559a23f2599202e42791894","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"DELAY_PERIOD\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"contracts\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"delegateProxyImplementation\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"endGrantAuthentication\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"authAddress\\",\\"type\\":\\"address\\"}],\\"name\\":\\"grantInitialAuthentication\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"initialAddressSet\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"pending\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"proxies\\",\\"outputs\\":[{\\"internalType\\":\\"contract OwnableDelegateProxy\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"registerProxy\\",\\"outputs\\":[{\\"internalType\\":\\"contract OwnableDelegateProxy\\",\\"name\\":\\"proxy\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"revokeAuthentication\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"startGrantAuthentication\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"endGrantAuthentication(address)\\":{\\"details\\":\\"ProxyRegistry owner only\\",\\"params\\":{\\"addr\\":\\"Address to which to grant permissions\\"}},\\"grantInitialAuthentication(address)\\":{\\"details\\":\\"No delay, can only be called once - after that the standard registry process with a delay must be used\\",\\"params\\":{\\"authAddress\\":\\"Address of the contract to grant authentication\\"}},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"registerProxy()\\":{\\"details\\":\\"Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\\",\\"returns\\":{\\"proxy\\":\\"New AuthenticatedProxy contract\\"}},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"revokeAuthentication(address)\\":{\\"details\\":\\"ProxyRegistry owner only\\",\\"params\\":{\\"addr\\":\\"Address of which to revoke permissions\\"}},\\"startGrantAuthentication(address)\\":{\\"details\\":\\"ProxyRegistry owner only\\",\\"params\\":{\\"addr\\":\\"Address to which to grant permissions\\"}},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"endGrantAuthentication(address)\\":{\\"notice\\":\\"End the process to enable access for specified contract after delay period has passed.\\"},\\"grantInitialAuthentication(address)\\":{\\"notice\\":\\"Grant authentication to the initial Exchange protocol contract\\"},\\"registerProxy()\\":{\\"notice\\":\\"Register a proxy contract with this registry\\"},\\"revokeAuthentication(address)\\":{\\"notice\\":\\"Revoke access for specified contract. Can be done instantly.\\"},\\"startGrantAuthentication(address)\\":{\\"notice\\":\\"Start the process to enable access for specified contract. Subject to delay period.\\"}},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/market/ForbitswapNFTSProxyRegistry.sol\\":\\"ForbitswapNFTSProxyRegistry\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{\\":__CACHE_BREAKER__\\":\\"0x00000000d41867734bbee4c6863d9255b2b06ac1\\"},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(\\\\n        address indexed previousOwner,\\\\n        address indexed newOwner\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _setOwner(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _setOwner(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(\\\\n            newOwner != address(0),\\\\n            \\\\\\"Ownable: new owner is the zero address\\\\\\"\\\\n        );\\\\n        _setOwner(newOwner);\\\\n    }\\\\n\\\\n    function _setOwner(address newOwner) private {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5c8ae508c9208b232eada2cf40a774371336fad5b9f3a921fdfdaa007bf23c5e\\",\\"license\\":\\"MIT\\"},\\"contracts/market/ForbitswapNFTSProxyRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./proxy/ProxyRegistry.sol\\\\\\";\\\\nimport \\\\\\"./proxy/AuthenticatedProxy.sol\\\\\\";\\\\n\\\\ncontract ForbitswapNFTSProxyRegistry is ProxyRegistry {\\\\n    string public constant name = \\\\\\"Forbitswap NFTS Proxy Registry\\\\\\";\\\\n\\\\n    bool public initialAddressSet = false;\\\\n\\\\n    constructor() {\\\\n        delegateProxyImplementation = address(new AuthenticatedProxy());\\\\n    }\\\\n\\\\n    /**\\\\n     * Grant authentication to the initial Exchange protocol contract\\\\n     * @dev No delay, can only be called once - after that the standard registry process with a delay must be used\\\\n     * @param authAddress Address of the contract to grant authentication\\\\n     */\\\\n    function grantInitialAuthentication(address authAddress) public onlyOwner {\\\\n        require(!initialAddressSet);\\\\n        initialAddressSet = true;\\\\n        contracts[authAddress] = true;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x53e0941a7ca4a3378577016e3b405c97fd08ec4a071d05aee17550d0d05a61fd\\",\\"license\\":\\"MIT\\"},\\"contracts/market/proxy/AuthenticatedProxy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./TokenRecipient.sol\\\\\\";\\\\nimport \\\\\\"./OwnedUpgradeabilityStorage.sol\\\\\\";\\\\nimport \\\\\\"./ProxyRegistry.sol\\\\\\";\\\\nimport \\\\\\"../../utils/libraries/Market.sol\\\\\\";\\\\n\\\\ncontract AuthenticatedProxy is TokenRecipient, OwnedUpgradeabilityStorage {\\\\n    bool initialized = false;\\\\n    address public user;\\\\n    ProxyRegistry public registry;\\\\n    bool public revoked;\\\\n\\\\n    event Revoked(bool revoked);\\\\n\\\\n    /**\\\\n     * Initialize an AuthenticatedProxy\\\\n     * @param addrUser Address of user on whose behalf this proxy will act\\\\n     * @param addrRegistry Address of ProxyRegistry contract which will manage this proxy\\\\n     */\\\\n    function initialize(address addrUser, ProxyRegistry addrRegistry) public {\\\\n        require(!initialized);\\\\n        initialized = true;\\\\n        user = addrUser;\\\\n        registry = addrRegistry;\\\\n    }\\\\n\\\\n    /**\\\\n     * Set the revoked flag (allows a user to revoke ProxyRegistry access)\\\\n     * @dev Can be called by the user only\\\\n     * @param revoke Whether or not to revoke access\\\\n     */\\\\n    function setRevoke(bool revoke) public {\\\\n        require(_msgSender() == user);\\\\n        revoked = revoke;\\\\n        emit Revoked(revoke);\\\\n    }\\\\n\\\\n    /**\\\\n     * Execute a message call from the proxy contract\\\\n     * @dev Can be called by the user, or by a contract authorized by the registry as long as the user has not revoked access\\\\n     * @param dest Address to which the call will be sent\\\\n     * @param howToCall Which kind of call to make\\\\n     * @param callData Calldata to send\\\\n     * @return result bool Result of the call (success or failure)\\\\n     */\\\\n    function proxy(\\\\n        address dest,\\\\n        Market.HowToCall howToCall,\\\\n        bytes memory callData\\\\n    ) public returns (bool result) {\\\\n        require(\\\\n            _msgSender() == user || (!revoked && registry.contracts(_msgSender()))\\\\n        );\\\\n\\\\n        if (howToCall == Market.HowToCall.Call) {\\\\n            (result, ) = dest.call(callData);\\\\n        } else if (howToCall == Market.HowToCall.DelegateCall) {\\\\n            (result, ) = dest.delegatecall(callData);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * Execute a message call and assert success\\\\n     * @dev Same functionality as `proxy`, just asserts the return value\\\\n     * @param dest Address to which the call will be sent\\\\n     * @param howToCall What kind of call to make\\\\n     * @param callData Calldata to send\\\\n     */\\\\n    function proxyAssert(\\\\n        address dest,\\\\n        Market.HowToCall howToCall,\\\\n        bytes memory callData\\\\n    ) public {\\\\n        require(proxy(dest, howToCall, callData));\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa5027503cbc78eab585c477decee988feb51cd9935ebb76113e7ea76fe9e9ff7\\",\\"license\\":\\"MIT\\"},\\"contracts/market/proxy/OwnableDelegateProxy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./OwnedUpgradeabilityProxy.sol\\\\\\";\\\\n\\\\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\\\\n    constructor(\\\\n        address owner,\\\\n        address initialImplementation,\\\\n        bytes memory callData\\\\n    ) {\\\\n        setUpgradeabilityOwner(owner);\\\\n        _upgradeTo(initialImplementation);\\\\n        (bool success, ) = initialImplementation.delegatecall(callData);\\\\n        require(success);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5c8441c9a3a1faeaaa44ba52101da2f57695eec96515c2215def43630c6686ac\\",\\"license\\":\\"MIT\\"},\\"contracts/market/proxy/OwnedUpgradeabilityProxy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./Proxy.sol\\\\\\";\\\\nimport \\\\\\"./OwnedUpgradeabilityStorage.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\ncontract OwnedUpgradeabilityProxy is Proxy, OwnedUpgradeabilityStorage, Context {\\\\n    \\\\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\\\\n    event Upgraded(address indexed implementer);\\\\n\\\\n    modifier onlyProxyOwner() {\\\\n        require(_msgSender() == proxyOwner());\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tells the address of the current implementation\\\\n     * @return address of the current implementation\\\\n     */\\\\n    function implementation() public view override returns (address) {\\\\n        return _implementation;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tells the proxy type (EIP 897)\\\\n     * @return proxyTypeId (2 for forwarding proxy)\\\\n     */\\\\n    function proxyType() public pure override returns (uint256 proxyTypeId) {\\\\n        return 2;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Upgrades the implementation address\\\\n     * @param implementer representing the address of the new implementation to be set\\\\n     */\\\\n    function _upgradeTo(address implementer) internal {\\\\n        require(_implementation != implementer);\\\\n        _implementation = implementer;\\\\n        emit Upgraded(implementer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tells the address of the proxy owner\\\\n     * @return the address of the proxy owner\\\\n     */\\\\n    function proxyOwner() public view returns (address) {\\\\n        return upgradeabilityOwner();\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\\\n     * @param newOwner The address to transfer ownership to.\\\\n     */\\\\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\\\\n        require(newOwner != address(0));\\\\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\\\\n        setUpgradeabilityOwner(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\\\\n     * @param implementer representing the address of the new implementation to be set.\\\\n     */\\\\n    function upgradeTo(address implementer) public onlyProxyOwner {\\\\n        _upgradeTo(implementer);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\\\\n     * and delegatecall the new implementation for initialization.\\\\n     * @param implementer representing the address of the new implementation to be set.\\\\n     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\\\\n     * signature of the implementation to be called with the needed payload\\\\n     */\\\\n    function upgradeToAndCall(address implementer, bytes memory data)\\\\n        public\\\\n        payable\\\\n        onlyProxyOwner\\\\n    {\\\\n        upgradeTo(implementer);\\\\n        (bool success, ) = address(this).delegatecall(data);\\\\n        require(success);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x39114f393d095d31375dd725c928f7b9755fc91deeea36f788e8c28f318c9d71\\",\\"license\\":\\"MIT\\"},\\"contracts/market/proxy/OwnedUpgradeabilityStorage.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\ncontract OwnedUpgradeabilityStorage {\\\\n    address internal _implementation;\\\\n    address private _upgradeabilityOwner;\\\\n\\\\n    /**\\\\n     * @dev Tells the address of the owner\\\\n     * @return the address of the owner\\\\n     */\\\\n    function upgradeabilityOwner() public view returns (address) {\\\\n        return _upgradeabilityOwner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets the address of the owner\\\\n     */\\\\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\\\\n        _upgradeabilityOwner = newUpgradeabilityOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5b86583dbec38f8d478f6a57450e6ef8acb49398fb24ca4f7ebc796341cb4325\\",\\"license\\":\\"MIT\\"},\\"contracts/market/proxy/Proxy.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nabstract contract Proxy {\\\\n    /**\\\\n     * @dev Tells the address of the implementation where every call will be delegated.\\\\n     * @return address of the implementation to which it will be delegated\\\\n     */\\\\n    function implementation() public view virtual returns (address);\\\\n\\\\n    /**\\\\n     * @dev Tells the type of proxy (EIP 897)\\\\n     * @return proxyTypeId (2 for upgradeable proxy)\\\\n     */\\\\n    function proxyType() public pure virtual returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Receive function allowing to perform a delegatecall to the given implementation.\\\\n     * This function will return whatever the implementation call returns\\\\n     */\\\\n    receive() external payable {}\\\\n\\\\n    /**\\\\n     * @dev Receive function allowing to perform a delegatecall to the given implementation.\\\\n     * This function will return whatever the implementation call returns\\\\n     */\\\\n    fallback() external payable {\\\\n        address _impl = implementation();\\\\n        require(_impl != address(0));\\\\n\\\\n        assembly {\\\\n            let ptr := mload(0x40)\\\\n            calldatacopy(ptr, 0, calldatasize())\\\\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\\\n            let size := returndatasize()\\\\n            returndatacopy(ptr, 0, size)\\\\n\\\\n            switch result\\\\n            case 0 { revert(ptr, size) }\\\\n            default { return(ptr, size) }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0534841921959362c5deb2f1345da30d15784fba5abdaeb39a7aee17eeca87d4\\",\\"license\\":\\"MIT\\"},\\"contracts/market/proxy/ProxyRegistry.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"./OwnableDelegateProxy.sol\\\\\\";\\\\n\\\\ncontract ProxyRegistry is Ownable {\\\\n    address public delegateProxyImplementation;\\\\n\\\\n    mapping(address => OwnableDelegateProxy) public proxies;\\\\n    mapping(address => uint256) public pending;\\\\n    mapping(address => bool) public contracts;\\\\n\\\\n    uint256 public DELAY_PERIOD = 2 weeks;\\\\n\\\\n    /**\\\\n     * Start the process to enable access for specified contract. Subject to delay period.\\\\n     * @dev ProxyRegistry owner only\\\\n     * @param addr Address to which to grant permissions\\\\n     */\\\\n    function startGrantAuthentication(address addr) public onlyOwner {\\\\n        require(!contracts[addr] && pending[addr] == 0);\\\\n        pending[addr] = block.timestamp;\\\\n    }\\\\n\\\\n    /**\\\\n     * End the process to enable access for specified contract after delay period has passed.\\\\n     * @dev ProxyRegistry owner only\\\\n     * @param addr Address to which to grant permissions\\\\n     */\\\\n    function endGrantAuthentication(address addr) public onlyOwner {\\\\n        require(\\\\n            !contracts[addr] &&\\\\n                pending[addr] != 0 &&\\\\n                ((pending[addr] + DELAY_PERIOD) < block.timestamp)\\\\n        );\\\\n        pending[addr] = 0;\\\\n        contracts[addr] = true;\\\\n    }\\\\n\\\\n    /**\\\\n     * Revoke access for specified contract. Can be done instantly.\\\\n     * @dev ProxyRegistry owner only\\\\n     * @param addr Address of which to revoke permissions\\\\n     */\\\\n    function revokeAuthentication(address addr) public onlyOwner {\\\\n        contracts[addr] = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * Register a proxy contract with this registry\\\\n     * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\\\\n     * @return proxy New AuthenticatedProxy contract\\\\n     */\\\\n    function registerProxy() public returns (OwnableDelegateProxy proxy) {\\\\n        require(address(proxies[_msgSender()]) == address(0));\\\\n        proxy = new OwnableDelegateProxy(\\\\n            _msgSender(),\\\\n            delegateProxyImplementation,\\\\n            abi.encodeWithSignature(\\\\n                \\\\\\"initialize(address,address)\\\\\\",\\\\n                _msgSender(),\\\\n                address(this)\\\\n            )\\\\n        );\\\\n        proxies[_msgSender()] = proxy;\\\\n        return proxy;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa5015bed05b1216598112d7e872f3e109128cc431768c234bad39490dab1cdfd\\",\\"license\\":\\"MIT\\"},\\"contracts/market/proxy/TokenRecipient.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\ncontract TokenRecipient is Context {\\\\n    event ReceivedEther(address indexed sender, uint256 amount);\\\\n    event ReceivedTokens(\\\\n        address indexed from,\\\\n        uint256 value,\\\\n        address indexed token,\\\\n        bytes extraData\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Receive tokens and generate a log event\\\\n     * @param from Address from which to transfer tokens\\\\n     * @param value Amount of tokens to transfer\\\\n     * @param token Address of token\\\\n     * @param extraData Additional data to log\\\\n     */\\\\n    function receiveApproval(\\\\n        address from,\\\\n        uint256 value,\\\\n        address token,\\\\n        bytes memory extraData\\\\n    ) public {\\\\n        IERC20 t = IERC20(token);\\\\n        require(t.transferFrom(from, address(this), value));\\\\n        emit ReceivedTokens(from, value, token, extraData);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Receive Ether and generate a log event\\\\n     */\\\\n    receive() external payable {\\\\n        emit ReceivedEther(_msgSender(), msg.value);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Receive Ether and generate a log event\\\\n     */\\\\n    fallback() external payable {\\\\n        emit ReceivedEther(_msgSender(), msg.value);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2d8f3dbd6698feca56de447589a0ca26f5afc4b08c89681c91d89b3284f2fb47\\",\\"license\\":\\"MIT\\"},\\"contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    function totalSupply() external view returns (uint256);\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\",\\"keccak256\\":\\"0x97bf216e58df37955672af4b98f00667a87f3a92905879e22d8cd995c6b444b7\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/libraries/Market.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nlibrary Market {\\\\n    /* Fee method: protocol fee or split fee. */\\\\n    enum FeeMethod {\\\\n        ProtocolFee,\\\\n        SplitFee\\\\n    }\\\\n\\\\n    /**\\\\n     * Side: buy or sell.\\\\n     */\\\\n    enum Side {\\\\n        Buy,\\\\n        Sell\\\\n    }\\\\n\\\\n    /**\\\\n     * Currently supported kinds of sale: fixed price, Dutch auction.\\\\n     * English auctions cannot be supported without stronger escrow guarantees.\\\\n     * Future interesting options: Vickrey auction, nonlinear Dutch auctions.\\\\n     */\\\\n    enum SaleKind {\\\\n        FixedPrice,\\\\n        DutchAuction\\\\n    }\\\\n\\\\n    /* Delegate call could be used to atomically transfer multiple assets owned by the proxy contract with one order. */\\\\n    enum HowToCall {\\\\n        Call,\\\\n        DelegateCall\\\\n    }\\\\n\\\\n    /* An ECDSA signature. */\\\\n    struct Sig {\\\\n        /* v parameter */\\\\n        uint8 v;\\\\n        /* r parameter */\\\\n        bytes32 r;\\\\n        /* s parameter */\\\\n        bytes32 s;\\\\n    }\\\\n\\\\n    /* An order on the exchange. */\\\\n    struct Order {\\\\n        /* Exchange address, intended as a versioning mechanism. */\\\\n        address exchange;\\\\n        /* Order maker address. */\\\\n        address maker;\\\\n        /* Order taker address, if specified. */\\\\n        address taker;\\\\n        /* Maker relayer fee of the order, unused for taker order. */\\\\n        uint256 makerRelayerFee;\\\\n        /* Taker relayer fee of the order, or maximum taker fee for a taker order. */\\\\n        uint256 takerRelayerFee;\\\\n        /* Maker protocol fee of the order, unused for taker order. */\\\\n        uint256 makerProtocolFee;\\\\n        /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\\\\n        uint256 takerProtocolFee;\\\\n        /* Order fee recipient or zero address for taker order. */\\\\n        address feeRecipient;\\\\n        /* Fee method (protocol token or split fee). */\\\\n        FeeMethod feeMethod;\\\\n        /* Side (buy/sell). */\\\\n        Side side;\\\\n        /* Kind of sale. */\\\\n        SaleKind saleKind;\\\\n        /* Target. */\\\\n        address target;\\\\n        /* HowToCall. */\\\\n        HowToCall howToCall;\\\\n        /* Calldata. */\\\\n        bytes callData;\\\\n        /* Calldata replacement pattern, or an empty byte array for no replacement. */\\\\n        bytes replacementPattern;\\\\n        /* Static call target, zero-address for no static call. */\\\\n        address staticTarget;\\\\n        /* Static call extra data. */\\\\n        bytes staticExtradata;\\\\n        /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\\\\n        address paymentToken;\\\\n        /* Base price of the order (in paymentTokens). */\\\\n        uint256 basePrice;\\\\n        /* Auction extra parameter \\\\n        - minimum bid increment for English auctions, starting/ending price difference. */\\\\n        uint256 extra;\\\\n        /* Listing timestamp. */\\\\n        uint256 listingTime;\\\\n        /* Expiration timestamp - 0 for no expiry. */\\\\n        uint256 expirationTime;\\\\n        /* Order salt, used to prevent duplicate hashes. */\\\\n        uint256 salt;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xedcb57415b28c388243f9ac5a74dd6dfca3623d7db5a2fc9dff488aaeceb6b4c\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x6080604052621275006005556006805460ff1916905534801561002157600080fd5b5061003261002d610080565b610084565b60405161003e906100d4565b604051809103906000f08015801561005a573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790556100e1565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109198061129283390190565b6111a2806100f06000396000f3fe60806040523480156200001157600080fd5b50600436106200010c5760003560e01c80638da5cb5b11620000a5578063ddd81f82116200006f578063ddd81f821462000214578063e71a02e1146200021e578063ef7f38341462000228578063f2fde38b146200023f576200010c565b80638da5cb5b14620001c357806397204d8e14620001dc578063c455279114620001e6578063d4e8e06314620001fd576200010c565b806353376d1f11620000e757806353376d1f14620001655780635eebea20146200017c57806369dc9ff314620001a2578063715018a614620001b9576200010c565b806306fdde0314620001115780631a86ac4f146200013357806338b6e407146200014c575b600080fd5b6200011b62000256565b6040516200012a9190620008cf565b60405180910390f35b6200013d6200028f565b6040516200012a9190620008c4565b620001636200015d366004620007e1565b62000298565b005b6200016362000176366004620007e1565b62000396565b620001936200018d366004620007e1565b620003fd565b6040516200012a91906200095f565b6200013d620001b3366004620007e1565b6200040f565b6200016362000424565b620001cd62000478565b6040516200012a91906200085f565b620001cd62000487565b620001cd620001f7366004620007e1565b62000496565b620001636200020e366004620007e1565b620004b1565b620001cd6200055d565b6200019362000670565b6200016362000239366004620007e1565b62000676565b6200016362000250366004620007e1565b62000702565b6040518060400160405280601e81526020017f466f7262697473776170204e4654532050726f7879205265676973747279000081525081565b60065460ff1681565b620002a26200077f565b6001600160a01b0316620002b562000478565b6001600160a01b031614620002e75760405162461bcd60e51b8152600401620002de906200092a565b60405180910390fd5b6001600160a01b03811660009081526004602052604090205460ff161580156200032857506001600160a01b03811660009081526003602052604090205415155b80156200035b57506005546001600160a01b0382166000908152600360205260409020544291620003599162000968565b105b6200036557600080fd5b6001600160a01b0316600090815260036020908152604080832083905560049091529020805460ff19166001179055565b620003a06200077f565b6001600160a01b0316620003b362000478565b6001600160a01b031614620003dc5760405162461bcd60e51b8152600401620002de906200092a565b6001600160a01b03166000908152600460205260409020805460ff19169055565b60036020526000908152604090205481565b60046020526000908152604090205460ff1681565b6200042e6200077f565b6001600160a01b03166200044162000478565b6001600160a01b0316146200046a5760405162461bcd60e51b8152600401620002de906200092a565b62000476600062000783565b565b6000546001600160a01b031690565b6001546001600160a01b031681565b6002602052600090815260409020546001600160a01b031681565b620004bb6200077f565b6001600160a01b0316620004ce62000478565b6001600160a01b031614620004f75760405162461bcd60e51b8152600401620002de906200092a565b6001600160a01b03811660009081526004602052604090205460ff161580156200053757506001600160a01b038116600090815260036020526040902054155b6200054157600080fd5b6001600160a01b03166000908152600360205260409020429055565b6000806002816200056d6200077f565b6001600160a01b03908116825260208201929092526040016000205416146200059557600080fd5b6200059f6200077f565b6001546001600160a01b0316620005b56200077f565b30604051602401620005c992919062000873565b60408051601f198184030181529181526020820180516001600160e01b031663485cc95560e01b17905251620005ff90620007d3565b6200060d939291906200088d565b604051809103906000f0801580156200062a573d6000803e3d6000fd5b50905080600260006200063c6200077f565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905590565b60055481565b620006806200077f565b6001600160a01b03166200069362000478565b6001600160a01b031614620006bc5760405162461bcd60e51b8152600401620002de906200092a565b60065460ff1615620006cd57600080fd5b6006805460ff1990811660019081179092556001600160a01b0390921660009081526004602052604090208054909216179055565b6200070c6200077f565b6001600160a01b03166200071f62000478565b6001600160a01b031614620007485760405162461bcd60e51b8152600401620002de906200092a565b6001600160a01b038116620007715760405162461bcd60e51b8152600401620002de90620008e4565b6200077c8162000783565b50565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107df806200098e83390190565b600060208284031215620007f3578081fd5b81356001600160a01b03811681146200080a578182fd5b9392505050565b60008151808452815b8181101562000838576020818501810151868301820152016200081a565b818111156200084a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03848116825283166020820152606060408201819052600090620008bb9083018462000811565b95945050505050565b901515815260200190565b6000602082526200080a602083018462000811565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600082198211156200098857634e487b7160e01b81526011600452602481fd5b50019056fe608060405234801561001057600080fd5b506040516107df3803806107df83398101604081905261002f91610153565b610038836100b2565b610041826100d4565b6000826001600160a01b03168260405161005b9190610219565b600060405180830381855af49150503d8060008114610096576040519150601f19603f3d011682016040523d82523d6000602084013e61009b565b606091505b50509050806100a957600080fd5b5050505061027b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03828116911614156100ef57600080fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b80516001600160a01b038116811461014e57600080fd5b919050565b600080600060608486031215610167578283fd5b61017084610137565b925061017e60208501610137565b60408501519092506001600160401b038082111561019a578283fd5b818601915086601f8301126101ad578283fd5b8151818111156101bf576101bf610265565b604051601f8201601f1916810160200183811182821017156101e3576101e3610265565b6040528181528382016020018910156101fa578485fd5b61020b826020830160208701610235565b809450505050509250925092565b6000825161022b818460208701610235565b9190910192915050565b60005b83811015610250578181015183820152602001610238565b8381111561025f576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6105558061028a6000396000f3fe6080604052600436106100745760003560e01c80634f1ef2861161004e5780634f1ef2861461012e5780635c60da1b146101415780636fde820214610156578063f1739cae1461016b5761007b565b8063025313a2146100bf5780633659cfe6146100ea5780634555d5c91461010c5761007b565b3661007b57005b600061008561018b565b90506001600160a01b03811661009a57600080fd5b60405136600082376000803683855af43d806000843e8180156100bb578184f35b8184fd5b3480156100cb57600080fd5b506100d461019a565b6040516100e191906104d2565b60405180910390f35b3480156100f657600080fd5b5061010a6101053660046103c4565b6101a9565b005b34801561011857600080fd5b506101216101e1565b6040516100e19190610500565b61010a61013c3660046103e5565b6101e6565b34801561014d57600080fd5b506100d461018b565b34801561016257600080fd5b506100d4610288565b34801561017757600080fd5b5061010a6101863660046103c4565b610297565b6000546001600160a01b031690565b60006101a4610288565b905090565b6101b161019a565b6001600160a01b03166101c261031f565b6001600160a01b0316146101d557600080fd5b6101de81610323565b50565b600290565b6101ee61019a565b6001600160a01b03166101ff61031f565b6001600160a01b03161461021257600080fd5b61021b826101a9565b6000306001600160a01b0316826040516102359190610499565b600060405180830381855af49150503d8060008114610270576040519150601f19603f3d011682016040523d82523d6000602084013e610275565b606091505b505090508061028357600080fd5b505050565b6001546001600160a01b031690565b61029f61019a565b6001600160a01b03166102b061031f565b6001600160a01b0316146102c357600080fd5b6001600160a01b0381166102d657600080fd5b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd96102ff61019a565b8260405161030e9291906104e6565b60405180910390a16101de81610386565b3390565b6000546001600160a01b038281169116141561033e57600080fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b03811681146103bf57600080fd5b919050565b6000602082840312156103d5578081fd5b6103de826103a8565b9392505050565b600080604083850312156103f7578081fd5b610400836103a8565b915060208084013567ffffffffffffffff8082111561041d578384fd5b818601915086601f830112610430578384fd5b81358181111561044257610442610509565b604051601f8201601f191681018501838111828210171561046557610465610509565b604052818152838201850189101561047b578586fd5b81858501868301378585838301015280955050505050509250929050565b60008251815b818110156104b9576020818601810151858301520161049f565b818111156104c75782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b90815260200190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122055cc98846d1d7c501818162c4c6a3a12fc8c5eb650c58bdfddb5798b354920b664736f6c63430008000033a2646970667358221220640026fb3130879680aac25f38e97afedf9469b0e6395cf39ff6e534b3021f5a64736f6c6343000800003360806040526001805460ff60a01b1916905534801561001d57600080fd5b506108ec8061002d6000396000f3fe60806040526004361061008a5760003560e01c80634f8632ba116100595780634f8632ba1461017957806363d256ce1461019b5780636fde8202146101b05780637b103999146101c55780638f4ffcb1146101da576100d9565b80631b0f7ba9146100e15780633f801f9114610117578063485cc955146101395780634c93505f14610159576100d9565b366100d9576100976101fa565b6001600160a01b03167fa419615bc8fda4c87663805ee2a3597a6d71c1d476911d9892f340d965bc7bf1346040516100cf9190610807565b60405180910390a2005b6100976101fa565b3480156100ed57600080fd5b506101016100fc3660046106a3565b6101fe565b60405161010e91906107fc565b60405180910390f35b34801561012357600080fd5b506101376101323660046106a3565b6103e2565b005b34801561014557600080fd5b5061013761015436600461066b565b6103fb565b34801561016557600080fd5b50610137610174366004610770565b610453565b34801561018557600080fd5b5061018e6104cc565b60405161010e91906107c4565b3480156101a757600080fd5b506101016104db565b3480156101bc57600080fd5b5061018e6104eb565b3480156101d157600080fd5b5061018e6104fa565b3480156101e657600080fd5b506101376101f5366004610706565b610509565b3390565b6002546000906001600160a01b03166102156101fa565b6001600160a01b031614806102bf5750600354600160a01b900460ff161580156102bf57506003546001600160a01b03166369dc9ff36102536101fa565b6040518263ffffffff1660e01b815260040161026f91906107c4565b60206040518083038186803b15801561028757600080fd5b505afa15801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bf919061078c565b6102c857600080fd5b60008360018111156102ea57634e487b7160e01b600052602160045260246000fd5b141561035557836001600160a01b03168260405161030891906107a8565b6000604051808303816000865af19150503d8060008114610345576040519150601f19603f3d011682016040523d82523d6000602084013e61034a565b606091505b5050809150506103db565b600183600181111561037757634e487b7160e01b600052602160045260246000fd5b14156103db57836001600160a01b03168260405161039591906107a8565b600060405180830381855af49150503d80600081146103d0576040519150601f19603f3d011682016040523d82523d6000602084013e6103d5565b606091505b50909150505b9392505050565b6103ed8383836101fe565b6103f657600080fd5b505050565b600154600160a01b900460ff161561041257600080fd5b6001805460ff60a01b1916600160a01b179055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b6002546001600160a01b03166104676101fa565b6001600160a01b03161461047a57600080fd5b6003805460ff60a01b1916600160a01b831515021790556040517f2165014523a6f4135deffed62d70149aad59b64de5aac51e3abbcbe2a83e2f7e906104c19083906107fc565b60405180910390a150565b6002546001600160a01b031681565b600354600160a01b900460ff1681565b6001546001600160a01b031690565b6003546001600160a01b031681565b6040516323b872dd60e01b815282906001600160a01b038216906323b872dd9061053b908890309089906004016107d8565b602060405180830381600087803b15801561055557600080fd5b505af1158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d919061078c565b61059657600080fd5b826001600160a01b0316856001600160a01b03167fd65b48fd35864b3528d38e44760be5553248f89bf3ff6b06cca57817cc2650bf86856040516105db929190610810565b60405180910390a35050505050565b600082601f8301126105fa578081fd5b813567ffffffffffffffff808211156106155761061561087a565b604051601f8301601f1916810160200182811182821017156106395761063961087a565b604052828152848301602001861015610650578384fd5b82602086016020830137918201602001929092529392505050565b6000806040838503121561067d578182fd5b823561068881610890565b9150602083013561069881610890565b809150509250929050565b6000806000606084860312156106b7578081fd5b83356106c281610890565b92506020840135600281106106d5578182fd5b9150604084013567ffffffffffffffff8111156106f0578182fd5b6106fc868287016105ea565b9150509250925092565b6000806000806080858703121561071b578081fd5b843561072681610890565b935060208501359250604085013561073d81610890565b9150606085013567ffffffffffffffff811115610758578182fd5b610764878288016105ea565b91505092959194509250565b600060208284031215610781578081fd5b81356103db816108a8565b60006020828403121561079d578081fd5b81516103db816108a8565b600082516107ba81846020870161084a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b90815260200190565b600083825260406020830152825180604084015261083581606085016020870161084a565b601f01601f1916919091016060019392505050565b60005b8381101561086557818101518382015260200161084d565b83811115610874576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108a557600080fd5b50565b80151581146108a557600080fdfea264697066735822122016fb621efbd8040feec15f961d6f4007c59a4e8891503845184b6b88edfa1f2764736f6c63430008000033","deployedBytecode":"0x60806040523480156200001157600080fd5b50600436106200010c5760003560e01c80638da5cb5b11620000a5578063ddd81f82116200006f578063ddd81f821462000214578063e71a02e1146200021e578063ef7f38341462000228578063f2fde38b146200023f576200010c565b80638da5cb5b14620001c357806397204d8e14620001dc578063c455279114620001e6578063d4e8e06314620001fd576200010c565b806353376d1f11620000e757806353376d1f14620001655780635eebea20146200017c57806369dc9ff314620001a2578063715018a614620001b9576200010c565b806306fdde0314620001115780631a86ac4f146200013357806338b6e407146200014c575b600080fd5b6200011b62000256565b6040516200012a9190620008cf565b60405180910390f35b6200013d6200028f565b6040516200012a9190620008c4565b620001636200015d366004620007e1565b62000298565b005b6200016362000176366004620007e1565b62000396565b620001936200018d366004620007e1565b620003fd565b6040516200012a91906200095f565b6200013d620001b3366004620007e1565b6200040f565b6200016362000424565b620001cd62000478565b6040516200012a91906200085f565b620001cd62000487565b620001cd620001f7366004620007e1565b62000496565b620001636200020e366004620007e1565b620004b1565b620001cd6200055d565b6200019362000670565b6200016362000239366004620007e1565b62000676565b6200016362000250366004620007e1565b62000702565b6040518060400160405280601e81526020017f466f7262697473776170204e4654532050726f7879205265676973747279000081525081565b60065460ff1681565b620002a26200077f565b6001600160a01b0316620002b562000478565b6001600160a01b031614620002e75760405162461bcd60e51b8152600401620002de906200092a565b60405180910390fd5b6001600160a01b03811660009081526004602052604090205460ff161580156200032857506001600160a01b03811660009081526003602052604090205415155b80156200035b57506005546001600160a01b0382166000908152600360205260409020544291620003599162000968565b105b6200036557600080fd5b6001600160a01b0316600090815260036020908152604080832083905560049091529020805460ff19166001179055565b620003a06200077f565b6001600160a01b0316620003b362000478565b6001600160a01b031614620003dc5760405162461bcd60e51b8152600401620002de906200092a565b6001600160a01b03166000908152600460205260409020805460ff19169055565b60036020526000908152604090205481565b60046020526000908152604090205460ff1681565b6200042e6200077f565b6001600160a01b03166200044162000478565b6001600160a01b0316146200046a5760405162461bcd60e51b8152600401620002de906200092a565b62000476600062000783565b565b6000546001600160a01b031690565b6001546001600160a01b031681565b6002602052600090815260409020546001600160a01b031681565b620004bb6200077f565b6001600160a01b0316620004ce62000478565b6001600160a01b031614620004f75760405162461bcd60e51b8152600401620002de906200092a565b6001600160a01b03811660009081526004602052604090205460ff161580156200053757506001600160a01b038116600090815260036020526040902054155b6200054157600080fd5b6001600160a01b03166000908152600360205260409020429055565b6000806002816200056d6200077f565b6001600160a01b03908116825260208201929092526040016000205416146200059557600080fd5b6200059f6200077f565b6001546001600160a01b0316620005b56200077f565b30604051602401620005c992919062000873565b60408051601f198184030181529181526020820180516001600160e01b031663485cc95560e01b17905251620005ff90620007d3565b6200060d939291906200088d565b604051809103906000f0801580156200062a573d6000803e3d6000fd5b50905080600260006200063c6200077f565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905590565b60055481565b620006806200077f565b6001600160a01b03166200069362000478565b6001600160a01b031614620006bc5760405162461bcd60e51b8152600401620002de906200092a565b60065460ff1615620006cd57600080fd5b6006805460ff1990811660019081179092556001600160a01b0390921660009081526004602052604090208054909216179055565b6200070c6200077f565b6001600160a01b03166200071f62000478565b6001600160a01b031614620007485760405162461bcd60e51b8152600401620002de906200092a565b6001600160a01b038116620007715760405162461bcd60e51b8152600401620002de90620008e4565b6200077c8162000783565b50565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107df806200098e83390190565b600060208284031215620007f3578081fd5b81356001600160a01b03811681146200080a578182fd5b9392505050565b60008151808452815b8181101562000838576020818501810151868301820152016200081a565b818111156200084a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03848116825283166020820152606060408201819052600090620008bb9083018462000811565b95945050505050565b901515815260200190565b6000602082526200080a602083018462000811565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600082198211156200098857634e487b7160e01b81526011600452602481fd5b50019056fe608060405234801561001057600080fd5b506040516107df3803806107df83398101604081905261002f91610153565b610038836100b2565b610041826100d4565b6000826001600160a01b03168260405161005b9190610219565b600060405180830381855af49150503d8060008114610096576040519150601f19603f3d011682016040523d82523d6000602084013e61009b565b606091505b50509050806100a957600080fd5b5050505061027b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03828116911614156100ef57600080fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b80516001600160a01b038116811461014e57600080fd5b919050565b600080600060608486031215610167578283fd5b61017084610137565b925061017e60208501610137565b60408501519092506001600160401b038082111561019a578283fd5b818601915086601f8301126101ad578283fd5b8151818111156101bf576101bf610265565b604051601f8201601f1916810160200183811182821017156101e3576101e3610265565b6040528181528382016020018910156101fa578485fd5b61020b826020830160208701610235565b809450505050509250925092565b6000825161022b818460208701610235565b9190910192915050565b60005b83811015610250578181015183820152602001610238565b8381111561025f576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6105558061028a6000396000f3fe6080604052600436106100745760003560e01c80634f1ef2861161004e5780634f1ef2861461012e5780635c60da1b146101415780636fde820214610156578063f1739cae1461016b5761007b565b8063025313a2146100bf5780633659cfe6146100ea5780634555d5c91461010c5761007b565b3661007b57005b600061008561018b565b90506001600160a01b03811661009a57600080fd5b60405136600082376000803683855af43d806000843e8180156100bb578184f35b8184fd5b3480156100cb57600080fd5b506100d461019a565b6040516100e191906104d2565b60405180910390f35b3480156100f657600080fd5b5061010a6101053660046103c4565b6101a9565b005b34801561011857600080fd5b506101216101e1565b6040516100e19190610500565b61010a61013c3660046103e5565b6101e6565b34801561014d57600080fd5b506100d461018b565b34801561016257600080fd5b506100d4610288565b34801561017757600080fd5b5061010a6101863660046103c4565b610297565b6000546001600160a01b031690565b60006101a4610288565b905090565b6101b161019a565b6001600160a01b03166101c261031f565b6001600160a01b0316146101d557600080fd5b6101de81610323565b50565b600290565b6101ee61019a565b6001600160a01b03166101ff61031f565b6001600160a01b03161461021257600080fd5b61021b826101a9565b6000306001600160a01b0316826040516102359190610499565b600060405180830381855af49150503d8060008114610270576040519150601f19603f3d011682016040523d82523d6000602084013e610275565b606091505b505090508061028357600080fd5b505050565b6001546001600160a01b031690565b61029f61019a565b6001600160a01b03166102b061031f565b6001600160a01b0316146102c357600080fd5b6001600160a01b0381166102d657600080fd5b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd96102ff61019a565b8260405161030e9291906104e6565b60405180910390a16101de81610386565b3390565b6000546001600160a01b038281169116141561033e57600080fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b03811681146103bf57600080fd5b919050565b6000602082840312156103d5578081fd5b6103de826103a8565b9392505050565b600080604083850312156103f7578081fd5b610400836103a8565b915060208084013567ffffffffffffffff8082111561041d578384fd5b818601915086601f830112610430578384fd5b81358181111561044257610442610509565b604051601f8201601f191681018501838111828210171561046557610465610509565b604052818152838201850189101561047b578586fd5b81858501868301378585838301015280955050505050509250929050565b60008251815b818110156104b9576020818601810151858301520161049f565b818111156104c75782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b90815260200190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122055cc98846d1d7c501818162c4c6a3a12fc8c5eb650c58bdfddb5798b354920b664736f6c63430008000033a2646970667358221220640026fb3130879680aac25f38e97afedf9469b0e6395cf39ff6e534b3021f5a64736f6c63430008000033","libraries":{},"devdoc":{"kind":"dev","methods":{"endGrantAuthentication(address)":{"details":"ProxyRegistry owner only","params":{"addr":"Address to which to grant permissions"}},"grantInitialAuthentication(address)":{"details":"No delay, can only be called once - after that the standard registry process with a delay must be used","params":{"authAddress":"Address of the contract to grant authentication"}},"owner()":{"details":"Returns the address of the current owner."},"registerProxy()":{"details":"Must be called by the user which the proxy is for, creates a new AuthenticatedProxy","returns":{"proxy":"New AuthenticatedProxy contract"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"revokeAuthentication(address)":{"details":"ProxyRegistry owner only","params":{"addr":"Address of which to revoke permissions"}},"startGrantAuthentication(address)":{"details":"ProxyRegistry owner only","params":{"addr":"Address to which to grant permissions"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{"endGrantAuthentication(address)":{"notice":"End the process to enable access for specified contract after delay period has passed."},"grantInitialAuthentication(address)":{"notice":"Grant authentication to the initial Exchange protocol contract"},"registerProxy()":{"notice":"Register a proxy contract with this registry"},"revokeAuthentication(address)":{"notice":"Revoke access for specified contract. Can be done instantly."},"startGrantAuthentication(address)":{"notice":"Start the process to enable access for specified contract. Subject to delay period."}},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/market/ForbitswapNFTSProxyRegistry.sol:ForbitswapNFTSProxyRegistry","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":6828,"contract":"contracts/market/ForbitswapNFTSProxyRegistry.sol:ForbitswapNFTSProxyRegistry","label":"delegateProxyImplementation","offset":0,"slot":"1","type":"t_address"},{"astId":6833,"contract":"contracts/market/ForbitswapNFTSProxyRegistry.sol:ForbitswapNFTSProxyRegistry","label":"proxies","offset":0,"slot":"2","type":"t_mapping(t_address,t_contract(OwnableDelegateProxy)6598)"},{"astId":6837,"contract":"contracts/market/ForbitswapNFTSProxyRegistry.sol:ForbitswapNFTSProxyRegistry","label":"pending","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":6841,"contract":"contracts/market/ForbitswapNFTSProxyRegistry.sol:ForbitswapNFTSProxyRegistry","label":"contracts","offset":0,"slot":"4","type":"t_mapping(t_address,t_bool)"},{"astId":6844,"contract":"contracts/market/ForbitswapNFTSProxyRegistry.sol:ForbitswapNFTSProxyRegistry","label":"DELAY_PERIOD","offset":0,"slot":"5","type":"t_uint256"},{"astId":3114,"contract":"contracts/market/ForbitswapNFTSProxyRegistry.sol:ForbitswapNFTSProxyRegistry","label":"initialAddressSet","offset":0,"slot":"6","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(OwnableDelegateProxy)6598":{"encoding":"inplace","label":"contract OwnableDelegateProxy","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_contract(OwnableDelegateProxy)6598)":{"encoding":"mapping","key":"t_address","label":"mapping(address => contract OwnableDelegateProxy)","numberOfBytes":"32","value":"t_contract(OwnableDelegateProxy)6598"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},2623:function(e,n,t){"use strict";t.r(n);var a=t(8),r=t(21),i=t(0),s=t(1794),d=t(1787),b=t(165),o=t(1762),c=t(1824),u=t(1761),f=t(2);function l(e){var n=Object(b.a)(),t="light"===n.palette.mode;return Object(f.jsxs)(o.a,{direction:"row",alignItems:"center",spacing:1,sx:{p:1,borderBottom:"1px solid",borderColor:t?n.palette.grey[300]:n.palette.grey[700],borderRadius:"15px",backgroundColor:t?n.palette.primaryLight.lighter:"unset"},children:[Object(f.jsx)(c.a,{variant:"circular",width:50,height:50,sx:{flexShrink:0}}),Object(f.jsxs)(u.a,{children:[Object(f.jsx)(c.a,{sx:{width:"250px"}}),Object(f.jsx)(c.a,{sx:{width:"150px"}})]})]})}function p(e){var n=e.amount;return Object(f.jsx)(f.Fragment,{children:new Array(n||3).fill(null).map((function(e,n){return Object(f.jsx)(u.a,{sx:{mb:1},children:Object(f.jsx)(l,{})},n)}))})}var m=t(35),y=t(1),h=t.n(y),g=t(1776),_=t(1808),v=t(164),w=t(1831),T=t(2566),x=t(1775),O=t(2629),k=t(2647),R=t(2625),S=t(2648),I=t(1844),A=t(444),C=t(450),E=t(48),j=t(68),M=t(2276),P=t(126),F=t(63),N=t(282),D=t(128),B=Object(P.a)(),q=B.validateOrderSignature,U=B.validateOrderParameters,L=B.checkOrderCanMatch;var z=function(){var e=Object(m.a)(h.a.mark((function e(n){var t,a,r,i,s,d,b,o,c,u,f,l,p,m,y,g,_,v;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.chainId,a=n.userAddress,r=n.orderBuy,i=n.orderSell,s=n.web3,d=n.itemTokenId,b=n.itemStandard,o=[F.b[t].EXCHANGE,r.maker,r.taker,r.feeRecipient,r.target,r.staticTarget,r.paymentToken,F.b[t].EXCHANGE,i.maker,i.taker,i.feeRecipient,i.target,i.staticTarget,i.paymentToken],c=[r.makerRelayerFee,r.takerRelayerFee,r.makerProtocolFee,r.takerProtocolFee,r.basePrice,r.extra,r.listingTime,r.expirationTime,r.salt,i.makerRelayerFee,i.takerRelayerFee,i.makerProtocolFee,i.takerProtocolFee,i.basePrice,i.extra,i.listingTime,i.expirationTime,i.salt].map(String),u=[r.feeMethod,r.side,r.saleKind,F.f.CALL,i.feeMethod,i.side,i.saleKind,F.f.CALL].map(String),f=null,f=b.includes("1155")?Object(P.h)(s,"safeTransferFrom(address,address,uint256,uint256,bytes)",["address","address","uint256","uint256","bytes"],[a,"0x0000000000000000000000000000000000000000",d,1,s.utils.asciiToHex("")]):Object(P.h)(s,"safeTransferFrom(address,address,uint256,bytes)",["address","address","uint256","bytes"],[a,"0x0000000000000000000000000000000000000000",d,s.utils.asciiToHex("")])+"0".repeat(64),l=r.callData,p=r.replacementPattern,m=i.replacementPattern,y=i.staticExtraData,g=i.staticExtraData,_=[r.v,r.v],v=["0x"+r.r,"0x"+r.s,"0x"+r.r,"0x"+r.s,"0x0000000000000000000000000000000000000000000000000000000000000000"],e.abrupt("return",{addrs:o,uints:c,feeMethodsSidesKindsHowToCalls:u,callDataBuy:l,callDataSell:f,replacementPatternBuy:p,replacementPatternSell:m,staticExtradataBuy:y,staticExtradataSell:g,v:_,rsMetadata:v});case 14:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),H=t(79),X=t(74),Y=t(446),G=t(1882),W=function(){var e=function(){var e=Object(m.a)(h.a.mark((function e(n,t){var a,r,i,s,d;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=n.userAddress,r=n.chainId,i=n.orderBuy,e.prev=1,s=j.a.from(i.takerRelayerFee).mul(i.basePrice).div(1e4),e.next=5,Object(P.i)().getMissingAllowanceAmount(i.paymentToken,a,F.b[r].TOKEN_TRANSFER_PROXY,s);case 5:if(d=e.sent,!j.a.from(String(d)).gt(j.a.from(0))){e.next=13;break}if(!t){e.next=11;break}return e.abrupt("return",!1);case 11:return e.next=13,Object(P.i)().approve(i.paymentToken,d,a,F.b[r].TOKEN_TRANSFER_PROXY);case 13:return e.abrupt("return",!0);case 16:return e.prev=16,e.t0=e.catch(1),t?v.b.error("Some error occur when checking royalties fee approved!"):v.b.error("Some error occur when approving royalties fee!"),console.log(e.t0),e.abrupt("return",!1);case 21:case"end":return e.stop()}}),e,null,[[1,16]])})));return function(n,t){return e.apply(this,arguments)}}(),n=function(){var e=Object(m.a)(h.a.mark((function e(n){var t,r,i,s,d,b,o,c,u,f,l,p,m,y;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.orderBuy,r=n.userAddress,i=n.chainId,s=n.web3,d=n.itemTokenId,b=n.itemStandard,o=n.collectionId,e.prev=1,u=Object(a.a)(Object(a.a)({},t),{},{maker:r,taker:t.maker,side:F.f.SELL_SIDE,feeRecipient:"0x0000000000000000000000000000000000000000",replacementPattern:F.f.SELL_REPLACEMENT_PATTERN,salt:String(j.a.from(Object(M.a)(32)))}),f=Object(D.a)(N.abi,F.b[i].EXCHANGE),e.next=6,z({chainId:i,userAddress:r,orderBuy:t,orderSell:u,web3:s,itemTokenId:d,itemStandard:b});case 6:return l=e.sent,console.log("atomic",l),e.next=10,q(t,i);case 10:return e.next=12,U(u,i);case 12:return e.next=14,L(t,u,i,s,!0,r,d,b);case 14:return p=Object.values(l),console.log("params",p),m={},e.next=19,(c=f.methods).atomicMatch_.apply(c,Object(E.a)(p)).send({from:r,value:0}).then((function(e){console.log("receipt for atomicMatch",e),m=e}));case 19:return y=m.transactionHash,e.next=22,_.a.acceptOrder({order:t,collectionId:o,chainId:i,transactionHash:y,type:F.g.ACCEPT_OFFER,finalPrice:u.basePrice,userAddress:r});case 22:return e.abrupt("return",!0);case 25:return e.prev=25,e.t0=e.catch(1),v.b.error("Some error occur when atomic match!"),console.log(e.t0),e.abrupt("return",!1);case 30:case"end":return e.stop()}}),e,null,[[1,25]])})));return function(n){return e.apply(this,arguments)}}();return{ApproveRoyaltiesFee:e,ExecuteAtomicMatch:n}}(),V=W.ApproveRoyaltiesFee,K=W.ExecuteAtomicMatch,J={isChecking:!1,isExecuting:!1,isCompleted:!1};function Z(e){var n,t,s,d=e.orderBuy,b=Object(i.useState)(!1),c=Object(r.a)(b,2),l=c[0],p=c[1],y=Object(i.useState)(J),_=Object(r.a)(y,2),E=_[0],j=_[1],M=Object(i.useState)(J),F=Object(r.a)(M,2),N=F[0],D=F[1],B=Object(i.useState)(J),q=Object(r.a)(B,2),U=q[0],L=q[1],z=Object(i.useState)(0),W=Object(r.a)(z,2),Z=W[0],Q=W[1],$=Object(i.useState)(!1),ee=Object(r.a)($,2),ne=ee[0],te=ee[1],ae=Object(i.useState)(!1),re=Object(r.a)(ae,2),ie=re[0],se=re[1],de=Object(H.c)(Y.e),be=Object(H.c)(X.e),oe=Object(H.c)(Y.d),ce=Object(H.c)(X.c),ue=Object(H.c)(X.f);Object(i.useEffect)((function(){l?(le(!0),pe(!0)):(Q(0),j(Object(a.a)(Object(a.a)({},E),{},{isCompleted:!1})),D(Object(a.a)(Object(a.a)({},N),{},{isCompleted:!1})))}),[l]),Object(i.useEffect)((function(){E.isCompleted&&(Q(1),N.isCompleted&&(Q(2),U.isCompleted&&Q(3)))}),[E,N,U]),Object(i.useEffect)((function(){Object(P.e)(new Date,Object(P.F)(parseInt(d.expirationTime)))>0&&se(!0)}),[]);var fe=function(){var e=Object(m.a)(h.a.mark((function e(){return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!(Object(P.e)(new Date,Object(P.F)(parseInt(d.expirationTime)))>0)){e.next=4;break}return se(!0),e.abrupt("return");case 4:p(!0),e.next=11;break;case 7:e.prev=7,e.t0=e.catch(0),v.b.error("Some error occur when getting offer order!"),console.log(e.t0);case 11:case"end":return e.stop()}}),e,null,[[0,7]])})));return function(){return e.apply(this,arguments)}}(),le=function(){var e=Object(m.a)(h.a.mark((function e(n){var t,r;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(be&&de&&de.collection&&ce){e.next=3;break}return console.log("Missing Field Step 1!"),e.abrupt("return");case 3:return j(n?Object(a.a)(Object(a.a)({},E),{},{isChecking:!0}):Object(a.a)(Object(a.a)({},E),{},{isExecuting:!0})),t={chainId:be,userAddress:ce,collectionAddress:de.collection.collectionAddress,itemStandard:de.standard},e.next=7,Object(G.a)(t,n);case 7:r=e.sent,j(n?Object(a.a)(Object(a.a)({},E),{},{isChecking:!1}):Object(a.a)(Object(a.a)({},E),{},{isExecuting:!1})),j(r?Object(a.a)(Object(a.a)({},E),{},{isCompleted:!0}):Object(a.a)(Object(a.a)({},E),{},{isCompleted:!1}));case 10:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),pe=function(){var e=Object(m.a)(h.a.mark((function e(n){var t,r;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ce&&be){e.next=3;break}return console.log("Missing Field Step 2!"),e.abrupt("return");case 3:return D(n?Object(a.a)(Object(a.a)({},N),{},{isChecking:!0}):Object(a.a)(Object(a.a)({},N),{},{isExecuting:!0})),t={userAddress:ce,chainId:be,orderBuy:d},e.next=7,V(t,n);case 7:r=e.sent,D(n?Object(a.a)(Object(a.a)({},N),{},{isChecking:!1}):Object(a.a)(Object(a.a)({},N),{},{isExecuting:!1})),D(r?Object(a.a)(Object(a.a)({},N),{},{isCompleted:!0}):Object(a.a)(Object(a.a)({},N),{},{isCompleted:!1}));case 10:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),me=function(){var e=Object(m.a)(h.a.mark((function e(){var n,t;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(be&&ce&&de){e.next=3;break}return console.log("Missing Field Step 3"),e.abrupt("return");case 3:return L(Object(a.a)(Object(a.a)({},U),{},{isExecuting:!0})),n={orderBuy:d,userAddress:ce,chainId:be,web3:ue,itemTokenId:de.itemTokenId,itemStandard:de.standard,collectionId:de.collectionId},e.next=7,K(n);case 7:t=e.sent,L(Object(a.a)(Object(a.a)({},U),{},{isExecuting:!1})),L(t?Object(a.a)(Object(a.a)({},U),{},{isCompleted:!0}):Object(a.a)(Object(a.a)({},U),{},{isCompleted:!1}));case 10:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return Object(f.jsxs)(f.Fragment,{children:[!(oe||!de||ce!==de.owner)&&Object(f.jsx)(A.a,{disabled:ie,onClick:function(){return fe()},children:Object(f.jsx)(g.a,{variant:"body1",children:ie?"Expired":"Accept"})}),de&&Object(f.jsx)(C.a,{onOpen:l,onClose:function(){p(!1)},allowClose:!E.isExecuting&&!N.isExecuting&&!U.isExecuting&&!U.isCompleted,mainHeader:"Accepting offer",style:{maxWidth:"450px",overflowY:"auto"},children:Object(f.jsxs)(u.a,{sx:{p:"0 2rem 2rem 2rem"},children:[Object(f.jsxs)(o.a,{direction:"row",alignItems:"center",sx:{border:"1px solid",borderRadius:"10px",overflow:"hidden",marginTop:"20px"},children:[Object(f.jsx)(w.a,{sx:{width:"60px",height:"60px",background:"#0768ff",borderRight:"1px solid"},src:de.itemMedia,variant:"square",alt:"item"}),Object(f.jsxs)(u.a,{sx:{paddingLeft:"10px"},children:[Object(f.jsxs)(g.a,{variant:"body2",children:["Created by ",Object(P.D)(de.creator,5,4)]}),Object(f.jsx)(g.a,{variant:"body2",children:de.itemName})]})]}),Object(f.jsxs)(o.a,{direction:"row",justifyContent:"space-between",sx:{mt:1},children:[Object(f.jsx)(g.a,{variant:"body2",children:"Offer price:"}),Object(f.jsxs)(g.a,{variant:"body2",children:[d.salePrice," ",null===(n=d.symbolToken)||void 0===n?void 0:n.toUpperCase()]})]}),Object(f.jsxs)(o.a,{direction:"row",justifyContent:"space-between",children:[Object(f.jsxs)(g.a,{variant:"body2",children:["Royalties fee ( ",Number(d.takerRelayerFee)/100,"% ):"]}),Object(f.jsxs)(g.a,{variant:"body2",children:[Number(d.salePrice)*Number(d.takerRelayerFee)/1e4," ",null===(t=d.symbolToken)||void 0===t?void 0:t.toUpperCase()]})]}),Object(f.jsxs)(o.a,{direction:"row",alignItems:"center",sx:{marginLeft:"-10px",marginTop:"50px"},children:[Object(f.jsx)(T.a,{checked:ne,"aria-checked":"false",onChange:function(e){te(e.target.checked)}}),Object(f.jsx)(g.a,{variant:"body2",component:"span",children:"I agree to forbitswap"}),Object(f.jsx)(x.a,{variant:"body2",sx:{ml:.5,color:"#27FF00",cursor:"pointer","&:hover":{textDecoration:"underline !important"}},href:"https://forbitswap.com/terms-of-service.pdf",target:"_blank",children:"Terms of Service"})]}),Object(f.jsx)(u.a,{height:"1px",sx:{borderBottom:"1px solid"}}),Object(f.jsxs)(o.a,{direction:"row",justifyContent:"space-between",sx:{mt:1},children:[Object(f.jsx)(g.a,{variant:"body2",children:"Total Earnings:"}),Object(f.jsxs)(g.a,{variant:"body2",children:[Number(d.salePrice)-Number(d.salePrice)*Number(d.takerRelayerFee)/1e4," ",null===(s=d.symbolToken)||void 0===s?void 0:s.toUpperCase()]})]}),ne&&Object(f.jsxs)(O.a,{activeStep:Z,orientation:"vertical",sx:{mb:2},children:[Object(f.jsxs)(k.a,{children:[Object(f.jsx)(R.a,{optional:Object(f.jsx)(g.a,{variant:"caption",children:"One-time fees"}),children:"Initialize your wallet"}),Object(f.jsxs)(S.a,{children:[Object(f.jsx)(g.a,{children:"To get set up for selling on NFTSpaceX for the first time, you must initialize your wallet, which requires a one-time gas fee."}),Object(f.jsx)(u.a,{sx:{mb:2},children:Object(f.jsxs)(A.a,{onClick:function(){le(!1)},disabled:E.isChecking||E.isExecuting,sx:{width:"180px"},children:[(E.isChecking||E.isExecuting)&&Object(f.jsx)(I.a,{sx:{color:"white",mr:1},size:16}),Object(f.jsx)(g.a,{variant:"button",children:E.isChecking?"Checking...":E.isExecuting?"Executing...":"Initialize"})]})})]})]}),Object(f.jsxs)(k.a,{children:[Object(f.jsx)(R.a,{optional:Object(f.jsx)(g.a,{variant:"caption",children:"Recurring fees"}),children:"Approve token"}),Object(f.jsxs)(S.a,{children:[Object(f.jsx)(g.a,{children:"Recurring fees are incurred whenever doing actions on blockchain."}),Object(f.jsx)(u.a,{sx:{mb:2},children:Object(f.jsxs)(A.a,{onClick:function(){pe(!1)},disabled:N.isChecking||N.isExecuting,sx:{width:"180px",mt:1},children:[(N.isChecking||N.isExecuting)&&Object(f.jsx)(I.a,{sx:{color:"white",mr:1},size:16}),Object(f.jsx)(g.a,{variant:"button",children:N.isChecking?"Checking...":N.isExecuting?"Executing...":"Approve"})]})})]})]}),Object(f.jsxs)(k.a,{children:[Object(f.jsx)(R.a,{optional:Object(f.jsx)(g.a,{variant:"caption",children:"Recurring fees"}),children:"Completing Accept Offer"}),Object(f.jsxs)(S.a,{children:[Object(f.jsx)(g.a,{children:"Complete accept offer automatic with contract."}),Object(f.jsx)(u.a,{sx:{mb:2},children:Object(f.jsxs)(A.a,{onClick:function(){me()},disabled:U.isChecking||U.isExecuting,sx:{width:"180px",mt:1},children:[(U.isChecking||U.isExecuting)&&Object(f.jsx)(I.a,{sx:{color:"white",mr:1},size:16}),Object(f.jsx)(g.a,{variant:"button",children:U.isChecking?"Checking...":U.isExecuting?"Executing...":"Confirm"})]})})]})]}),Object(f.jsxs)(k.a,{children:[Object(f.jsx)(R.a,{optional:null,children:"Accept Offer Successfully"}),Object(f.jsxs)(S.a,{children:[Object(f.jsx)(g.a,{children:"Your item is sold!"}),Object(f.jsx)(u.a,{sx:{mb:2},children:Object(f.jsx)(A.a,{onClick:function(){window.location.reload()},sx:{width:"180px",mt:1},children:Object(f.jsx)(g.a,{variant:"button",children:"Done"})})})]})]})]})]})})]})}var Q=t(1791),$=t(33),ee=Object($.a)(u.a)((function(e){var n=e.theme;return{position:"relative",display:"flex",alignItems:"center",padding:"12px",borderRadius:"12px",borderBottom:"1px solid",cursor:"pointer",":hover":Object(a.a)(Object(a.a)({},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.dark}:{backgroundColor:n.palette.primary.main}),{},{".ButtonDisplay":{display:"block"}})}})),ne=Object($.a)(u.a)((function(e){e.theme;return{position:"absolute",top:"50%",right:10,transform:"translateY(-50%)",width:"100px",display:"none"}}));function te(e){var n,t,a=e.orderId,s=Object(i.useState)(!1),d=Object(r.a)(s,2),b=d[0],o=d[1],c=Object(i.useState)(null),p=Object(r.a)(c,2),y=p[0],v=p[1];return Object(i.useEffect)((function(){var e=!0;return Object(m.a)(h.a.mark((function n(){var t,r;return h.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return o(!0),n.prev=1,n.next=4,_.a.getOrderDetail(a);case 4:t=n.sent,r=t.data,e&&v(r),n.next=12;break;case 9:n.prev=9,n.t0=n.catch(1),console.log(n.t0);case 12:return n.prev=12,e&&o(!1),n.finish(12);case 15:case"end":return n.stop()}}),n,null,[[1,9,12,15]])})))(),function(){return e=!1}}),[]),b?Object(f.jsx)(l,{}):y?Object(f.jsxs)(ee,{children:[Object(f.jsx)(Q.c,{sx:{background:"".concat(Object(P.r)(y.maker)),width:"50px",height:"50px",mr:2,flexShrink:0}}),Object(f.jsxs)(u.a,{children:[Object(f.jsxs)(g.a,{variant:"h6",sx:{fontWeight:"600"},children:[y.salePrice," ",null===(n=y.symbolToken)||void 0===n?void 0:n.toUpperCase()," (",Object(P.l)(null!==(t=y.usdPrice)&&void 0!==t?t:0,2),"$)"," ",Object(f.jsx)("span",{style:{fontWeight:100},children:"by"})," ",y.maker.substring(0,10)," ..."," ",y.maker.substring(37,y.maker.length+1)," "]}),Object(f.jsx)(g.a,{variant:"body2",children:Object(P.p)(Number(y.listingTime),"MMMM Do, YYYY, h:mm A").toString()})]}),Object(f.jsx)(ne,{className:"ButtonDisplay",children:Object(f.jsx)(Z,{orderBuy:y})})]}):Object(f.jsx)(f.Fragment,{})}var ae=t(449),re=t(456),ie=t(2561),se=t.n(ie),de=t(19),be=Object($.a)(u.a)((function(e){var n=e.theme;return Object(a.a)({display:"flex",justifyContent:"center",alignItems:"center",padding:"12px",borderRadius:"10px",cursor:"pointer"},"light"===n.palette.mode?{backgroundColor:n.palette.primaryLight.main}:{backgroundColor:n.palette.primary.dark})})),oe=Object($.a)((function(e){var n=Object.assign({},e);return Object(f.jsx)(u.a,Object(a.a)({},n))}))((function(e){var n,t=e.theme;return n={maxHeight:e.listheight,overflow:"auto"},Object(de.a)(n,t.breakpoints.down("lg"),{maxHeight:450}),Object(de.a)(n,"&::-webkit-scrollbar",{display:"block",width:"3px",height:"4px"}),Object(de.a)(n,"&::-webkit-scrollbar-track",{display:"block",background:"#0c5599"}),Object(de.a)(n,"&::-webkit-scrollbar-thumb",{display:"block",background:"#65b8ff",borderRadius:"5px"}),Object(de.a)(n,"tr",{":nth-of-type(even)":{background:"#072d54"}}),n})),ce=t(1793);n.default=function(e){var n=Object(H.b)(),t=Object(i.useRef)(null),b=Object(i.useRef)(null),c=Object(i.useState)(500),l=Object(r.a)(c,2),m=l[0],y=l[1],h=Object(i.useState)(0),g=Object(r.a)(h,2),_=g[0],v=g[1],w=Object(H.c)(re.e),T=Object(H.c)(re.f),x=Object(H.c)(re.d);return Object(H.c)(ae.d),Object(i.useEffect)((function(){function e(){var e,n=null===(e=b.current)||void 0===e?void 0:e.offsetWidth;y(n-120)}return window.addEventListener("resize",e,{passive:!0}),e(),function(){window.removeEventListener("resize",e)}}),[]),Object(i.useEffect)((function(){n(Object(re.g)(Object(a.a)(Object(a.a)({},x),{},{asc:_})))}),[n,_]),Object(f.jsxs)(u.a,{sx:{width:"100%",height:"100%"},ref:b,children:[Object(f.jsxs)(o.a,{direction:"row",alignItems:"center",justifyContent:"space-between",spacing:2,children:[Object(f.jsx)(u.a,{sx:{flexGrow:1},children:Object(f.jsx)(d.default,{type:"text",onChange:function(e){var r=e.target.value;t&&clearTimeout(t.current),t.current=setTimeout((function(){n(Object(re.g)(Object(a.a)(Object(a.a)({},x),{},{maker:r})))}),500)},placeholder:"Search by address ..."})}),Object(f.jsx)(be,{onClick:function(){v(_?0:1)},children:Object(f.jsx)(se.a,{sx:{mx:1,transform:_?"unset":"rotate(180deg)",transition:"all 0.4s"}})})]}),Object(f.jsx)(u.a,{sx:{marginTop:"1rem",paddingBottom:"1rem"},children:T?Object(f.jsx)(p,{}):Object(f.jsx)(oe,{listheight:m,children:w&&w.length>0?w.map((function(e,n){return Object(f.jsx)(u.a,{sx:{mb:1},children:Object(f.jsx)(te,{orderId:e._id})},n)})):Object(f.jsx)(u.a,{sx:{mt:2,p:1},children:Object(f.jsx)(s.default,{title:"No offer yet!",image:ce.a})})})})]})}}}]);
//# sourceMappingURL=36.cd796ee1.chunk.js.map