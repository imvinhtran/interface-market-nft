{"version":3,"sources":["apis/collectionApi.ts","redux/actions/collectionAction.ts"],"names":["collectionApi","getListTopCollection","data","filter","pageSize","page","url","axiosClient","post","fetchNewCollectionsPagination","sort","getListCollectionId","pagination","body","getSearchListCollectionId","getListCollectionByOwnerOrCreatorItems","getCollectionById","collectionId","get","getCollectionDetailById","getSearchCollectionById","createCollection","console","log","axiosAuthen","importCollection","chainId","userAddress","collectionAddress","editCollection","put","checkExistCollectionName","collectionName","getAllCategory","getListCollectionCategory","fetchAllCollection","isFetchFirstLoad","MyCallBack","a","dispatch","startLoading","response","paginationResponse","check","checkHasNextPage","currentPage","totalPages","setHasNextPage","fetchAllCollectionFirstLoadSuccess","fetchAllCollectionSuccess","hasError","getState","fetchListCollectionsByOwnerOrCreatorItems","fetchListCollectionsByOwnerOrCreatorItemsFirstLoadSuccess","fetchListCollectionsByOwnerOrCreatorItemsSuccess","fetchCollectionById","fetchCollectionByIdSuccess","fetchCollectionDetailById"],"mappings":"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","file":"static/js/73.7960799d.chunk.js","sourcesContent":["import {\n\tCollection,\n\tListParams,\n\tListResponse,\n\tCreateCollectionInput,\n\tCollectionCategory,\n} from 'models';\nimport axiosAuthen from './axiosAuthen';\nimport axiosClient from './axiosClient';\n\nconst collectionApi = {\n\tgetListTopCollection(data: ListParams, filter: ListParams): Promise<ListResponse<Collection>> {\n\t\tconst { pageSize, page } = data;\n\t\tconst url = `/collections/top/pageSize/${pageSize}/page/${page}`;\n\t\treturn axiosClient.post(url, { ...filter });\n\t},\n\n\tfetchNewCollectionsPagination(\n\t\tpageSize: number,\n\t\tpage: number\n\t): Promise<ListResponse<Collection>> {\n\t\tconst url = `/collections/query/pageSize/${pageSize}/page/${page}`;\n\n\t\treturn axiosClient.post(url, { sort: 'createdAt:desc' });\n\t},\n\n\tgetListCollectionId(pagination: ListParams, filter: ListParams): Promise<any> {\n\t\tconst { page, pageSize } = pagination;\n\t\tconst url = `/collections/query/pageSize/${pageSize}/page/${page}`;\n\n\t\tconst body = { ...filter };\n\t\treturn axiosClient.post(url, body);\n\t},\n\n\tgetSearchListCollectionId(pagination: ListParams, filter: ListParams): Promise<any> {\n\t\tconst { page, pageSize } = pagination;\n\t\tconst url = `/collections/query-search/pageSize/${pageSize}/page/${page}`;\n\n\t\tconst body = { ...filter };\n\t\treturn axiosClient.post(url, body);\n\t},\n\n\tgetListCollectionByOwnerOrCreatorItems(\n\t\tpagination: ListParams,\n\t\tfilter: ListParams\n\t): Promise<any> {\n\t\tconst { page, pageSize } = pagination;\n\t\tconst url = `/collections/collectible-asset/pageSize/${pageSize}/page/${page}`;\n\n\t\tconst body = { ...filter };\n\t\treturn axiosClient.post(url, body);\n\t},\n\n\tgetCollectionById(collectionId: string): Promise<any> {\n\t\tconst url = `/collections/collectionId/${collectionId}`;\n\t\treturn axiosClient.get(url);\n\t},\n\n\tgetCollectionDetailById(collectionId: string): Promise<any> {\n\t\tconst url = `/collections/detail/collectionId/${collectionId}`;\n\t\treturn axiosClient.get(url);\n\t},\n\n\tgetSearchCollectionById(collectionId: string): Promise<any> {\n\t\tconst url = `/collections/search/collectionId/${collectionId}`;\n\t\treturn axiosClient.get(url);\n\t},\n\n\tcreateCollection(data: CreateCollectionInput): Promise<any> {\n\t\tconst url = `/collections/create`;\n\t\tconsole.log('data gui len ne', data);\n\n\t\treturn axiosAuthen.post(url, data);\n\t},\n\n\timportCollection(\n\t\tchainId: number,\n\t\tuserAddress: string,\n\t\tcollectionAddress: string\n\t): Promise<any> {\n\t\tconst url = `/items/import`;\n\t\tconst data = { chainId, userAddress, collectionAddress };\n\n\t\treturn axiosAuthen.post(url, data);\n\t},\n\n\teditCollection(data: CreateCollectionInput, collectionId: string): Promise<any> {\n\t\tconst url = `/collections/collectionId/${collectionId}`;\n\t\treturn axiosAuthen.put(url, data);\n\t},\n\n\tcheckExistCollectionName(collectionName: string, chainId: number): Promise<any> {\n\t\tconst url = `/collections/checkName`;\n\t\treturn axiosClient.post(url, { collectionName, chainId });\n\t},\n\n\tgetAllCategory(): Promise<any> {\n\t\tconst url = `/collections/category`;\n\t\treturn axiosClient.get(url);\n\t},\n\tgetListCollectionCategory(): Promise<CollectionCategory[]> {\n\t\tconst url = `/collections/topCategory`;\n\t\treturn axiosClient.get(url);\n\t},\n};\n\nexport default collectionApi;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport collectionApi from 'apis/collectionApi';\nimport { Collection, ListParams, ListResponse, PaginationParams, Response } from 'models';\n\nimport {\n\tstartLoading,\n\thasError,\n\tfetchAllCollectionFirstLoadSuccess,\n\tfetchAllCollectionSuccess,\n\tfetchListCollectionsByOwnerOrCreatorItemsFirstLoadSuccess,\n\tfetchListCollectionsByOwnerOrCreatorItemsSuccess,\n\tfetchCollectionByIdSuccess,\n\tcreateCollectionSuccess,\n\teditCollectionSuccess,\n\tsetHasNextPage,\n} from 'redux/slices/collectionSlice';\n//utils\nimport {\n\tcallTransaction,\n\tcheckHasNextPage,\n\tencodeFunctionCall,\n\tsendTransaction,\n\twaitingForMined,\n} from 'utils';\n//constants\nimport { CONTRACT } from '../../constants';\nimport { dispatch, getState } from '../store';\n\nexport function fetchAllCollection(\n\tpagination: ListParams,\n\tfilter: ListParams,\n\tisFetchFirstLoad: boolean,\n\tMyCallBack?: Function\n) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response: ListResponse<Collection> = await collectionApi.getListCollectionId(\n\t\t\t\tpagination,\n\t\t\t\tfilter\n\t\t\t);\n\n\t\t\tconst paginationResponse: PaginationParams = response.pagination;\n\t\t\tconst check: boolean = checkHasNextPage(\n\t\t\t\tpaginationResponse.currentPage,\n\t\t\t\tpaginationResponse.totalPages\n\t\t\t);\n\n\t\t\tdispatch(setHasNextPage(check));\n\n\t\t\tif (isFetchFirstLoad) {\n\t\t\t\tdispatch(fetchAllCollectionFirstLoadSuccess(response));\n\t\t\t} else {\n\t\t\t\tdispatch(fetchAllCollectionSuccess(response));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tdispatch(hasError(error));\n\t\t} finally {\n\t\t\tif (MyCallBack) MyCallBack(getState());\n\t\t}\n\t};\n}\n\nexport function fetchListCollectionsByOwnerOrCreatorItems(\n\tpagination: ListParams,\n\tfilter: ListParams,\n\tisFetchFirstLoad: boolean,\n\tMyCallBack?: Function\n) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response: ListResponse<Collection> =\n\t\t\t\tawait collectionApi.getListCollectionByOwnerOrCreatorItems(pagination, filter);\n\n\t\t\tconst paginationResponse: PaginationParams = response.pagination;\n\t\t\tconst check: boolean = checkHasNextPage(\n\t\t\t\tpaginationResponse.currentPage,\n\t\t\t\tpaginationResponse.totalPages\n\t\t\t);\n\n\t\t\tdispatch(setHasNextPage(check));\n\n\t\t\tif (isFetchFirstLoad) {\n\t\t\t\tdispatch(fetchListCollectionsByOwnerOrCreatorItemsFirstLoadSuccess(response));\n\t\t\t} else {\n\t\t\t\tdispatch(fetchListCollectionsByOwnerOrCreatorItemsSuccess(response));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tdispatch(hasError(error));\n\t\t} finally {\n\t\t\tif (MyCallBack) MyCallBack(getState());\n\t\t}\n\t};\n}\n\nexport function fetchCollectionById(collectionId: string, MyCallBack?: Function) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response: Response<Collection> = await collectionApi.getCollectionById(\n\t\t\t\tcollectionId\n\t\t\t);\n\n\t\t\tdispatch(fetchCollectionByIdSuccess(response));\n\t\t} catch (error) {\n\t\t\tdispatch(hasError(error));\n\t\t} finally {\n\t\t\tif (MyCallBack) MyCallBack(getState());\n\t\t}\n\t};\n}\n\nexport function fetchCollectionDetailById(collectionId: string, MyCallBack?: Function) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response: Response<Collection> = await collectionApi.getCollectionDetailById(\n\t\t\t\tcollectionId\n\t\t\t);\n\n\t\t\tdispatch(fetchCollectionByIdSuccess(response));\n\t\t} catch (error) {\n\t\t\tdispatch(hasError(error));\n\t\t} finally {\n\t\t\tif (MyCallBack) MyCallBack(getState());\n\t\t}\n\t};\n}\n\nexport function createCollection(data: Collection, myCallBack?: Function) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response = await collectionApi.createCollection(data);\n\t\t\tdispatch(createCollectionSuccess());\n\t\t} catch (error: any) {\n\t\t\tconsole.log(error.error);\n\t\t\tdispatch(hasError(error));\n\t\t}\n\t};\n}\n\nexport function editCollection(data: Collection, collectionId: string, MyCallBack?: Function) {\n\treturn async () => {\n\t\tdispatch(startLoading());\n\t\ttry {\n\t\t\tconst response = await collectionApi.editCollection(data, collectionId);\n\t\t\tdispatch(editCollectionSuccess());\n\t\t} catch (error) {\n\t\t\tdispatch(hasError(error));\n\t\t} finally {\n\t\t\tif (MyCallBack) MyCallBack(getState());\n\t\t}\n\t};\n}\n\nconst callNFTAddress = async (chainId: number, address: string, salt: any, web3: any) => {\n\tconst encodedCall = await encodeFunctionCall(web3, 'getAddress(uint256)', ['uint256'], [salt]);\n\n\treturn callTransaction(address, CONTRACT[chainId].COLLECTION, encodedCall);\n};\n\nconst deployNewNFT = async (chainId: number, address: any, salt: number, web3: any) => {\n\tconst encodedCall = await encodeFunctionCall(web3, 'deploy(uint256)', ['uint256'], [salt]);\n\n\t//Consider using estimate gas later\n\t// const gas = await web3.eth.estimateGas({\n\t// \tfrom: address,\n\t// \tto: CONTRACT[chainId].COLLECTION,\n\t// \tdata: encodedCall,\n\t// });\n\n\tconst txHash = await sendTransaction(\n\t\taddress,\n\t\tCONTRACT[chainId].COLLECTION,\n\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n\t\tencodedCall,\n\t\t`0x556BA8`,\n\t\t'0x77359400'\n\t);\n\n\treturn waitingForMined(txHash, web3);\n};\n"],"sourceRoot":""}