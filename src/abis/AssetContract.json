{
	"address": "0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "_name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "_symbol",
					"type": "string"
				},
				{
					"internalType": "address",
					"name": "_proxyRegistryAddress",
					"type": "address"
				},
				{
					"internalType": "string",
					"name": "_templateURI",
					"type": "string"
				},
				{
					"internalType": "address",
					"name": "_migrationAddress",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "ApprovalForAll",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "_creator",
					"type": "address"
				}
			],
			"name": "CreatorChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "userAddress",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "address payable",
					"name": "relayerAddress",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bytes",
					"name": "functionSignature",
					"type": "bytes"
				}
			],
			"name": "MetaTransactionExecuted",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Paused",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "string",
					"name": "_value",
					"type": "string"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "PermanentURI",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256[]",
					"name": "ids",
					"type": "uint256[]"
				},
				{
					"indexed": false,
					"internalType": "uint256[]",
					"name": "values",
					"type": "uint256[]"
				}
			],
			"name": "TransferBatch",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "id",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "TransferSingle",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "string",
					"name": "_uri",
					"type": "string"
				},
				{
					"indexed": true,
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "URI",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "Unpaused",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "ERC712_VERSION",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_address",
					"type": "address"
				}
			],
			"name": "addSharedProxyAddress",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_owner",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address[]",
					"name": "accounts",
					"type": "address[]"
				},
				{
					"internalType": "uint256[]",
					"name": "ids",
					"type": "uint256[]"
				}
			],
			"name": "balanceOfBatch",
			"outputs": [
				{
					"internalType": "uint256[]",
					"name": "",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_from",
					"type": "address"
				},
				{
					"internalType": "uint256[]",
					"name": "_ids",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "_quantities",
					"type": "uint256[]"
				}
			],
			"name": "batchBurn",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_to",
					"type": "address"
				},
				{
					"internalType": "uint256[]",
					"name": "_ids",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "_quantities",
					"type": "uint256[]"
				},
				{
					"internalType": "bytes",
					"name": "_data",
					"type": "bytes"
				}
			],
			"name": "batchMint",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_from",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_quantity",
					"type": "uint256"
				}
			],
			"name": "burn",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "creator",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "disableMigrate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "userAddress",
					"type": "address"
				},
				{
					"internalType": "bytes",
					"name": "functionSignature",
					"type": "bytes"
				},
				{
					"internalType": "bytes32",
					"name": "sigR",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "sigS",
					"type": "bytes32"
				},
				{
					"internalType": "uint8",
					"name": "sigV",
					"type": "uint8"
				}
			],
			"name": "executeMetaTransaction",
			"outputs": [
				{
					"internalType": "bytes",
					"name": "",
					"type": "bytes"
				}
			],
			"stateMutability": "payable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "exists",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getChainId",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getDomainSeperator",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "getNonce",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "nonce",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_operator",
					"type": "address"
				}
			],
			"name": "isApprovedForAll",
			"outputs": [
				{
					"internalType": "bool",
					"name": "isOperator",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "isPermanentURI",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "maxSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "pure",
			"type": "function"
		},
		{
			"inputs": [
				{
					"components": [
						{
							"internalType": "uint256",
							"name": "id",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "owner",
							"type": "address"
						}
					],
					"internalType": "struct ForbitswapNFTSAssetShared.Ownership[]",
					"name": "_ownerships",
					"type": "tuple[]"
				}
			],
			"name": "migrate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "migrationTarget",
			"outputs": [
				{
					"internalType": "contract ForbitswapNFTSAssetShared",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_quantity",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "_data",
					"type": "bytes"
				}
			],
			"name": "mint",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "pause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "paused",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "proxyRegistryAddress",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_address",
					"type": "address"
				}
			],
			"name": "removeSharedProxyAddress",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_to",
					"type": "address"
				},
				{
					"internalType": "uint256[]",
					"name": "_ids",
					"type": "uint256[]"
				},
				{
					"internalType": "uint256[]",
					"name": "_amounts",
					"type": "uint256[]"
				},
				{
					"internalType": "bytes",
					"name": "_data",
					"type": "bytes"
				}
			],
			"name": "safeBatchTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "_to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "_amount",
					"type": "uint256"
				},
				{
					"internalType": "bytes",
					"name": "_data",
					"type": "bytes"
				}
			],
			"name": "safeTransferFrom",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "operator",
					"type": "address"
				},
				{
					"internalType": "bool",
					"name": "approved",
					"type": "bool"
				}
			],
			"name": "setApprovalForAll",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "_to",
					"type": "address"
				}
			],
			"name": "setCreator",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				},
				{
					"internalType": "string",
					"name": "_uri",
					"type": "string"
				}
			],
			"name": "setPermanentURI",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_address",
					"type": "address"
				}
			],
			"name": "setProxyRegistryAddress",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "_uri",
					"type": "string"
				}
			],
			"name": "setTemplateURI",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				},
				{
					"internalType": "string",
					"name": "_uri",
					"type": "string"
				}
			],
			"name": "setURI",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"name": "sharedProxyAddresses",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "supportsFactoryInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "pure",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "templateURI",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "unpause",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "_id",
					"type": "uint256"
				}
			],
			"name": "uri",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"transactionHash": "0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0",
	"receipt": {
		"to": null,
		"from": "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8",
		"contractAddress": "0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a",
		"transactionIndex": 0,
		"gasUsed": "3753980",
		"logsBloom": "0x
		"blockHash": "0x56ce0865f9030d9a9a50ea36867649aa1393d4d2acfd36b65572beafaa9e7c6d",
		"transactionHash": "0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0",
		"logs": [
			{
				"transactionIndex": 0,
				"blockNumber": 10331052,
				"transactionHash": "0x6237a52f170d86f6144279c04b8653158a409b586a0d1f80814cda89ac0865b0",
				"address": "0xdaCfA470af7a543b2d4ED0E9619924A3f9BE6C1a",
				"topics": [
					"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
					"0x0000000000000000000000000000000000000000000000000000000000000000",
					"0x00000000000000000000000000b91b2f8afe87fcdc2b3ffa9ee2278cd1e4ddf8"
				],
				"data": "0x",
				"logIndex": 0,
				"blockHash": "0x56ce0865f9030d9a9a50ea36867649aa1393d4d2acfd36b65572beafaa9e7c6d"
			}
		],
		"blockNumber": 10331052,
		"cumulativeGasUsed": "3753980",
		"status": 1,
		"byzantium": true
	},
	"args": [
		"Forbit Migration contracts",
		"FMC",
		"0x14aFCbb771B02743234aF08e7DDd8647f42A5b58",
		"",
		"0x12F571d5Cd4D20C9D83D0D222516Dfb3299Ff29D"
	],
	"solcInputHash": "98c15b4f3559a23f2599202e42791894",
	"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_templateURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_migrationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"CreatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"PermanentURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addSharedProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isPermanentURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ForbitswapNFTSAssetShared.Ownership[]\",\"name\":\"_ownerships\",\"type\":\"tuple[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTarget\",\"outputs\":[{\"internalType\":\"contract ForbitswapNFTSAssetShared\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeSharedProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setPermanentURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTemplateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharedProxyAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsFactoryInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchBurn(address,uint256[],uint256[])\":{\"details\":\"Burns tokens for each id in _ids\",\"params\":{\"_from\":\"The address to burn tokens from\",\"_ids\":\"Array of token ids to burn\",\"_quantities\":\"Array of the amount to be burned\"}},\"batchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Mint tokens for each id in _ids\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_ids\":\"Array of ids to mint\",\"_quantities\":\"Array of amounts of tokens to mint per id\",\"_to\":\"The address to mint tokens to\"}},\"burn(address,uint256,uint256)\":{\"details\":\"Burns amount of a given token id\",\"params\":{\"_from\":\"The address to burn tokens from\",\"_id\":\"Token ID to burn\",\"_quantity\":\"Amount to burn\"}},\"exists(uint256)\":{\"details\":\"Returns whether the specified token is minted\"},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Mints some amount of tokens to an address\",\"params\":{\"_data\":\"Data to pass if receiver is contract\",\"_id\":\"Token ID to mint\",\"_quantity\":\"Amount of tokens to mint\",\"_to\":\"Address of the future owner of the token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Return true if the contract is paused, and false otherwise\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\",\"params\":{\"_id\":\"Id of token to query\"},\"returns\":{\"_0\":\"Amount of token in existence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collectible/ForbitswapNFTSAssetShared.sol\":\"ForbitswapNFTSAssetShared\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x5c8ae508c9208b232eada2cf40a774371336fad5b9f3a921fdfdaa007bf23c5e\",\"license\":\"MIT\"},\"contracts/collectible/ERC1155Custom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../token/ERC1155/ERC1155.sol\\\";\\nimport \\\"../utils/math/SafeMath.sol\\\";\\nimport \\\"../utils/libraries/Strings.sol\\\";\\n\\nimport \\\"./meta-transaction/ContextMixin.sol\\\";\\nimport \\\"./meta-transaction/NativeMetaTransaction.sol\\\";\\nimport \\\"../utils/Pausable.sol\\\";\\n// import \\\"../market/ProxyRegistry.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\ncontract ERC1155Custom is ContextMixin, ERC1155, NativeMetaTransaction, Ownable, Pausable {\\n  using Address for address;\\n\\n  address public proxyRegistryAddress;\\n  string public name;\\n  string public symbol;\\n\\n  mapping(uint256 => mapping(address => uint256)) private balances;\\n  mapping(uint256 => uint256) private _supply;\\n\\n  event URI(string _uri, uint256 indexed _id);\\n\\n  modifier onlyOwnerOrProxy() {\\n    require(\\n      _isOwnerOrProxy(_msgSender()),\\n      \\\"ERC1155Trandable: CALLER_IS_NOT_OWNER\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyApproved(address _from) {\\n    require(\\n      _from == _msgSender() || isApprovedForAll(_from, _msgSender()),\\n      \\\"ERC1155Trandable: CALLER_NOT_ALLOWED\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _uri,\\n    address _proxyRegistryAddress\\n  ) ERC1155(_uri) {\\n    name = _name;\\n    symbol = _symbol;\\n    proxyRegistryAddress = _proxyRegistryAddress;\\n    _initializeEIP712(name);\\n  }\\n\\n  function _isOwnerOrProxy(address _address) internal view returns (bool) {\\n    return owner() == _address || _isProxyForUser(owner(), _address);\\n  }\\n\\n  function pause() external onlyOwnerOrProxy {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwnerOrProxy {\\n    _unpause();\\n  }\\n\\n  function balanceOf(address account, uint256 id)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n    return balances[id][account];\\n  }\\n\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(\\n      accounts.length == ids.length,\\n      \\\"ERC1155: accounts and ids length mismatch\\\"\\n    );\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev Returns the total quantity for a token ID\\n   * @param _id Id of token to query\\n   * @return Amount of token in existence\\n   */\\n  function totalSupply(uint256 _id) public view returns (uint256) {\\n    return _supply[_id];\\n  }\\n\\n  function isApprovedForAll(address _owner, address _operator)\\n    public\\n    view\\n    override\\n    returns (bool isOperator)\\n  {\\n    if (_isProxyForUser(_owner, _operator)) {\\n      return true;\\n    }\\n\\n    return super.isApprovedForAll(_owner, _operator);\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public virtual override whenNotPaused onlyApproved(from) {\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(\\n      operator,\\n      from,\\n      to,\\n      asSingletonArray(id),\\n      asSingletonArray(amount),\\n      data\\n    );\\n\\n    uint256 fromBalance = balances[id][from];\\n    require(\\n      fromBalance >= amount,\\n      \\\"ERC1155: insufficient balance for transfer\\\"\\n    );\\n    balances[id][from] = fromBalance - amount;\\n    balances[id][to] += amount;\\n\\n    emit TransferSingle(operator, from, to, id, amount);\\n\\n    doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) public virtual override whenNotPaused onlyApproved(from) {\\n    require(\\n      ids.length == amounts.length,\\n      \\\"ERC1155: IDS_AMOUNTS_LENGTH_MISMATCH\\\"\\n    );\\n    require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n    for (uint256 i = 0; i < ids.length; ++i) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 fromBalance = balances[id][from];\\n      require(\\n        fromBalance >= amount,\\n        \\\"ERC1155: insufficient balance for transfer\\\"\\n      );\\n      balances[id][from] = fromBalance - amount;\\n      balances[id][to] += amount;\\n    }\\n\\n    emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    doSafeBatchTransferAcceptanceCheck(\\n      operator,\\n      from,\\n      to,\\n      ids,\\n      amounts,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @dev Hook called before minting\\n   * @param _id Token ID to mint\\n   * @param _quantity Amount of tokens to mint\\n   */\\n  function _beforeMint(uint256 _id, uint256 _quantity) internal virtual {}\\n\\n  /**\\n   * @dev Mints some amount of tokens to an address\\n   * @param _to Address of the future owner of the token\\n   * @param _id Token ID to mint\\n   * @param _quantity Amount of tokens to mint\\n   * @param _data Data to pass if receiver is contract\\n   */\\n  function mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _quantity,\\n    bytes memory _data\\n  ) public virtual onlyOwnerOrProxy {\\n    _mint(_to, _id, _quantity, _data);\\n  }\\n\\n  /**\\n   * @dev Mint tokens for each id in _ids\\n   * @param _to The address to mint tokens to\\n   * @param _ids Array of ids to mint\\n   * @param _quantities Array of amounts of tokens to mint per id\\n   * @param _data Data to pass if receiver is contract\\n   */\\n  function batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _quantities,\\n    bytes memory _data\\n  ) public virtual onlyOwnerOrProxy {\\n    _batchMint(_to, _ids, _quantities, _data);\\n  }\\n\\n  /**\\n   * @dev Burns amount of a given token id\\n   * @param _from The address to burn tokens from\\n   * @param _id Token ID to burn\\n   * @param _quantity Amount to burn\\n   */\\n  function burn(\\n    address _from,\\n    uint256 _id,\\n    uint256 _quantity\\n  ) public virtual onlyApproved(_from) {\\n    _burn(_from, _id, _quantity);\\n  }\\n\\n  /**\\n   * @dev Burns tokens for each id in _ids\\n   * @param _from The address to burn tokens from\\n   * @param _ids Array of token ids to burn\\n   * @param _quantities Array of the amount to be burned\\n   */\\n  function batchBurn(\\n    address _from,\\n    uint256[] memory _ids,\\n    uint256[] memory _quantities\\n  ) public virtual onlyApproved(_from) {\\n    _burnBatch(_from, _ids, _quantities);\\n  }\\n\\n  /**\\n   * @dev Returns whether the specified token is minted\\n   */\\n  function exists(uint256 _id) public view returns (bool) {\\n    return _supply[_id] > 0;\\n  }\\n\\n  function _mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) internal virtual override whenNotPaused {\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(\\n      operator,\\n      address(0),\\n      _to,\\n      asSingletonArray(_id),\\n      asSingletonArray(_amount),\\n      _data\\n    );\\n\\n    _beforeMint(_id, _amount);\\n\\n    balances[_id][_to] += _amount;\\n    _supply[_id] += _amount;\\n\\n    emit TransferSingle(operator, address(0), _to, _id, _amount);\\n\\n    doSafeTransferAcceptanceCheck(\\n      operator,\\n      address(0),\\n      _to,\\n      _id,\\n      _amount,\\n      _data\\n    );\\n  }\\n\\n  function _batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  ) internal virtual whenNotPaused {\\n    require(\\n      _ids.length == _amounts.length,\\n      \\\"INVALID_ARRAYS_LENGTH\\\"\\n    );\\n\\n    uint256 nMint = _ids.length;\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, address(0), _to, _ids, _amounts, _data);\\n\\n    for (uint256 i = 0; i < nMint; i++) {\\n      uint256 id = _ids[i];\\n      uint256 amount = _amounts[i];\\n      _beforeMint(id, amount);\\n      balances[id][_to] += amount;\\n      _supply[id] += amount;\\n    }\\n\\n    emit TransferBatch(operator, address(0), _to, _ids, _amounts);\\n\\n    doSafeBatchTransferAcceptanceCheck(\\n      operator,\\n      address(0),\\n      _to,\\n      _ids,\\n      _amounts,\\n      _data\\n    );\\n  }\\n\\n  function _burn(\\n    address account,\\n    uint256 id,\\n    uint256 amount\\n  ) internal override whenNotPaused {\\n    require(account != address(0), \\\"BURN_FROM_ZERO_ADDRESS\\\");\\n    require(amount > 0, \\\"AMOUNT_LESS_THAN_ONE\\\");\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(\\n      operator,\\n      account,\\n      address(0),\\n      asSingletonArray(id),\\n      asSingletonArray(amount),\\n      \\\"\\\"\\n    );\\n\\n    uint256 accountBalance = balances[id][account];\\n    require(\\n      accountBalance >= amount,\\n      \\\"AMOUNT_EXCEEDS_BALANCE\\\"\\n    );\\n    balances[id][account] = accountBalance - amount;\\n    _supply[id] -= amount;\\n\\n    emit TransferSingle(operator, account, address(0), id, amount);\\n  }\\n\\n  function _burnBatch(\\n    address account,\\n    uint256[] memory ids,\\n    uint256[] memory amounts\\n  ) internal override whenNotPaused {\\n    require(account != address(0), \\\"BURN_FROM_ZERO_ADDRESS\\\");\\n    require(\\n      ids.length == amounts.length,\\n      \\\"IDS_AMOUNTS_LENGTH_MISMATCH\\\"\\n    );\\n\\n    address operator = _msgSender();\\n\\n    _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      uint256 id = ids[i];\\n      uint256 amount = amounts[i];\\n\\n      uint256 accountBalance = balances[id][account];\\n      require(\\n        accountBalance >= amount,\\n        \\\"AMOUNT_EXCEEDS_BALANCE\\\"\\n      );\\n      balances[id][account] = accountBalance - amount;\\n      _supply[id] -= amount;\\n    }\\n\\n    emit TransferBatch(operator, account, address(0), ids, amounts);\\n  }\\n\\n  function _isProxyForUser(address _user, address _address)\\n    internal\\n    view\\n    virtual\\n    returns (bool)\\n  {\\n    if (!proxyRegistryAddress.isContract()) {\\n      return false;\\n    }\\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    return address(proxyRegistry.proxies(_user)) == _address;\\n  }\\n\\n  function doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try\\n        IERC1155Receiver(to).onERC1155Received(\\n          operator,\\n          from,\\n          id,\\n          amount,\\n          data\\n        )\\n      returns (bytes4 response) {\\n        if (\\n          response != IERC1155Receiver(to).onERC1155Received.selector\\n        ) {\\n          revert(\\\"ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"Transfer to non ERC1155Receiver\\\");\\n      }\\n    }\\n  }\\n\\n  function doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal {\\n    if (to.isContract()) {\\n      try\\n        IERC1155Receiver(to).onERC1155BatchReceived(\\n          operator,\\n          from,\\n          ids,\\n          amounts,\\n          data\\n        )\\n      returns (bytes4 response) {\\n        if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n          revert(\\\"ERC1155Receiver rejected tokens\\\");\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(\\\"Transfer to non ERC1155Receiver\\\");\\n      }\\n    }\\n  }\\n\\n  function asSingletonArray(uint256 element)\\n    private\\n    pure\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n    return array;\\n  }\\n\\n  function _msgSender() internal view override returns (address sender) {\\n    return ContextMixin.msgSender();\\n  }\\n}\",\"keccak256\":\"0xc5c99f65388b09e780b27c07915a897a30b676fe2307a30023c156b528155c01\",\"license\":\"MIT\"},\"contracts/collectible/ForbitswapNFTSAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Custom.sol\\\";\\n\\ncontract ForbitswapNFTSAsset is ERC1155Custom {\\n  uint256 constant TOKEN_SUPPLY_CAP = 1;\\n  string public templateURI;\\n\\n  mapping(uint256 => string) private _tokenURI;\\n  mapping(uint256 => bool) private _isPermanentURI;\\n\\n  event PermanentURI(string _value, uint256 indexed _id);\\n\\n  modifier onlyTokenAmountOwned(\\n    address _from,\\n    uint256 _id,\\n    uint256 _quantity\\n  ) {\\n    require(\\n      _ownsTokenAmount(_from, _id, _quantity),\\n      \\\"ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyImpermanentURI(uint256 id) {\\n    require(\\n      !isPermanentURI(id),\\n      \\\"URI_CANNOT_BE_CHANGED\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _proxyRegistryAddress,\\n    string memory _templateURI\\n  ) ERC1155Custom(_name, _symbol, \\\"\\\", _proxyRegistryAddress) {\\n    if (bytes(_templateURI).length > 0) {\\n      setTemplateURI(_templateURI);\\n    }\\n  }\\n\\n  function _ownsTokenAmount(\\n    address _from,\\n    uint256 _id,\\n    uint256 _quantity\\n  ) internal view returns (bool) {\\n    return balanceOf(_from, _id) >= _quantity;\\n  }\\n\\n  function supportsFactoryInterface() public pure returns (bool) {\\n    return true;\\n  }\\n\\n  function setTemplateURI(string memory _uri) public onlyOwnerOrProxy {\\n    templateURI = _uri;\\n  }\\n\\n  function setURI(uint256 _id, string memory _uri)\\n    public\\n    virtual\\n    onlyOwnerOrProxy\\n    onlyImpermanentURI(_id)\\n  {\\n    _setURI(_id, _uri);\\n  }\\n\\n  function setPermanentURI(uint256 _id, string memory _uri)\\n    public\\n    virtual\\n    onlyOwnerOrProxy\\n    onlyImpermanentURI(_id)\\n  {\\n    _setPermanentURI(_id, _uri);\\n  }\\n\\n  function isPermanentURI(uint256 _id) public view returns (bool) {\\n    return _isPermanentURI[_id];\\n  }\\n\\n  function uri(uint256 _id) public view override returns (string memory) {\\n    string memory tokenUri = _tokenURI[_id];\\n    if (bytes(tokenUri).length != 0) {\\n      return tokenUri;\\n    }\\n    return templateURI;\\n  }\\n\\n  function balanceOf(address _owner, uint256 _id)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    uint256 balance = super.balanceOf(_owner, _id);\\n    return \\n      _isCreatorOrProxy(_owner)\\n        ? balance + _remainingSupply(_id)\\n        : balance;\\n  }\\n\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) public override {\\n    uint256 mintedBalance = super.balanceOf(_from, _id);\\n    if (mintedBalance < _amount) {\\n      mint(_to, _id, _amount - mintedBalance, _data);\\n      if (mintedBalance > 0) {\\n        super.safeTransferFrom(_from, _to, _id, mintedBalance, _data);\\n      }\\n    } else {\\n      super.safeTransferFrom(_from, _to, _id, _amount, _data);\\n    }\\n  }\\n\\n  function safeBatchTransferFrom(\\n    address _from,\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  ) public override {\\n    require(\\n      _ids.length == _amounts.length,\\n      \\\"INVALID_ARRAYS_LENGTH\\\"\\n    );\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      safeTransferFrom(_from, _to, _ids[i], _amounts[i], _data);\\n    }\\n  }\\n\\n  function _beforeMint(uint256 _id, uint256 _quantity)\\n    internal\\n    view\\n    override\\n  {\\n    require(\\n      _quantity <= _remainingSupply(_id),\\n      \\\"QUANTITY_EXCEEDS_TOKEN_SUPPLY_CAP\\\"\\n    );\\n  }\\n\\n  function burn(\\n    address _from,\\n    uint256 _id,\\n    uint256 _quantity\\n  ) public override onlyTokenAmountOwned(_from, _id, _quantity) {\\n    super.burn(_from, _id, _quantity);\\n  }\\n\\n  function batchBurn(\\n    address _from,\\n    uint256[] memory _ids,\\n    uint256[] memory _quantities\\n  ) public override {\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      require(\\n        _ownsTokenAmount(_from, _ids[i], _quantities[i]),\\n        \\\"ONLY_TOKEN_AMOUNT_OWNED_ALLOWED\\\"\\n      );\\n    }\\n    super.batchBurn(_from, _ids, _quantities);\\n  }\\n\\n  function _mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _quantity,\\n    bytes memory _data\\n  ) internal override {\\n    super._mint(_to, _id, _quantity, _data);\\n    if (_data.length > 1) {\\n      _setURI(_id, string(_data));\\n    }\\n  }\\n\\n  function _isCreatorOrProxy(address _address)\\n    internal\\n    view\\n    virtual\\n    returns (bool)\\n  {\\n    return _isOwnerOrProxy(_address);\\n  }\\n\\n  function _remainingSupply(uint256 _id)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    return TOKEN_SUPPLY_CAP - totalSupply(_id);\\n  }\\n\\n  function _origin() internal view virtual returns (address) {\\n    return owner();\\n  }\\n\\n  function _batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _quantities,\\n    bytes memory _data\\n  ) internal virtual override {\\n    super._batchMint(_to, _ids, _quantities, _data);\\n    if (_data.length > 1) {\\n      for (uint256 i = 0; i < _ids.length; i++) {\\n        _setURI(_ids[i], string(_data));\\n      }\\n    }\\n  }\\n\\n  function _setURI(uint256 _id, string memory _uri) internal {\\n    _tokenURI[_id] = _uri;\\n    emit URI(_uri, _id);\\n  }\\n\\n  function _setPermanentURI(uint256 _id, string memory _uri)\\n    internal\\n    virtual\\n  {\\n    require(\\n      bytes(_uri).length > 0,\\n      \\\"ONLY_VALID_URI\\\"\\n    );\\n    _isPermanentURI[_id] = true;\\n    _setURI(_id, _uri);\\n    emit PermanentURI(_uri, _id);\\n  }\\n}\",\"keccak256\":\"0x9afcb43aa9e8d90ae405e08e8081a3091aa6315cdc84cf4643a8568cb243def1\",\"license\":\"MIT\"},\"contracts/collectible/ForbitswapNFTSAssetShared.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ForbitswapNFTSAsset.sol\\\";\\nimport \\\"./TokenIdentifiers.sol\\\";\\nimport \\\"../utils/ReentrancyGuard.sol\\\";\\n\\ncontract ForbitswapNFTSAssetShared is ForbitswapNFTSAsset, ReentrancyGuard {\\n  using TokenIdentifiers for uint256;\\n\\n  ForbitswapNFTSAssetShared public migrationTarget;\\n\\n  mapping(address => bool) public sharedProxyAddresses;\\n\\n  struct Ownership {\\n    uint256 id;\\n    address owner;\\n  }\\n\\n  mapping(uint256 => address) internal _creatorOverride;\\n\\n  event CreatorChanged(uint256 indexed _id, address indexed _creator);\\n\\n  modifier creatorOnly(uint256 _id) {\\n    require(\\n      _isCreatorOrProxy(_id, _msgSender()),\\n      \\\"ONLY_CREATOR_ALLOWED\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyFullTokenOwner(uint256 _id) {\\n    require(\\n      _ownsTokenAmount(_msgSender(), _id, _id.tokenMaxSupply()),\\n      \\\"ONLY_FULL_TOKEN_OWNER_ALLOWED\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _proxyRegistryAddress,\\n    string memory _templateURI,\\n    address _migrationAddress\\n  ) ForbitswapNFTSAsset(_name, _symbol, _proxyRegistryAddress, _templateURI) {\\n    migrationTarget = ForbitswapNFTSAssetShared(_migrationAddress);\\n  }\\n\\n  function setProxyRegistryAddress(address _address) public onlyOwnerOrProxy {\\n    proxyRegistryAddress = _address;\\n  }\\n\\n  function addSharedProxyAddress(address _address) public onlyOwnerOrProxy {\\n    sharedProxyAddresses[_address] = true;\\n  }\\n\\n  function removeSharedProxyAddress(address _address) public onlyOwnerOrProxy {\\n    delete sharedProxyAddresses[_address];\\n  }\\n\\n  function disableMigrate() public onlyOwnerOrProxy {\\n    migrationTarget = ForbitswapNFTSAssetShared(address(0));\\n  }\\n\\n  function migrate(Ownership[] memory _ownerships) public onlyOwnerOrProxy {\\n    ForbitswapNFTSAssetShared _migrationTarget = migrationTarget;\\n    require(\\n      _migrationTarget != ForbitswapNFTSAssetShared(address(0)),\\n      \\\"MIGRATE_DISABLED\\\"\\n    );\\n\\n    string memory _migrationTargetTemplateURI = _migrationTarget.templateURI();\\n\\n    for (uint256 i = 0; i < _ownerships.length; ++i) {\\n      uint256 id = _ownerships[i].id;\\n      address owner = _ownerships[i].owner;\\n\\n      require(\\n        owner != address(0),\\n        \\\"ZERO_ADDRESS_NOT_ALLOWED\\\"\\n      );\\n\\n      uint256 previousAmount = _migrationTarget.balanceOf(owner, id);\\n\\n      if (previousAmount == 0) {\\n        continue;\\n      }\\n\\n      _mint(owner, id, previousAmount, \\\"\\\");\\n\\n      if (\\n        keccak256(bytes(_migrationTarget.uri(id))) !=\\n        keccak256(bytes(_migrationTargetTemplateURI))\\n      ) {\\n        _setPermanentURI(id, _migrationTarget.uri(id));\\n      }\\n    }\\n  }\\n\\n  function mint(\\n    address _to,\\n    uint256 _id,\\n    uint256 _quantity,\\n    bytes memory _data\\n  ) public override nonReentrant creatorOnly(_id) {\\n    _mint(_to, _id, _quantity, _data);\\n  }\\n\\n  function batchMint(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _quantities,\\n    bytes memory _data\\n  ) public override nonReentrant {\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      require(\\n        _isCreatorOrProxy(_ids[i], _msgSender()),\\n        \\\"ONLY_CREATOR_ALLOWED\\\"\\n      );\\n    }\\n    _batchMint(_to, _ids, _quantities, _data);\\n  }\\n\\n  function setURI(uint256 _id, string memory _uri)\\n    public\\n    override\\n    creatorOnly(_id)\\n    onlyFullTokenOwner(_id)\\n  {\\n    _setURI(_id, _uri);\\n  }\\n\\n  function setPermanentURI(uint256 _id, string memory _uri)\\n    public\\n    override\\n    creatorOnly(_id)\\n    onlyImpermanentURI(_id)\\n    onlyFullTokenOwner(_id)\\n  {\\n    _setPermanentURI(_id, _uri);\\n  }\\n\\n  function setCreator(uint256 _id, address _to) public creatorOnly(_id) {\\n    require(\\n      _to != address(0),\\n      \\\"INVALID_ADDRESS\\\"\\n    );\\n    _creatorOverride[_id] = _to;\\n    emit CreatorChanged(_id, _to);\\n  }\\n\\n  function creator(uint256 _id) public view returns (address) {\\n    if (_creatorOverride[_id] != address(0)) {\\n      return _creatorOverride[_id];\\n    } else {\\n      return _id.tokenCreator();\\n    }\\n  }\\n\\n  function maxSupply(uint256 _id) public pure returns (uint256) {\\n    return _id.tokenMaxSupply();\\n  }\\n\\n  function _origin(uint256 _id) internal pure returns (address) {\\n    return _id.tokenCreator();\\n  }\\n\\n  function _requireMintable(address _address, uint256 _id) internal view {\\n    require(\\n      _isCreatorOrProxy(_id, _address),\\n      \\\"ONLY_CREATOR_ALLOWED\\\"\\n    );\\n  }\\n\\n  function _remainingSupply(uint256 _id)\\n    internal\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return maxSupply(_id) - totalSupply(_id);\\n  }\\n\\n  function _isCreatorOrProxy(uint256 _id, address _address)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address creator_ = creator(_id);\\n    return creator_ == _address || _isProxyForUser(creator_, _address);\\n  }\\n\\n  function _isProxyForUser(address _user, address _address)\\n    internal\\n    view\\n    override\\n    returns (bool)\\n  {\\n    if (sharedProxyAddresses[_address]) {\\n      return true;\\n    }\\n    return super._isProxyForUser(_user, _address);\\n  }\\n}\",\"keccak256\":\"0x12d34744cd0fa115da821f599cb0f1d3b34f69fd0a0b01862c634fdfaae98c53\",\"license\":\"MIT\"},\"contracts/collectible/TokenIdentifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary TokenIdentifiers {\\n  uint8 constant ADDRESS_BITS = 160;\\n  uint8 constant INDEX_BITS = 56;\\n  uint8 constant SUPPLY_BITS = 40;\\n\\n  uint256 constant SUPPLY_MASK = (uint256(1) << SUPPLY_BITS) - 1;\\n  uint256 constant INDEX_MASK = ((uint256(1) << INDEX_BITS) - 1) ^ SUPPLY_MASK;\\n\\n  function tokenMaxSupply(uint256 _id) internal pure returns (uint256) {\\n    return _id & SUPPLY_MASK;\\n  }\\n\\n  function tokenIndex(uint256 _id) internal pure returns (uint256) {\\n    return _id & INDEX_MASK;\\n  }\\n\\n  function tokenCreator(uint256 _id) internal pure returns (address) {\\n    return address(uint160(_id >> (INDEX_BITS + SUPPLY_BITS)));\\n  }\\n}\",\"keccak256\":\"0x9161ff1b0d82ca545d46d1daec0e410980884d5979e10afec8d172b3008da6dd\",\"license\":\"MIT\"},\"contracts/collectible/meta-transaction/ContextMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ContextMixin {\\n    function msgSender()\\n        internal\\n        view\\n        returns (address payable sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = payable(msg.sender);\\n        }\\n        return sender;\\n    }\\n}\",\"keccak256\":\"0x75cc75d416c24a59b695e8418abacc91fe6da7a1e76d791b660e7e6a8e89aa7e\",\"license\":\"MIT\"},\"contracts/collectible/meta-transaction/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string public constant ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 internal domainSeperator;\\n\\n    function _initializeEIP712(\\n        string memory name\\n    )\\n        internal\\n        initializer\\n    {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\",\"keccak256\":\"0x41fab0b43922c8e3134341e79d4f4f83bf441b4476ce4a303bfebb9e3ff887d8\",\"license\":\"MIT\"},\"contracts/collectible/meta-transaction/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract Initializable {\\n  bool inited = false;\\n\\n  modifier initializer() {\\n    require(!inited, \\\"already inited\\\");\\n    _;\\n    inited = true;\\n  }\\n}\",\"keccak256\":\"0x1936400e518e73dfe924a655b68a2533efc0758e24b71e212f03c11fce2bd1c9\",\"license\":\"MIT\"},\"contracts/collectible/meta-transaction/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n    \\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\",\"keccak256\":\"0x2fe0d0f279a758d3893b7d7c8ee2e9a6e1780a74fc5d00e5e1ebfc453e2360f6\",\"license\":\"MIT\"},\"contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"../../utils/math/SafeMath.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/libraries/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155: balance query for the zero address\\\"\\n        );\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            _msgSender() != operator,\\n            \\\"ERC1155: setting approval status for self\\\"\\n        );\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            to,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155: insufficient balance for transfer\\\"\\n        );\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            \\\"\\\"\\n        );\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(\\n            accountBalance >= amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(\\n                accountBalance >= amount,\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    // solhint-disable no-empty-blocks\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x56a626cd1da960493a39226f22c772cff647d2c204e7848282963087dc008573\",\"license\":\"MIT\"},\"contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    // event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f99788b7ddbfdc0fbd6f8e1072f3648a12b0a19771eea9261c8b65b8ac1d1da\",\"license\":\"MIT\"},\"contracts/token/ERC1155/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x98f51fcfa39b58ed90352217aa4900ec770f83a9fdec91780a45d61de4ad509e\",\"license\":\"MIT\"},\"contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Pausable is Context {\\n  bool private _paused;\\n\\n  event Paused(address account);\\n  event Unpaused(address account);\\n\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Pausable: paused\\\");\\n    _;\\n  }\\n\\n  modifier whenPaused() {\\n    require(paused(), \\\"Pausable: not paused\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Return true if the contract is paused, and false otherwise\\n   */\\n  function paused() public virtual returns (bool) {\\n    return _paused;\\n  }\\n\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Return to normal state\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n}\",\"keccak256\":\"0xf9516df26db7a649f3e4ca083cc38b752049819c325e7e596f697880cc792f28\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n */\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xda940c3f1f364a990f37f0b5bb62f6410ff58666104d3fe712d42f7d82952f57\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x93b1ce940e4e905752730be86b74d5f915097747868f7876e1de9af86afa6ad4\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7a79a3811a2d5ccd504dfc51074048aa28b2b3ef0ca63db196e70c44fd072a7\",\"license\":\"MIT\"},\"contracts/utils/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d,\\n        string memory _e\\n    ) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\n        );\\n        bytes memory babcde = bytes(abcde);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n        return string(babcde);\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xb5125219a0b6640bfd7c22463d63b97d1525e7830eea1bfe6312b6f08437762c\",\"license\":\"MIT\"},\"contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x860c26edc6958c5c72c482b147921630e311c0b061dc7fd2157d1840653f6839\",\"license\":\"MIT\"}},\"version\":1}",
	"bytecode": "0x60806040526003805460ff191690553480156200001b57600080fd5b50604051620047d8380380620047d88339810160408190526200003e91620006bd565b8484848483836040518060200160405280600081525084816200006781620001be60201b60201c565b506200007c62000076620001d7565b620001f4565b6006805460ff60a01b1916905583516200009e9060089060208701906200054d565b508251620000b49060099060208601906200054d565b50600780546001600160a01b0319166001600160a01b03831617905560088054620001709190620000e59062000824565b80601f0160208091040260200160405190810160405280929190818152602001828054620001139062000824565b8015620001645780601f10620001385761010080835404028352916020019162000164565b820191906000526020600020905b8154815290600101906020018083116200014657829003601f168201915b50506200024692505050565b505050506000815111156200018a576200018a8162000290565b50506001600f555050601080546001600160a01b0319166001600160a01b0392909216919091179055506200089092505050565b8051620001d39060029060208401906200054d565b5050565b6000620001ee620002d860201b620018fb1760201c565b90505b90565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60035460ff1615620002755760405162461bcd60e51b81526004016200026c90620007fc565b60405180910390fd5b620002808162000336565b506003805460ff19166001179055565b620002a46200029e620001d7565b620003d8565b620002c35760405162461bcd60e51b81526004016200026c90620007b7565b8051620001d390600c9060208401906200054d565b6000333014156200033157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620001f19050565b503390565b6040518060800160405280604f815260200162004789604f913980516020918201208251838301206040805180820190915260018152603160f81b930192909252907fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc630620003a46200041a565b604051620003ba9594939291906020016200078b565b60408051601f19818403018152919052805160209091012060045550565b60006001600160a01b038216620003ee6200041e565b6001600160a01b03161480620004145750620004146200040d6200041e565b836200042d565b92915050565b4690565b6006546001600160a01b031690565b6001600160a01b03811660009081526011602052604081205460ff1615620004585750600162000414565b6200046f83836200047660201b620019571760201c565b9392505050565b6007546000906200049c906001600160a01b031662000547602090811b62001a1217901c565b620004aa5750600062000414565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c455279190620004e190889060040162000777565b60206040518083038186803b158015620004fa57600080fd5b505afa1580156200050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200053591906200069e565b6001600160a01b031614949350505050565b3b151590565b8280546200055b9062000824565b90600052602060002090601f0160209004810192826200057f5760008555620005ca565b82601f106200059a57805160ff1916838001178555620005ca565b82800160010185558215620005ca579182015b82811115620005ca578251825591602001919060010190620005ad565b50620005d8929150620005dc565b5090565b5b80821115620005d85760008155600101620005dd565b600082601f83011262000604578081fd5b81516001600160401b038082111562000621576200062162000861565b6040516020601f8401601f191682018101838111838210171562000649576200064962000861565b604052838252858401810187101562000660578485fd5b8492505b8383101562000683578583018101518284018201529182019162000664565b838311156200069457848185840101525b5095945050505050565b600060208284031215620006b0578081fd5b81516200046f8162000877565b600080600080600060a08688031215620006d5578081fd5b85516001600160401b0380821115620006ec578283fd5b620006fa89838a01620005f3565b9650602088015191508082111562000710578283fd5b6200071e89838a01620005f3565b955060408801519150620007328262000877565b60608801519194508082111562000747578283fd5b506200075688828901620005f3565b9250506080860151620007698162000877565b809150509295509295909350565b6001600160a01b0391909116815260200190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b6020808252600e908201526d185b1c9958591e481a5b9a5d195960921b604082015260600190565b6002810460018216806200083957607f821691505b602082108114156200085b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200088d57600080fd5b50565b613ee980620008a06000396000f3fe6080604052600436106102665760003560e01c8063731133e911610144578063b48ab8b6116100b6578063e985e9c51161007a578063e985e9c5146106d0578063f242432a146106f0578063f2fde38b14610710578063f5298aca14610730578063f6eb127a14610750578063f923e8c31461077057610266565b8063b48ab8b614610646578063bd85b03914610666578063c311c52314610686578063cd7c03261461069b578063d26ea6c0146106b057610266565b80638da5cb5b116101085780638da5cb5b1461059c57806391686f53146105b157806395d89b41146105d15780639e037eea146105e6578063a22cb46514610606578063a50aa5c31461062657610266565b8063731133e91461050757806373505d35146105275780638456cb5914610547578063862440e21461055c578063869f75941461057c57610266565b80632eb2c2d6116101dd5780634e1273f4116101a15780634e1273f41461044e5780634f558e791461047b578063510b51581461049b5780635b51acff146104c85780635c975abb146104dd578063715018a6146104f257610266565b80632eb2c2d6146103c45780632f1c982c146103e45780633408e470146104045780633588ad7c146104195780633f4ba83a1461043957610266565b80630e89341c1161022f5780630e89341c1461031a5780630f7e59701461033a5780631e7d9dbb1461034f57806320379ee51461036f57806324d88785146103845780632d0335ab146103a457610266565b8062fdd58e1461026b57806301ffc9a7146102a157806306fdde03146102ce5780630bb2465a146102f05780630c53c51c14610307575b600080fd5b34801561027757600080fd5b5061028b610286366004612f09565b610785565b60405161029891906134de565b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004613151565b6107c4565b60405161029891906134d3565b3480156102da57600080fd5b506102e361080c565b6040516102989190613529565b3480156102fc57600080fd5b5061030561089a565b005b6102e3610315366004612e8f565b6108e1565b34801561032657600080fd5b506102e3610335366004613249565b610a61565b34801561034657600080fd5b506102e3610ba2565b34801561035b57600080fd5b506102c161036a366004613249565b610bbf565b34801561037b57600080fd5b5061028b610bd4565b34801561039057600080fd5b5061030561039f3660046131a5565b610bdb565b3480156103b057600080fd5b5061028b6103bf366004612bf3565b610c19565b3480156103d057600080fd5b506103056103df366004612c47565b610c34565b3480156103f057600080fd5b506103056103ff36600461307b565b610cd6565b34801561041057600080fd5b5061028b61101d565b34801561042557600080fd5b5061030561043436600461329d565b611021565b34801561044557600080fd5b506103056110be565b34801561045a57600080fd5b5061046e610469366004612fbc565b6110ef565b604051610298919061349b565b34801561048757600080fd5b506102c1610496366004613249565b61120e565b3480156104a757600080fd5b506104bb6104b6366004613249565b611222565b60405161029891906133ab565b3480156104d457600080fd5b506104bb61126d565b3480156104e957600080fd5b506102c161127c565b3480156104fe57600080fd5b5061030561128c565b34801561051357600080fd5b50610305610522366004612f68565b6112d5565b34801561053357600080fd5b506102c1610542366004612bf3565b61133e565b34801561055357600080fd5b50610305611353565b34801561056857600080fd5b5061030561057736600461329d565b611382565b34801561058857600080fd5b5061028b610597366004613249565b6113dd565b3480156105a857600080fd5b506104bb6113e8565b3480156105bd57600080fd5b506103056105cc366004613279565b6113f7565b3480156105dd57600080fd5b506102e36114a0565b3480156105f257600080fd5b50610305610601366004612bf3565b6114ad565b34801561061257600080fd5b50610305610621366004612e5e565b6114f5565b34801561063257600080fd5b50610305610641366004612bf3565b6115c3565b34801561065257600080fd5b50610305610661366004612dc8565b61160e565b34801561067257600080fd5b5061028b610681366004613249565b6116bb565b34801561069257600080fd5b506102c16116cd565b3480156106a757600080fd5b506104bb6116d2565b3480156106bc57600080fd5b506103056106cb366004612bf3565b6116e1565b3480156106dc57600080fd5b506102c16106eb366004612c0f565b61172a565b3480156106fc57600080fd5b5061030561070b366004612cf0565b611754565b34801561071c57600080fd5b5061030561072b366004612bf3565b6117a4565b34801561073c57600080fd5b5061030561074b366004612f34565b611815565b34801561075c57600080fd5b5061030561076b366004612d56565b61184a565b34801561077c57600080fd5b506102e36118ee565b6000806107928484611a18565b905061079d84611a68565b6107a757806107ba565b6107b083611a73565b6107ba9082613c99565b9150505b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806107f557506001600160e01b031982166303a24d0760e21b145b80610804575061080482611a91565b90505b919050565b6008805461081990613d19565b80601f016020809104026020016040519081016040528092919081815260200182805461084590613d19565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505081565b6108aa6108a5611aaa565b611ab9565b6108cf5760405162461bcd60e51b81526004016108c69061376f565b60405180910390fd5b601080546001600160a01b0319169055565b60408051606081810183526001600160a01b0388166000818152600560209081529085902054845283015291810186905261091f8782878787611aee565b61093b5760405162461bcd60e51b81526004016108c690613a0b565b6001600160a01b03871660009081526005602052604090205461095f906001613c99565b6001600160a01b0388166000908152600560205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b906109af90899033908a906133bf565b60405180910390a1600080306001600160a01b0316888a6040516020016109d7929190613359565b60408051601f19818403018152908290526109f19161333d565b6000604051808303816000865af19150503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b509150915081610a555760405162461bcd60e51b81526004016108c6906136d3565b98975050505050505050565b6000818152600d6020526040812080546060929190610a7f90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610aab90613d19565b8015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b505050505090508051600014610b0f579050610807565b600c8054610b1c90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4890613d19565b8015610b955780601f10610b6a57610100808354040283529160200191610b95565b820191906000526020600020905b815481529060010190602001808311610b7857829003601f168201915b5050505050915050919050565b604051806040016040528060018152602001603160f81b81525081565b6000908152600e602052604090205460ff1690565b6004545b90565b610be66108a5611aaa565b610c025760405162461bcd60e51b81526004016108c69061376f565b8051610c1590600c906020840190612aa2565b5050565b6001600160a01b031660009081526005602052604090205490565b8151835114610c555760405162461bcd60e51b81526004016108c690613978565b60005b8351811015610cce57610cbc8686868481518110610c8657634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610cae57634e487b7160e01b600052603260045260246000fd5b602002602001015186611754565b80610cc681613d54565b915050610c58565b505050505050565b610ce16108a5611aaa565b610cfd5760405162461bcd60e51b81526004016108c69061376f565b6010546001600160a01b031680610d265760405162461bcd60e51b81526004016108c690613a4c565b6000816001600160a01b031663f923e8c36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9d91908101906131d7565b905060005b8351811015611017576000848281518110610dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015190506000858381518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905060006001600160a01b0316816001600160a01b03161415610e3e5760405162461bcd60e51b81526004016108c6906137b4565b604051627eeac760e11b81526000906001600160a01b0387169062fdd58e90610e6d9085908790600401613482565b60206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190613261565b905080610ecc57505050611007565b610ee782848360405180602001604052806000815250611b94565b845160208601206040516303a24d0760e21b81526001600160a01b03881690630e89341c90610f1a9087906004016134de565b60006040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6e91908101906131d7565b80519060200120146110035761100383876001600160a01b0316630e89341c866040518263ffffffff1660e01b8152600401610faa91906134de565b60006040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906131d7565b611bb4565b5050505b61101081613d54565b9050610da2565b50505050565b4690565b816110338161102e611aaa565b611c34565b61104f5760405162461bcd60e51b81526004016108c690613a76565b8261105981610bbf565b156110765760405162461bcd60e51b81526004016108c6906139a7565b83611091611082611aaa565b8261108c84611c67565b611c82565b6110ad5760405162461bcd60e51b81526004016108c690613656565b6110b78585611bb4565b5050505050565b6110c96108a5611aaa565b6110e55760405162461bcd60e51b81526004016108c69061376f565b6110ed611c99565b565b606081518351146111125760405162461bcd60e51b81526004016108c690613b98565b600083516001600160401b0381111561113b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611164578160200160208202803683370190505b50905060005b8451811015611206576111cb85828151811061119657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111be57634e487b7160e01b600052603260045260246000fd5b6020026020010151610785565b8282815181106111eb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526111ff81613d54565b905061116a565b509392505050565b6000908152600b6020526040902054151590565b6000818152601260205260408120546001600160a01b03161561125d57506000818152601260205260409020546001600160a01b0316610807565b61126682611d0a565b9050610807565b6010546001600160a01b031681565b600654600160a01b900460ff1690565b611294611aaa565b6001600160a01b03166112a56113e8565b6001600160a01b0316146112cb5760405162461bcd60e51b81526004016108c6906139d6565b6110ed6000611d24565b6002600f5414156112f85760405162461bcd60e51b81526004016108c690613be1565b6002600f558261130a8161102e611aaa565b6113265760405162461bcd60e51b81526004016108c690613a76565b61133285858585611b94565b50506001600f55505050565b60116020526000908152604090205460ff1681565b61135e6108a5611aaa565b61137a5760405162461bcd60e51b81526004016108c69061376f565b6110ed611d76565b8161138f8161102e611aaa565b6113ab5760405162461bcd60e51b81526004016108c690613a76565b826113b7611082611aaa565b6113d35760405162461bcd60e51b81526004016108c690613656565b6110178484611dd7565b600061080482611c67565b6006546001600160a01b031690565b816114048161102e611aaa565b6114205760405162461bcd60e51b81526004016108c690613a76565b6001600160a01b0382166114465760405162461bcd60e51b81526004016108c69061353c565b60008381526012602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917f39071c63e44267bfdefc7b625c0df99d3ce2e6ff98d9f5e9e8a7ab43cdf5000d9190a3505050565b6009805461081990613d19565b6114b86108a5611aaa565b6114d45760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19169055565b816001600160a01b0316611507611aaa565b6001600160a01b0316141561152e5760405162461bcd60e51b81526004016108c690613b4f565b806001600061153b611aaa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561157f611aaa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b791906134d3565b60405180910390a35050565b6115ce6108a5611aaa565b6115ea5760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19166001179055565b6002600f5414156116315760405162461bcd60e51b81526004016108c690613be1565b6002600f5560005b83518110156116a35761167584828151811061166557634e487b7160e01b600052603260045260246000fd5b602002602001015161102e611aaa565b6116915760405162461bcd60e51b81526004016108c690613a76565b8061169b81613d54565b915050611639565b506116b084848484611e27565b50506001600f555050565b6000908152600b602052604090205490565b600190565b6007546001600160a01b031681565b6116ec6108a5611aaa565b6117085760405162461bcd60e51b81526004016108c69061376f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006117368383611e8c565b15611743575060016107be565b61174d8383611ebf565b9392505050565b60006117608685611a18565b9050828110156117975761177f85856117798487613cd6565b856112d5565b8015611792576117928686868486611eed565b610cce565b610cce8686868686611eed565b6117ac611aaa565b6001600160a01b03166117bd6113e8565b6001600160a01b0316146117e35760405162461bcd60e51b81526004016108c6906139d6565b6001600160a01b0381166118095760405162461bcd60e51b81526004016108c69061368d565b61181281611d24565b50565b828282611823838383611c82565b61183f5760405162461bcd60e51b81526004016108c69061370a565b610cce8686866120ae565b60005b82518110156118dd576118af8484838151811061187a57634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106118a257634e487b7160e01b600052603260045260246000fd5b6020026020010151611c82565b6118cb5760405162461bcd60e51b81526004016108c69061370a565b806118d581613d54565b91505061184d565b506118e9838383612104565b505050565b600c805461081990613d19565b60003330141561195257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610bd89050565b503390565b60075460009061196f906001600160a01b0316611a12565b61197b575060006107be565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906119b09088906004016133ab565b60206040518083038186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613189565b6001600160a01b031614949350505050565b3b151590565b60006001600160a01b038316611a405760405162461bcd60e51b81526004016108c6906135d4565b506000908152600a602090815260408083206001600160a01b03949094168352929052205490565b600061080482611ab9565b6000611a7e826116bb565b611a87836113dd565b6108049190613cd6565b6001600160e01b031981166301ffc9a760e01b14919050565b6000611ab46118fb565b905090565b6000816001600160a01b0316611acd6113e8565b6001600160a01b031614806108045750610804611ae86113e8565b83611e8c565b60006001600160a01b038616611b165760405162461bcd60e51b81526004016108c690613822565b6001611b29611b248761215a565b6121b8565b83868660405160008152602001604052604051611b49949392919061350b565b6020604051602081039080840390855afa158015611b6b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b611ba0848484846121d4565b600181511115611017576110178382611dd7565b6000815111611bd55760405162461bcd60e51b81526004016108c6906138d6565b6000828152600e60205260409020805460ff19166001179055611bf88282611dd7565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720782604051611c289190613529565b60405180910390a25050565b600080611c4084611222565b9050826001600160a01b0316816001600160a01b031614806107ba57506107ba8184611e8c565b6000611c7a600165010000000000613cd6565b909116919050565b600081611c8f8585610785565b1015949350505050565b611ca161127c565b611cbd5760405162461bcd60e51b81526004016108c690613565565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611cf3611aaa565b604051611d0091906133ab565b60405180910390a1565b6000611d1860286038613cb1565b60ff169190911c919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d7e61127c565b15611d9b5760405162461bcd60e51b81526004016108c690613867565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf3611aaa565b6000828152600d602090815260409091208251611df692840190612aa2565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051611c289190613529565b611e33848484846122f1565b6001815111156110175760005b83518110156110b757611e7a848281518110611e6c57634e487b7160e01b600052603260045260246000fd5b602002602001015183611dd7565b80611e8481613d54565b915050611e40565b6001600160a01b03811660009081526011602052604081205460ff1615611eb5575060016107be565b61174d8383611957565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b611ef561127c565b15611f125760405162461bcd60e51b81526004016108c690613867565b84611f1b611aaa565b6001600160a01b0316816001600160a01b03161480611f415750611f41816106eb611aaa565b611f5d5760405162461bcd60e51b81526004016108c690613aa4565b6001600160a01b038516611f835760405162461bcd60e51b81526004016108c690613891565b6000611f8d611aaa565b9050611fad818888611f9e8961249a565b611fa78961249a565b88610cce565b6000858152600a602090815260408083206001600160a01b038b16845290915290205484811015611ff05760405162461bcd60e51b81526004016108c69061392e565b611ffa8582613cd6565b6000878152600a602090815260408083206001600160a01b038d81168552925280832093909355891681529081208054879290612038908490613c99565b92505081905550866001600160a01b0316886001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161208e929190613c18565b60405180910390a46120a48289898989896124f3565b5050505050505050565b826120b7611aaa565b6001600160a01b0316816001600160a01b031614806120dd57506120dd816106eb611aaa565b6120f95760405162461bcd60e51b81526004016108c690613aa4565b61101784848461260a565b8261210d611aaa565b6001600160a01b0316816001600160a01b031614806121335750612133816106eb611aaa565b61214f5760405162461bcd60e51b81526004016108c690613aa4565b6110178484846127a2565b6000604051806080016040528060438152602001613e71604391398051602091820120835184830151604080870151805190860120905161219b95016134e7565b604051602081830303815290604052805190602001209050919050565b60006121c2610bd4565b8260405160200161219b929190613390565b6121dc61127c565b156121f95760405162461bcd60e51b81526004016108c690613867565b6000612203611aaa565b9050612224816000876122158861249a565b61221e8861249a565b87610cce565b61222e84846129a9565b6000848152600a602090815260408083206001600160a01b038916845290915281208054859290612260908490613c99565b90915550506000848152600b602052604081208054859290612283908490613c99565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122da929190613c18565b60405180910390a46110b7816000878787876124f3565b6122f961127c565b156123165760405162461bcd60e51b81526004016108c690613867565b81518351146123375760405162461bcd60e51b81526004016108c690613978565b82516000612343611aaa565b905061235481600088888888610cce565b60005b8281101561243257600086828151811061238157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106123ad57634e487b7160e01b600052603260045260246000fd5b602002602001015190506123c182826129a9565b6000828152600a602090815260408083206001600160a01b038d168452909152812080548392906123f3908490613c99565b90915550506000828152600b602052604081208054839290612416908490613c99565b925050819055505050808061242a90613d54565b915050612357565b50856001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb88886040516124839291906134ae565b60405180910390a4610cce816000888888886129d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124e257634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612505846001600160a01b0316611a12565b15610cce5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061253e908990899088908890889060040161343d565b602060405180830381600087803b15801561255857600080fd5b505af1925050508015612588575060408051601f3d908101601f191682019092526125859181019061316d565b60015b6125d157612594613da1565b8061259f57506125b9565b8060405162461bcd60e51b81526004016108c69190613529565b60405162461bcd60e51b81526004016108c69061361f565b6001600160e01b0319811663f23a6e6160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b50505050505050565b61261261127c565b1561262f5760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166126555760405162461bcd60e51b81526004016108c690613b1f565b600081116126755760405162461bcd60e51b81526004016108c690613741565b600061267f611aaa565b90506126af818560006126918761249a565b61269a8761249a565b60405180602001604052806000815250610cce565b6000838152600a602090815260408083206001600160a01b0388168452909152902054828110156126f25760405162461bcd60e51b81526004016108c6906138fe565b6126fc8382613cd6565b6000858152600a602090815260408083206001600160a01b038a168452825280832093909355868252600b9052908120805485929061273c908490613cd6565b9250508190555060006001600160a01b0316856001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612793929190613c18565b60405180910390a45050505050565b6127aa61127c565b156127c75760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166127ed5760405162461bcd60e51b81526004016108c690613b1f565b805182511461280e5760405162461bcd60e51b81526004016108c690613ae8565b6000612818611aaa565b905061283881856000868660405180602001604052806000815250610cce565b60005b835181101561294a57600084828151811061286657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061289257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082206001600160a01b038c1683529093529190912054909150818110156128e35760405162461bcd60e51b81526004016108c6906138fe565b6128ed8282613cd6565b6000848152600a602090815260408083206001600160a01b038d168452825280832093909355858252600b9052908120805484929061292d908490613cd6565b92505081905550505050808061294290613d54565b91505061283b565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161299b9291906134ae565b60405180910390a450505050565b6129b282611a73565b811115610c155760405162461bcd60e51b81526004016108c690613593565b6129e3846001600160a01b0316611a12565b15610cce5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a1c90899089908890889088906004016133eb565b602060405180830381600087803b158015612a3657600080fd5b505af1925050508015612a66575060408051601f3d908101601f19168201909252612a639181019061316d565b60015b612a7257612594613da1565b6001600160e01b0319811663bc197c8160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b828054612aae90613d19565b90600052602060002090601f016020900481019282612ad05760008555612b16565b82601f10612ae957805160ff1916838001178555612b16565b82800160010185558215612b16579182015b82811115612b16578251825591602001919060010190612afb565b50612b22929150612b26565b5090565b5b80821115612b225760008155600101612b27565b600082601f830112612b4b578081fd5b81356020612b60612b5b83613c4f565b613c26565b8281528181019085830183850287018401881015612b7c578586fd5b855b85811015612b9a57813584529284019290840190600101612b7e565b5090979650505050505050565b600082601f830112612bb7578081fd5b8135612bc5612b5b82613c72565b818152846020838601011115612bd9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c04578081fd5b813561174d81613e45565b60008060408385031215612c21578081fd5b8235612c2c81613e45565b91506020830135612c3c81613e45565b809150509250929050565b600080600080600060a08688031215612c5e578081fd5b8535612c6981613e45565b94506020860135612c7981613e45565b935060408601356001600160401b0380821115612c94578283fd5b612ca089838a01612b3b565b94506060880135915080821115612cb5578283fd5b612cc189838a01612b3b565b93506080880135915080821115612cd6578283fd5b50612ce388828901612ba7565b9150509295509295909350565b600080600080600060a08688031215612d07578283fd5b8535612d1281613e45565b94506020860135612d2281613e45565b9350604086013592506060860135915060808601356001600160401b03811115612d4a578182fd5b612ce388828901612ba7565b600080600060608486031215612d6a578081fd5b8335612d7581613e45565b925060208401356001600160401b0380821115612d90578283fd5b612d9c87838801612b3b565b93506040860135915080821115612db1578283fd5b50612dbe86828701612b3b565b9150509250925092565b60008060008060808587031215612ddd578182fd5b8435612de881613e45565b935060208501356001600160401b0380821115612e03578384fd5b612e0f88838901612b3b565b94506040870135915080821115612e24578384fd5b612e3088838901612b3b565b93506060870135915080821115612e45578283fd5b50612e5287828801612ba7565b91505092959194509250565b60008060408385031215612e70578182fd5b8235612e7b81613e45565b915060208301358015158114612c3c578182fd5b600080600080600060a08688031215612ea6578283fd5b8535612eb181613e45565b945060208601356001600160401b03811115612ecb578384fd5b612ed788828901612ba7565b9450506040860135925060608601359150608086013560ff81168114612efb578182fd5b809150509295509295909350565b60008060408385031215612f1b578182fd5b8235612f2681613e45565b946020939093013593505050565b600080600060608486031215612f48578081fd5b8335612f5381613e45565b95602085013595506040909401359392505050565b60008060008060808587031215612f7d578182fd5b8435612f8881613e45565b9350602085013592506040850135915060608501356001600160401b03811115612fb0578182fd5b612e5287828801612ba7565b60008060408385031215612fce578182fd5b82356001600160401b0380821115612fe4578384fd5b818501915085601f830112612ff7578384fd5b81356020613007612b5b83613c4f565b82815281810190858301838502870184018b1015613023578889fd5b8896505b8487101561304e57803561303a81613e45565b835260019690960195918301918301613027565b5096505086013592505080821115613064578283fd5b5061307185828601612b3b565b9150509250929050565b6000602080838503121561308d578182fd5b82356001600160401b03808211156130a3578384fd5b818501915085601f8301126130b6578384fd5b81356130c4612b5b82613c4f565b818152848101908486016040808502870188018b10156130e2578889fd5b8896505b848710156131425780828c0312156130fc578889fd5b8051818101818110888211171561311557613115613d85565b8252823581528883013561312881613e45565b818a015284526001969096019592870192908101906130e6565b50909998505050505050505050565b600060208284031215613162578081fd5b813561174d81613e5a565b60006020828403121561317e578081fd5b815161174d81613e5a565b60006020828403121561319a578081fd5b815161174d81613e45565b6000602082840312156131b6578081fd5b81356001600160401b038111156131cb578182fd5b6107ba84828501612ba7565b6000602082840312156131e8578081fd5b81516001600160401b038111156131fd578182fd5b8201601f8101841361320d578182fd5b805161321b612b5b82613c72565b81815285602083850101111561322f578384fd5b613240826020830160208601613ced565b95945050505050565b60006020828403121561325a578081fd5b5035919050565b600060208284031215613272578081fd5b5051919050565b6000806040838503121561328b578182fd5b823591506020830135612c3c81613e45565b600080604083850312156132af578182fd5b8235915060208301356001600160401b038111156132cb578182fd5b61307185828601612ba7565b6000815180845260208085019450808401835b83811015613306578151875295820195908201906001016132ea565b509495945050505050565b60008151808452613329816020860160208601613ced565b601f01601f19169290920160200192915050565b6000825161334f818460208701613ced565b9190910192915050565b6000835161336b818460208801613ced565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0384811682528316602082015260606040820181905260009061324090830184613311565b6001600160a01b0386811682528516602082015260a060408201819052600090613417908301866132d7565b828103606084015261342981866132d7565b90508281036080840152610a558185613311565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061347790830184613311565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b60006020825261174d60208301846132d7565b6000604082526134c160408301856132d7565b828103602084015261324081856132d7565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261174d6020830184613311565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526021908201527f5155414e544954595f455843454544535f544f4b454e5f535550504c595f43416040820152600560fc1b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252601f908201527f5472616e7366657220746f206e6f6e2045524331313535526563656976657200604082015260600190565b6020808252601d908201527f4f4e4c595f46554c4c5f544f4b454e5f4f574e45525f414c4c4f574544000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601f908201527f4f4e4c595f544f4b454e5f414d4f554e545f4f574e45445f414c4c4f57454400604082015260600190565b602080825260149082015273414d4f554e545f4c4553535f5448414e5f4f4e4560601b604082015260600190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b60208082526018908201527f5a45524f5f414444524553535f4e4f545f414c4c4f5745440000000000000000604082015260600190565b6020808252601f908201527f4552433131353552656365697665722072656a656374656420746f6b656e7300604082015260600190565b60208082526025908201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360408201526424a3a722a960d91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252600e908201526d4f4e4c595f56414c49445f55524960901b604082015260600190565b602080825260169082015275414d4f554e545f455843454544535f42414c414e434560501b604082015260600190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601590820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b604082015260600190565b60208082526015908201527415549257d0d0539393d517d09157d0d2105391d151605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b60208082526010908201526f135251d490551157d11254d05093115160821b604082015260600190565b60208082526014908201527313d3931657d0d491505513d497d0531313d5d15160621b604082015260600190565b60208082526024908201527f455243313135355472616e6461626c653a2043414c4c45525f4e4f545f414c4c60408201526313d5d15160e21b606082015260800190565b6020808252601b908201527f4944535f414d4f554e54535f4c454e4754485f4d49534d415443480000000000604082015260600190565b6020808252601690820152754255524e5f46524f4d5f5a45524f5f4144445245535360501b604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613c4757613c47613d85565b604052919050565b60006001600160401b03821115613c6857613c68613d85565b5060209081020190565b60006001600160401b03821115613c8b57613c8b613d85565b50601f01601f191660200190565b60008219821115613cac57613cac613d6f565b500190565b600060ff821660ff84168060ff03821115613cce57613cce613d6f565b019392505050565b600082821015613ce857613ce8613d6f565b500390565b60005b83811015613d08578181015183820152602001613cf0565b838111156110175750506000910152565b600281046001821680613d2d57607f821691505b60208210811415613d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d6857613d68613d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613db157610bd8565b600481823e6308c379a0613dc58251613d9b565b14613dcf57610bd8565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613dfe5750505050610bd8565b82840192508251915080821115613e185750505050610bd8565b503d83016020828401011115613e3057505050610bd8565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461181257600080fd5b6001600160e01b03198116811461181257600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220fc1f5aea4eeee2df5db9b9be6c44f54550ede2ce190013367fe005dfc634543b64736f6c63430008000033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429",
	"deployedBytecode": "0x6080604052600436106102665760003560e01c8063731133e911610144578063b48ab8b6116100b6578063e985e9c51161007a578063e985e9c5146106d0578063f242432a146106f0578063f2fde38b14610710578063f5298aca14610730578063f6eb127a14610750578063f923e8c31461077057610266565b8063b48ab8b614610646578063bd85b03914610666578063c311c52314610686578063cd7c03261461069b578063d26ea6c0146106b057610266565b80638da5cb5b116101085780638da5cb5b1461059c57806391686f53146105b157806395d89b41146105d15780639e037eea146105e6578063a22cb46514610606578063a50aa5c31461062657610266565b8063731133e91461050757806373505d35146105275780638456cb5914610547578063862440e21461055c578063869f75941461057c57610266565b80632eb2c2d6116101dd5780634e1273f4116101a15780634e1273f41461044e5780634f558e791461047b578063510b51581461049b5780635b51acff146104c85780635c975abb146104dd578063715018a6146104f257610266565b80632eb2c2d6146103c45780632f1c982c146103e45780633408e470146104045780633588ad7c146104195780633f4ba83a1461043957610266565b80630e89341c1161022f5780630e89341c1461031a5780630f7e59701461033a5780631e7d9dbb1461034f57806320379ee51461036f57806324d88785146103845780632d0335ab146103a457610266565b8062fdd58e1461026b57806301ffc9a7146102a157806306fdde03146102ce5780630bb2465a146102f05780630c53c51c14610307575b600080fd5b34801561027757600080fd5b5061028b610286366004612f09565b610785565b60405161029891906134de565b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004613151565b6107c4565b60405161029891906134d3565b3480156102da57600080fd5b506102e361080c565b6040516102989190613529565b3480156102fc57600080fd5b5061030561089a565b005b6102e3610315366004612e8f565b6108e1565b34801561032657600080fd5b506102e3610335366004613249565b610a61565b34801561034657600080fd5b506102e3610ba2565b34801561035b57600080fd5b506102c161036a366004613249565b610bbf565b34801561037b57600080fd5b5061028b610bd4565b34801561039057600080fd5b5061030561039f3660046131a5565b610bdb565b3480156103b057600080fd5b5061028b6103bf366004612bf3565b610c19565b3480156103d057600080fd5b506103056103df366004612c47565b610c34565b3480156103f057600080fd5b506103056103ff36600461307b565b610cd6565b34801561041057600080fd5b5061028b61101d565b34801561042557600080fd5b5061030561043436600461329d565b611021565b34801561044557600080fd5b506103056110be565b34801561045a57600080fd5b5061046e610469366004612fbc565b6110ef565b604051610298919061349b565b34801561048757600080fd5b506102c1610496366004613249565b61120e565b3480156104a757600080fd5b506104bb6104b6366004613249565b611222565b60405161029891906133ab565b3480156104d457600080fd5b506104bb61126d565b3480156104e957600080fd5b506102c161127c565b3480156104fe57600080fd5b5061030561128c565b34801561051357600080fd5b50610305610522366004612f68565b6112d5565b34801561053357600080fd5b506102c1610542366004612bf3565b61133e565b34801561055357600080fd5b50610305611353565b34801561056857600080fd5b5061030561057736600461329d565b611382565b34801561058857600080fd5b5061028b610597366004613249565b6113dd565b3480156105a857600080fd5b506104bb6113e8565b3480156105bd57600080fd5b506103056105cc366004613279565b6113f7565b3480156105dd57600080fd5b506102e36114a0565b3480156105f257600080fd5b50610305610601366004612bf3565b6114ad565b34801561061257600080fd5b50610305610621366004612e5e565b6114f5565b34801561063257600080fd5b50610305610641366004612bf3565b6115c3565b34801561065257600080fd5b50610305610661366004612dc8565b61160e565b34801561067257600080fd5b5061028b610681366004613249565b6116bb565b34801561069257600080fd5b506102c16116cd565b3480156106a757600080fd5b506104bb6116d2565b3480156106bc57600080fd5b506103056106cb366004612bf3565b6116e1565b3480156106dc57600080fd5b506102c16106eb366004612c0f565b61172a565b3480156106fc57600080fd5b5061030561070b366004612cf0565b611754565b34801561071c57600080fd5b5061030561072b366004612bf3565b6117a4565b34801561073c57600080fd5b5061030561074b366004612f34565b611815565b34801561075c57600080fd5b5061030561076b366004612d56565b61184a565b34801561077c57600080fd5b506102e36118ee565b6000806107928484611a18565b905061079d84611a68565b6107a757806107ba565b6107b083611a73565b6107ba9082613c99565b9150505b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806107f557506001600160e01b031982166303a24d0760e21b145b80610804575061080482611a91565b90505b919050565b6008805461081990613d19565b80601f016020809104026020016040519081016040528092919081815260200182805461084590613d19565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b505050505081565b6108aa6108a5611aaa565b611ab9565b6108cf5760405162461bcd60e51b81526004016108c69061376f565b60405180910390fd5b601080546001600160a01b0319169055565b60408051606081810183526001600160a01b0388166000818152600560209081529085902054845283015291810186905261091f8782878787611aee565b61093b5760405162461bcd60e51b81526004016108c690613a0b565b6001600160a01b03871660009081526005602052604090205461095f906001613c99565b6001600160a01b0388166000908152600560205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b906109af90899033908a906133bf565b60405180910390a1600080306001600160a01b0316888a6040516020016109d7929190613359565b60408051601f19818403018152908290526109f19161333d565b6000604051808303816000865af19150503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b509150915081610a555760405162461bcd60e51b81526004016108c6906136d3565b98975050505050505050565b6000818152600d6020526040812080546060929190610a7f90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610aab90613d19565b8015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b505050505090508051600014610b0f579050610807565b600c8054610b1c90613d19565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4890613d19565b8015610b955780601f10610b6a57610100808354040283529160200191610b95565b820191906000526020600020905b815481529060010190602001808311610b7857829003601f168201915b5050505050915050919050565b604051806040016040528060018152602001603160f81b81525081565b6000908152600e602052604090205460ff1690565b6004545b90565b610be66108a5611aaa565b610c025760405162461bcd60e51b81526004016108c69061376f565b8051610c1590600c906020840190612aa2565b5050565b6001600160a01b031660009081526005602052604090205490565b8151835114610c555760405162461bcd60e51b81526004016108c690613978565b60005b8351811015610cce57610cbc8686868481518110610c8657634e487b7160e01b600052603260045260246000fd5b6020026020010151868581518110610cae57634e487b7160e01b600052603260045260246000fd5b602002602001015186611754565b80610cc681613d54565b915050610c58565b505050505050565b610ce16108a5611aaa565b610cfd5760405162461bcd60e51b81526004016108c69061376f565b6010546001600160a01b031680610d265760405162461bcd60e51b81526004016108c690613a4c565b6000816001600160a01b031663f923e8c36040518163ffffffff1660e01b815260040160006040518083038186803b158015610d6157600080fd5b505afa158015610d75573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d9d91908101906131d7565b905060005b8351811015611017576000848281518110610dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015190506000858381518110610dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905060006001600160a01b0316816001600160a01b03161415610e3e5760405162461bcd60e51b81526004016108c6906137b4565b604051627eeac760e11b81526000906001600160a01b0387169062fdd58e90610e6d9085908790600401613482565b60206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190613261565b905080610ecc57505050611007565b610ee782848360405180602001604052806000815250611b94565b845160208601206040516303a24d0760e21b81526001600160a01b03881690630e89341c90610f1a9087906004016134de565b60006040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6e91908101906131d7565b80519060200120146110035761100383876001600160a01b0316630e89341c866040518263ffffffff1660e01b8152600401610faa91906134de565b60006040518083038186803b158015610fc257600080fd5b505afa158015610fd6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffe91908101906131d7565b611bb4565b5050505b61101081613d54565b9050610da2565b50505050565b4690565b816110338161102e611aaa565b611c34565b61104f5760405162461bcd60e51b81526004016108c690613a76565b8261105981610bbf565b156110765760405162461bcd60e51b81526004016108c6906139a7565b83611091611082611aaa565b8261108c84611c67565b611c82565b6110ad5760405162461bcd60e51b81526004016108c690613656565b6110b78585611bb4565b5050505050565b6110c96108a5611aaa565b6110e55760405162461bcd60e51b81526004016108c69061376f565b6110ed611c99565b565b606081518351146111125760405162461bcd60e51b81526004016108c690613b98565b600083516001600160401b0381111561113b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611164578160200160208202803683370190505b50905060005b8451811015611206576111cb85828151811061119657634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106111be57634e487b7160e01b600052603260045260246000fd5b6020026020010151610785565b8282815181106111eb57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526111ff81613d54565b905061116a565b509392505050565b6000908152600b6020526040902054151590565b6000818152601260205260408120546001600160a01b03161561125d57506000818152601260205260409020546001600160a01b0316610807565b61126682611d0a565b9050610807565b6010546001600160a01b031681565b600654600160a01b900460ff1690565b611294611aaa565b6001600160a01b03166112a56113e8565b6001600160a01b0316146112cb5760405162461bcd60e51b81526004016108c6906139d6565b6110ed6000611d24565b6002600f5414156112f85760405162461bcd60e51b81526004016108c690613be1565b6002600f558261130a8161102e611aaa565b6113265760405162461bcd60e51b81526004016108c690613a76565b61133285858585611b94565b50506001600f55505050565b60116020526000908152604090205460ff1681565b61135e6108a5611aaa565b61137a5760405162461bcd60e51b81526004016108c69061376f565b6110ed611d76565b8161138f8161102e611aaa565b6113ab5760405162461bcd60e51b81526004016108c690613a76565b826113b7611082611aaa565b6113d35760405162461bcd60e51b81526004016108c690613656565b6110178484611dd7565b600061080482611c67565b6006546001600160a01b031690565b816114048161102e611aaa565b6114205760405162461bcd60e51b81526004016108c690613a76565b6001600160a01b0382166114465760405162461bcd60e51b81526004016108c69061353c565b60008381526012602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917f39071c63e44267bfdefc7b625c0df99d3ce2e6ff98d9f5e9e8a7ab43cdf5000d9190a3505050565b6009805461081990613d19565b6114b86108a5611aaa565b6114d45760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19169055565b816001600160a01b0316611507611aaa565b6001600160a01b0316141561152e5760405162461bcd60e51b81526004016108c690613b4f565b806001600061153b611aaa565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561157f611aaa565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b791906134d3565b60405180910390a35050565b6115ce6108a5611aaa565b6115ea5760405162461bcd60e51b81526004016108c69061376f565b6001600160a01b03166000908152601160205260409020805460ff19166001179055565b6002600f5414156116315760405162461bcd60e51b81526004016108c690613be1565b6002600f5560005b83518110156116a35761167584828151811061166557634e487b7160e01b600052603260045260246000fd5b602002602001015161102e611aaa565b6116915760405162461bcd60e51b81526004016108c690613a76565b8061169b81613d54565b915050611639565b506116b084848484611e27565b50506001600f555050565b6000908152600b602052604090205490565b600190565b6007546001600160a01b031681565b6116ec6108a5611aaa565b6117085760405162461bcd60e51b81526004016108c69061376f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60006117368383611e8c565b15611743575060016107be565b61174d8383611ebf565b9392505050565b60006117608685611a18565b9050828110156117975761177f85856117798487613cd6565b856112d5565b8015611792576117928686868486611eed565b610cce565b610cce8686868686611eed565b6117ac611aaa565b6001600160a01b03166117bd6113e8565b6001600160a01b0316146117e35760405162461bcd60e51b81526004016108c6906139d6565b6001600160a01b0381166118095760405162461bcd60e51b81526004016108c69061368d565b61181281611d24565b50565b828282611823838383611c82565b61183f5760405162461bcd60e51b81526004016108c69061370a565b610cce8686866120ae565b60005b82518110156118dd576118af8484838151811061187a57634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106118a257634e487b7160e01b600052603260045260246000fd5b6020026020010151611c82565b6118cb5760405162461bcd60e51b81526004016108c69061370a565b806118d581613d54565b91505061184d565b506118e9838383612104565b505050565b600c805461081990613d19565b60003330141561195257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150610bd89050565b503390565b60075460009061196f906001600160a01b0316611a12565b61197b575060006107be565b60075460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906119b09088906004016133ab565b60206040518083038186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190613189565b6001600160a01b031614949350505050565b3b151590565b60006001600160a01b038316611a405760405162461bcd60e51b81526004016108c6906135d4565b506000908152600a602090815260408083206001600160a01b03949094168352929052205490565b600061080482611ab9565b6000611a7e826116bb565b611a87836113dd565b6108049190613cd6565b6001600160e01b031981166301ffc9a760e01b14919050565b6000611ab46118fb565b905090565b6000816001600160a01b0316611acd6113e8565b6001600160a01b031614806108045750610804611ae86113e8565b83611e8c565b60006001600160a01b038616611b165760405162461bcd60e51b81526004016108c690613822565b6001611b29611b248761215a565b6121b8565b83868660405160008152602001604052604051611b49949392919061350b565b6020604051602081039080840390855afa158015611b6b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b611ba0848484846121d4565b600181511115611017576110178382611dd7565b6000815111611bd55760405162461bcd60e51b81526004016108c6906138d6565b6000828152600e60205260409020805460ff19166001179055611bf88282611dd7565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720782604051611c289190613529565b60405180910390a25050565b600080611c4084611222565b9050826001600160a01b0316816001600160a01b031614806107ba57506107ba8184611e8c565b6000611c7a600165010000000000613cd6565b909116919050565b600081611c8f8585610785565b1015949350505050565b611ca161127c565b611cbd5760405162461bcd60e51b81526004016108c690613565565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611cf3611aaa565b604051611d0091906133ab565b60405180910390a1565b6000611d1860286038613cb1565b60ff169190911c919050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d7e61127c565b15611d9b5760405162461bcd60e51b81526004016108c690613867565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf3611aaa565b6000828152600d602090815260409091208251611df692840190612aa2565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051611c289190613529565b611e33848484846122f1565b6001815111156110175760005b83518110156110b757611e7a848281518110611e6c57634e487b7160e01b600052603260045260246000fd5b602002602001015183611dd7565b80611e8481613d54565b915050611e40565b6001600160a01b03811660009081526011602052604081205460ff1615611eb5575060016107be565b61174d8383611957565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b611ef561127c565b15611f125760405162461bcd60e51b81526004016108c690613867565b84611f1b611aaa565b6001600160a01b0316816001600160a01b03161480611f415750611f41816106eb611aaa565b611f5d5760405162461bcd60e51b81526004016108c690613aa4565b6001600160a01b038516611f835760405162461bcd60e51b81526004016108c690613891565b6000611f8d611aaa565b9050611fad818888611f9e8961249a565b611fa78961249a565b88610cce565b6000858152600a602090815260408083206001600160a01b038b16845290915290205484811015611ff05760405162461bcd60e51b81526004016108c69061392e565b611ffa8582613cd6565b6000878152600a602090815260408083206001600160a01b038d81168552925280832093909355891681529081208054879290612038908490613c99565b92505081905550866001600160a01b0316886001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161208e929190613c18565b60405180910390a46120a48289898989896124f3565b5050505050505050565b826120b7611aaa565b6001600160a01b0316816001600160a01b031614806120dd57506120dd816106eb611aaa565b6120f95760405162461bcd60e51b81526004016108c690613aa4565b61101784848461260a565b8261210d611aaa565b6001600160a01b0316816001600160a01b031614806121335750612133816106eb611aaa565b61214f5760405162461bcd60e51b81526004016108c690613aa4565b6110178484846127a2565b6000604051806080016040528060438152602001613e71604391398051602091820120835184830151604080870151805190860120905161219b95016134e7565b604051602081830303815290604052805190602001209050919050565b60006121c2610bd4565b8260405160200161219b929190613390565b6121dc61127c565b156121f95760405162461bcd60e51b81526004016108c690613867565b6000612203611aaa565b9050612224816000876122158861249a565b61221e8861249a565b87610cce565b61222e84846129a9565b6000848152600a602090815260408083206001600160a01b038916845290915281208054859290612260908490613c99565b90915550506000848152600b602052604081208054859290612283908490613c99565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516122da929190613c18565b60405180910390a46110b7816000878787876124f3565b6122f961127c565b156123165760405162461bcd60e51b81526004016108c690613867565b81518351146123375760405162461bcd60e51b81526004016108c690613978565b82516000612343611aaa565b905061235481600088888888610cce565b60005b8281101561243257600086828151811061238157634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008683815181106123ad57634e487b7160e01b600052603260045260246000fd5b602002602001015190506123c182826129a9565b6000828152600a602090815260408083206001600160a01b038d168452909152812080548392906123f3908490613c99565b90915550506000828152600b602052604081208054839290612416908490613c99565b925050819055505050808061242a90613d54565b915050612357565b50856001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb88886040516124839291906134ae565b60405180910390a4610cce816000888888886129d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124e257634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612505846001600160a01b0316611a12565b15610cce5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061253e908990899088908890889060040161343d565b602060405180830381600087803b15801561255857600080fd5b505af1925050508015612588575060408051601f3d908101601f191682019092526125859181019061316d565b60015b6125d157612594613da1565b8061259f57506125b9565b8060405162461bcd60e51b81526004016108c69190613529565b60405162461bcd60e51b81526004016108c69061361f565b6001600160e01b0319811663f23a6e6160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b50505050505050565b61261261127c565b1561262f5760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166126555760405162461bcd60e51b81526004016108c690613b1f565b600081116126755760405162461bcd60e51b81526004016108c690613741565b600061267f611aaa565b90506126af818560006126918761249a565b61269a8761249a565b60405180602001604052806000815250610cce565b6000838152600a602090815260408083206001600160a01b0388168452909152902054828110156126f25760405162461bcd60e51b81526004016108c6906138fe565b6126fc8382613cd6565b6000858152600a602090815260408083206001600160a01b038a168452825280832093909355868252600b9052908120805485929061273c908490613cd6565b9250508190555060006001600160a01b0316856001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612793929190613c18565b60405180910390a45050505050565b6127aa61127c565b156127c75760405162461bcd60e51b81526004016108c690613867565b6001600160a01b0383166127ed5760405162461bcd60e51b81526004016108c690613b1f565b805182511461280e5760405162461bcd60e51b81526004016108c690613ae8565b6000612818611aaa565b905061283881856000868660405180602001604052806000815250610cce565b60005b835181101561294a57600084828151811061286657634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061289257634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000848152600a835260408082206001600160a01b038c1683529093529190912054909150818110156128e35760405162461bcd60e51b81526004016108c6906138fe565b6128ed8282613cd6565b6000848152600a602090815260408083206001600160a01b038d168452825280832093909355858252600b9052908120805484929061292d908490613cd6565b92505081905550505050808061294290613d54565b91505061283b565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161299b9291906134ae565b60405180910390a450505050565b6129b282611a73565b811115610c155760405162461bcd60e51b81526004016108c690613593565b6129e3846001600160a01b0316611a12565b15610cce5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a1c90899089908890889088906004016133eb565b602060405180830381600087803b158015612a3657600080fd5b505af1925050508015612a66575060408051601f3d908101601f19168201909252612a639181019061316d565b60015b612a7257612594613da1565b6001600160e01b0319811663bc197c8160e01b146126015760405162461bcd60e51b81526004016108c6906137eb565b828054612aae90613d19565b90600052602060002090601f016020900481019282612ad05760008555612b16565b82601f10612ae957805160ff1916838001178555612b16565b82800160010185558215612b16579182015b82811115612b16578251825591602001919060010190612afb565b50612b22929150612b26565b5090565b5b80821115612b225760008155600101612b27565b600082601f830112612b4b578081fd5b81356020612b60612b5b83613c4f565b613c26565b8281528181019085830183850287018401881015612b7c578586fd5b855b85811015612b9a57813584529284019290840190600101612b7e565b5090979650505050505050565b600082601f830112612bb7578081fd5b8135612bc5612b5b82613c72565b818152846020838601011115612bd9578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c04578081fd5b813561174d81613e45565b60008060408385031215612c21578081fd5b8235612c2c81613e45565b91506020830135612c3c81613e45565b809150509250929050565b600080600080600060a08688031215612c5e578081fd5b8535612c6981613e45565b94506020860135612c7981613e45565b935060408601356001600160401b0380821115612c94578283fd5b612ca089838a01612b3b565b94506060880135915080821115612cb5578283fd5b612cc189838a01612b3b565b93506080880135915080821115612cd6578283fd5b50612ce388828901612ba7565b9150509295509295909350565b600080600080600060a08688031215612d07578283fd5b8535612d1281613e45565b94506020860135612d2281613e45565b9350604086013592506060860135915060808601356001600160401b03811115612d4a578182fd5b612ce388828901612ba7565b600080600060608486031215612d6a578081fd5b8335612d7581613e45565b925060208401356001600160401b0380821115612d90578283fd5b612d9c87838801612b3b565b93506040860135915080821115612db1578283fd5b50612dbe86828701612b3b565b9150509250925092565b60008060008060808587031215612ddd578182fd5b8435612de881613e45565b935060208501356001600160401b0380821115612e03578384fd5b612e0f88838901612b3b565b94506040870135915080821115612e24578384fd5b612e3088838901612b3b565b93506060870135915080821115612e45578283fd5b50612e5287828801612ba7565b91505092959194509250565b60008060408385031215612e70578182fd5b8235612e7b81613e45565b915060208301358015158114612c3c578182fd5b600080600080600060a08688031215612ea6578283fd5b8535612eb181613e45565b945060208601356001600160401b03811115612ecb578384fd5b612ed788828901612ba7565b9450506040860135925060608601359150608086013560ff81168114612efb578182fd5b809150509295509295909350565b60008060408385031215612f1b578182fd5b8235612f2681613e45565b946020939093013593505050565b600080600060608486031215612f48578081fd5b8335612f5381613e45565b95602085013595506040909401359392505050565b60008060008060808587031215612f7d578182fd5b8435612f8881613e45565b9350602085013592506040850135915060608501356001600160401b03811115612fb0578182fd5b612e5287828801612ba7565b60008060408385031215612fce578182fd5b82356001600160401b0380821115612fe4578384fd5b818501915085601f830112612ff7578384fd5b81356020613007612b5b83613c4f565b82815281810190858301838502870184018b1015613023578889fd5b8896505b8487101561304e57803561303a81613e45565b835260019690960195918301918301613027565b5096505086013592505080821115613064578283fd5b5061307185828601612b3b565b9150509250929050565b6000602080838503121561308d578182fd5b82356001600160401b03808211156130a3578384fd5b818501915085601f8301126130b6578384fd5b81356130c4612b5b82613c4f565b818152848101908486016040808502870188018b10156130e2578889fd5b8896505b848710156131425780828c0312156130fc578889fd5b8051818101818110888211171561311557613115613d85565b8252823581528883013561312881613e45565b818a015284526001969096019592870192908101906130e6565b50909998505050505050505050565b600060208284031215613162578081fd5b813561174d81613e5a565b60006020828403121561317e578081fd5b815161174d81613e5a565b60006020828403121561319a578081fd5b815161174d81613e45565b6000602082840312156131b6578081fd5b81356001600160401b038111156131cb578182fd5b6107ba84828501612ba7565b6000602082840312156131e8578081fd5b81516001600160401b038111156131fd578182fd5b8201601f8101841361320d578182fd5b805161321b612b5b82613c72565b81815285602083850101111561322f578384fd5b613240826020830160208601613ced565b95945050505050565b60006020828403121561325a578081fd5b5035919050565b600060208284031215613272578081fd5b5051919050565b6000806040838503121561328b578182fd5b823591506020830135612c3c81613e45565b600080604083850312156132af578182fd5b8235915060208301356001600160401b038111156132cb578182fd5b61307185828601612ba7565b6000815180845260208085019450808401835b83811015613306578151875295820195908201906001016132ea565b509495945050505050565b60008151808452613329816020860160208601613ced565b601f01601f19169290920160200192915050565b6000825161334f818460208701613ced565b9190910192915050565b6000835161336b818460208801613ced565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0384811682528316602082015260606040820181905260009061324090830184613311565b6001600160a01b0386811682528516602082015260a060408201819052600090613417908301866132d7565b828103606084015261342981866132d7565b90508281036080840152610a558185613311565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061347790830184613311565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b60006020825261174d60208301846132d7565b6000604082526134c160408301856132d7565b828103602084015261324081856132d7565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261174d6020830184613311565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526021908201527f5155414e544954595f455843454544535f544f4b454e5f535550504c595f43416040820152600560fc1b606082015260800190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252601f908201527f5472616e7366657220746f206e6f6e2045524331313535526563656976657200604082015260600190565b6020808252601d908201527f4f4e4c595f46554c4c5f544f4b454e5f4f574e45525f414c4c4f574544000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604082015260600190565b6020808252601f908201527f4f4e4c595f544f4b454e5f414d4f554e545f4f574e45445f414c4c4f57454400604082015260600190565b602080825260149082015273414d4f554e545f4c4553535f5448414e5f4f4e4560601b604082015260600190565b60208082526025908201527f455243313135355472616e6461626c653a2043414c4c45525f49535f4e4f545f60408201526427aba722a960d91b606082015260800190565b60208082526018908201527f5a45524f5f414444524553535f4e4f545f414c4c4f5745440000000000000000604082015260600190565b6020808252601f908201527f4552433131353552656365697665722072656a656374656420746f6b656e7300604082015260600190565b60208082526025908201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360408201526424a3a722a960d91b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252600e908201526d4f4e4c595f56414c49445f55524960901b604082015260600190565b602080825260169082015275414d4f554e545f455843454544535f42414c414e434560501b604082015260600190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601590820152740929cac82989288be82a4a482b2a6be988a9c8ea89605b1b604082015260600190565b60208082526015908201527415549257d0d0539393d517d09157d0d2105391d151605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636040820152600d60fb1b606082015260800190565b60208082526010908201526f135251d490551157d11254d05093115160821b604082015260600190565b60208082526014908201527313d3931657d0d491505513d497d0531313d5d15160621b604082015260600190565b60208082526024908201527f455243313135355472616e6461626c653a2043414c4c45525f4e4f545f414c4c60408201526313d5d15160e21b606082015260800190565b6020808252601b908201527f4944535f414d4f554e54535f4c454e4754485f4d49534d415443480000000000604082015260600190565b6020808252601690820152754255524e5f46524f4d5f5a45524f5f4144445245535360501b604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613c4757613c47613d85565b604052919050565b60006001600160401b03821115613c6857613c68613d85565b5060209081020190565b60006001600160401b03821115613c8b57613c8b613d85565b50601f01601f191660200190565b60008219821115613cac57613cac613d6f565b500190565b600060ff821660ff84168060ff03821115613cce57613cce613d6f565b019392505050565b600082821015613ce857613ce8613d6f565b500390565b60005b83811015613d08578181015183820152602001613cf0565b838111156110175750506000910152565b600281046001821680613d2d57607f821691505b60208210811415613d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613d6857613d68613d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613db157610bd8565b600481823e6308c379a0613dc58251613d9b565b14613dcf57610bd8565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613dfe5750505050610bd8565b82840192508251915080821115613e185750505050610bd8565b503d83016020828401011115613e3057505050610bd8565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461181257600080fd5b6001600160e01b03198116811461181257600080fdfe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220fc1f5aea4eeee2df5db9b9be6c44f54550ede2ce190013367fe005dfc634543b64736f6c63430008000033",
	"libraries": {},
	"devdoc": {
		"kind": "dev",
		"methods": {
			"balanceOfBatch(address[],uint256[])": {
				"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
			},
			"batchBurn(address,uint256[],uint256[])": {
				"details": "Burns tokens for each id in _ids",
				"params": {
					"_from": "The address to burn tokens from",
					"_ids": "Array of token ids to burn",
					"_quantities": "Array of the amount to be burned"
				}
			},
			"batchMint(address,uint256[],uint256[],bytes)": {
				"details": "Mint tokens for each id in _ids",
				"params": {
					"_data": "Data to pass if receiver is contract",
					"_ids": "Array of ids to mint",
					"_quantities": "Array of amounts of tokens to mint per id",
					"_to": "The address to mint tokens to"
				}
			},
			"burn(address,uint256,uint256)": {
				"details": "Burns amount of a given token id",
				"params": {
					"_from": "The address to burn tokens from",
					"_id": "Token ID to burn",
					"_quantity": "Amount to burn"
				}
			},
			"exists(uint256)": {
				"details": "Returns whether the specified token is minted"
			},
			"mint(address,uint256,uint256,bytes)": {
				"details": "Mints some amount of tokens to an address",
				"params": {
					"_data": "Data to pass if receiver is contract",
					"_id": "Token ID to mint",
					"_quantity": "Amount of tokens to mint",
					"_to": "Address of the future owner of the token"
				}
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"paused()": {
				"details": "Return true if the contract is paused, and false otherwise"
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
			},
			"setApprovalForAll(address,bool)": {
				"details": "See {IERC1155-setApprovalForAll}."
			},
			"supportsInterface(bytes4)": {
				"details": "See {IERC165-supportsInterface}."
			},
			"totalSupply(uint256)": {
				"details": "Returns the total quantity for a token ID",
				"params": {
					"_id": "Id of token to query"
				},
				"returns": {
					"_0": "Amount of token in existence"
				}
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"storageLayout": {
		"storage": [
			{
				"astId": 7145,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 7151,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_operatorApprovals",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
			},
			{
				"astId": 7153,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_uri",
				"offset": 0,
				"slot": "2",
				"type": "t_string_storage"
			},
			{
				"astId": 2734,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "inited",
				"offset": 0,
				"slot": "3",
				"type": "t_bool"
			},
			{
				"astId": 2642,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "domainSeperator",
				"offset": 0,
				"slot": "4",
				"type": "t_bytes32"
			},
			{
				"astId": 2781,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "nonces",
				"offset": 0,
				"slot": "5",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 7,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_owner",
				"offset": 0,
				"slot": "6",
				"type": "t_address"
			},
			{
				"astId": 9009,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_paused",
				"offset": 20,
				"slot": "6",
				"type": "t_bool"
			},
			{
				"astId": 134,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "proxyRegistryAddress",
				"offset": 0,
				"slot": "7",
				"type": "t_address"
			},
			{
				"astId": 136,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "name",
				"offset": 0,
				"slot": "8",
				"type": "t_string_storage"
			},
			{
				"astId": 138,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "symbol",
				"offset": 0,
				"slot": "9",
				"type": "t_string_storage"
			},
			{
				"astId": 144,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "balances",
				"offset": 0,
				"slot": "10",
				"type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 148,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_supply",
				"offset": 0,
				"slot": "11",
				"type": "t_mapping(t_uint256,t_uint256)"
			},
			{
				"astId": 1341,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "templateURI",
				"offset": 0,
				"slot": "12",
				"type": "t_string_storage"
			},
			{
				"astId": 1345,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_tokenURI",
				"offset": 0,
				"slot": "13",
				"type": "t_mapping(t_uint256,t_string_storage)"
			},
			{
				"astId": 1349,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_isPermanentURI",
				"offset": 0,
				"slot": "14",
				"type": "t_mapping(t_uint256,t_bool)"
			},
			{
				"astId": 9098,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_status",
				"offset": 0,
				"slot": "15",
				"type": "t_uint256"
			},
			{
				"astId": 1961,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "migrationTarget",
				"offset": 0,
				"slot": "16",
				"type": "t_contract(ForbitswapNFTSAssetShared)2492"
			},
			{
				"astId": 1965,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "sharedProxyAddresses",
				"offset": 0,
				"slot": "17",
				"type": "t_mapping(t_address,t_bool)"
			},
			{
				"astId": 1974,
				"contract": "contracts/collectible/ForbitswapNFTSAssetShared.sol:ForbitswapNFTSAssetShared",
				"label": "_creatorOverride",
				"offset": 0,
				"slot": "18",
				"type": "t_mapping(t_uint256,t_address)"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_bool": {
				"encoding": "inplace",
				"label": "bool",
				"numberOfBytes": "1"
			},
			"t_bytes32": {
				"encoding": "inplace",
				"label": "bytes32",
				"numberOfBytes": "32"
			},
			"t_contract(ForbitswapNFTSAssetShared)2492": {
				"encoding": "inplace",
				"label": "contract ForbitswapNFTSAssetShared",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_bool)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_address,t_mapping(t_address,t_bool))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => bool))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_bool)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_mapping(t_uint256,t_address)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => address)",
				"numberOfBytes": "32",
				"value": "t_address"
			},
			"t_mapping(t_uint256,t_bool)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => bool)",
				"numberOfBytes": "32",
				"value": "t_bool"
			},
			"t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_uint256,t_string_storage)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => string)",
				"numberOfBytes": "32",
				"value": "t_string_storage"
			},
			"t_mapping(t_uint256,t_uint256)": {
				"encoding": "mapping",
				"key": "t_uint256",
				"label": "mapping(uint256 => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	}
}
